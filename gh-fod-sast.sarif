{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "Fortify on Demand",
        "version" : "SCA version unknown; Rulepack version unknown",
        "rules" : [ {
          "id" : "146172319",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 30 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in high.php on line 5.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in high.php on line 30.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/6ad80345-65dc-47f1-8ce7-972b99e3d17f"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172320",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 10 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in low.php on line 5.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in low.php on line 10.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/67320222-b3ee-4c85-b8e0-2f2c2b3230d9"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172328",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 23 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in medium.php on line 5.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in medium.php on line 23.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/d7b76deb-3681-4e1b-a7d6-fac4535bf4b0"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172329",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 26 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in impossible.php on line 8.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in impossible.php on line 26.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/305fdfd4-8be9-4f09-87de-bb454806025e"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172365",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 22 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in impossible.php on line 8.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in impossible.php on line 22.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/b2054591-a7b0-41a6-ac7e-de33bd7f62c3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172379",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 26 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in high.php on line 5.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in high.php on line 26.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/6495463b-2f9b-440e-92c0-505b48c2e7bb"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172387",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 19 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in medium.php on line 5.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in medium.php on line 19.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/cbe22d14-6fa8-45b3-a038-8f89fc858b01"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172393",
          "shortDescription" : {
            "text" : "Command Injection"
          },
          "fullDescription" : {
            "text" : "Line 14 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "help" : {
            "text" : "Command injection vulnerabilities take two forms:\n\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\n\n1. Data enters the application from an untrusted source.\n\nIn this case, the data enters at  in low.php on line 5.\n\n\n\n2. The data is used as or as part of a string representing a command that is executed by the application.\n\nIn this case, the command is executed by shell_exec() in low.php on line 14.\n\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\n\nExample 1: The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\n\n\n...\n$home = $_ENV['APPHOME'];\n$cmd = $home . $INITCMD;\nsystem(cmd);\n...\n\n\nThe code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.\n\nExample 2: The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\n\n\n...\n$btype = $_GET['backuptype'];\n$cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat \" . $btype . \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\";\nsystem(cmd);\n...\n\n\nThe problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form \"&amp;&amp; del c:\\\\dbms\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\n\nExample 3: The following code is from a web application that provides an interface through which users can update their password on the system. Part of the process for updating passwords in certain network environments is to run a make command in the /var/yp directory.\n\n\n...\n$result = shell_exec(\"make\");\n...\n\n\nThe problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\n\nDo not allow users to have direct control over the commands executed by the program. In cases where user input must affect the command to be run, use the input only to make a selection from a predetermined set of safe commands. If the input appears to be malicious, the value passed to the command execution function should either default to some safe selection from this set or the program should decline to execute any command at all.\n\nIn cases where user input must be used as an argument to a command executed by the program, this approach often becomes impractical because the set of legitimate argument values is too large or too hard to keep track of. Developers often fall back on implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. Any list of unsafe characters is likely to be incomplete and will be heavily dependent on the system where the commands are executed. A better approach is to create a list of characters that are permitted to appear in the input and accept input composed exclusively of characters in the approved set.\n\nAn attacker may indirectly control commands executed by a program by modifying the environment in which they are executed. The environment should not be trusted and precautions should be taken to prevent an attacker from using some manipulation of the environment to perform an attack. Whenever possible, commands should be controlled by the application and executed using an absolute path. In cases where the path is not known at compile time, such as for cross-platform applications, an absolute path should be constructed from trusted values during execution. Command values and paths read from configuration files or the environment should be sanity-checked against a set of invariants that define valid values.\n\nOther checks can sometimes be performed to detect if these sources may have been tampered with. For example, if a configuration file is world-writable, the program might refuse to run. In cases where information about the binary to be executed is known in advance, the program may perform checks to verify the identity of the binary. If a binary should always be owned by a particular user or have a particular set of access permissions assigned to it, these properties can be verified programmatically before the binary is executed.\n\nAlthough it may be impossible to completely protect a program from an imaginative attacker bent on controlling the commands the program executes, be sure to apply the principle of least privilege wherever the program executes an external command: do not hold privileges that are not essential to the execution of the command.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/5e4e7789-a2cd-4ab4-add6-0c39dc063ac3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172317",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case, the program creates a cookie in  on line , but the Secure parameter is not passed to setcookie() or is passed with the value false.\n\n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/6d510236-d29a-4381-883c-73caf25d0374"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172351",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case, the program creates a cookie in  on line , but the Secure parameter is not passed to setcookie() or is passed with the value false.\n\n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/954cf5b3-5e5f-4a52-ad8e-29b543fd7bcf"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172377",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case, the program creates a cookie in  on line , but the Secure parameter is not passed to setcookie() or is passed with the value false.\n\n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/8f8aed55-06ec-4db5-b5d6-0866150869de"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172391",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case, the program creates a cookie in  on line , but the Secure parameter is not passed to setcookie() or is passed with the value false.\n\n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/0fb2d01c-e255-4e87-a5c6-b20e2312fb29"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172403",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case, the program creates a cookie in  on line , but the Secure parameter is not passed to setcookie() or is passed with the value false.\n\n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/bb2ef645-ec41-49d7-b1a1-4e991bc13d76"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172407",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case, the program creates a cookie in  on line , but the Secure parameter is not passed to setcookie() or is passed with the value false.\n\n\nExample 1: The following code adds a cookie to the response without setting the Secure flag.\n\n...\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\");\n...\n\n\nIf an application uses both HTTPS and HTTP, but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Attackers may then compromise the cookie by sniffing the unencrypted network traffic, which is particularly easy over wireless networks.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be accomplished by passing true as the sixth argument to setcookie().\n\nExample 2: The following code corrects the mistake in Example 1 by setting the Secure flag to true.\n\n\nsetcookie(\"emailCookie\", $email, 0, \"/\", \"www.example.com\", TRUE);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/1cf8198d-bade-4923-8200-ececcbc5fd12"
          },
          "properties" : {
            "tags" : [ "Low" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172359",
          "shortDescription" : {
            "text" : "Cookie Security: Overly Broad Path"
          },
          "fullDescription" : {
            "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain."
          },
          "help" : {
            "text" : "Developers often set cookies to be accessible from the root context path (\"/\"). This exposes the cookie to all web applications on the domain. Because cookies often carry sensitive information such as session identifiers, sharing cookies across applications can cause a vulnerability in one application to compromise another application.\n\nExample 1:\nImagine you have a forum application deployed at http://communitypages.example.com/MyForum and the application sets a session ID cookie with path \"/\" when users log in to the forum.\n\nFor example:\n\nsetcookie(\"mySessionId\", getSessionID(), 0, \"/\", \"communitypages.example.com\", true, true);\n\n\nSuppose an attacker creates another application at http://communitypages.example.com/EvilSite and posts a link to this site on the forum. When a user of the forum clicks this link, the browser will send the cookie set by /MyForum to the application running at /EvilSite. By stealing the session ID, the attacker can compromise the account of any forum user that browsed to /EvilSite.\n\nIn addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using /EvilSite to create its own overly broad cookie that overwrites the cookie from /MyForum.\n\nMake sure to set cookie paths to be as restrictive as possible.\n\nExample 2: The following code shows how to set the cookie path to \"/MyForum\" for the example in the Explanation section.\n\nsetcookie(\"mySessionId\", getSessionID(), 0, \"/MyForum\", \"communitypages.example.com\", true, true);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/1cdb8086-0cd5-4d6b-971f-bd3ba2178bd1"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172406",
          "shortDescription" : {
            "text" : "Cookie Security: Overly Broad Path"
          },
          "fullDescription" : {
            "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain."
          },
          "help" : {
            "text" : "Developers often set cookies to be accessible from the root context path (\"/\"). This exposes the cookie to all web applications on the domain. Because cookies often carry sensitive information such as session identifiers, sharing cookies across applications can cause a vulnerability in one application to compromise another application.\n\nExample 1:\nImagine you have a forum application deployed at http://communitypages.example.com/MyForum and the application sets a session ID cookie with path \"/\" when users log in to the forum.\n\nFor example:\n\nsetcookie(\"mySessionId\", getSessionID(), 0, \"/\", \"communitypages.example.com\", true, true);\n\n\nSuppose an attacker creates another application at http://communitypages.example.com/EvilSite and posts a link to this site on the forum. When a user of the forum clicks this link, the browser will send the cookie set by /MyForum to the application running at /EvilSite. By stealing the session ID, the attacker can compromise the account of any forum user that browsed to /EvilSite.\n\nIn addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using /EvilSite to create its own overly broad cookie that overwrites the cookie from /MyForum.\n\nMake sure to set cookie paths to be as restrictive as possible.\n\nExample 2: The following code shows how to set the cookie path to \"/MyForum\" for the example in the Explanation section.\n\nsetcookie(\"mySessionId\", getSessionID(), 0, \"/MyForum\", \"communitypages.example.com\", true, true);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/6803e565-9314-4af8-98fd-1f9210f83c03"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172315",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in high.php on line 10.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/fc1f19d8-7d6b-4183-a24c-72f1fb65a15d"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172316",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in example.php on line 43.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/3ae0e76d-7a5e-4740-b837-0953cfd57630"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172333",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in view_source.php on line 13.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/cfc9077c-b7a0-41c1-97de-23ab35d7174f"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172334",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in high.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/0796b50c-b909-4090-aa11-9e3ee0dbe6c2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172338",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/7b97b30a-2816-46f1-93e2-12815f627e39"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172339",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in session-input.php on line 12.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/1307743d-3dd4-469b-9abd-aac345759640"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172340",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 12 of jsonp.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in jsonp.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in jsonp.php on line 12.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/2b62071e-33c6-49cb-b8a6-0ddebdbd5805"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172343",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in example.php on line 45.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/d5356297-2a0b-4ce2-94b3-7cebfa82ea34"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172353",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in impossible.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/c46a472f-a8ee-411b-9284-b8f9adae1531"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172355",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/489afe9c-5a82-42e0-9d28-c1a797586165"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172360",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 15.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/3be63596-15e8-4bf4-8484-6b7adb46dc38"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172361",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 355 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in dvwaPage.inc.php on line 142.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 355.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/fca1449e-11cf-4412-995f-576723425140"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172363",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in impossible.php on line 11.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/1cc1fde6-95c0-4292-944b-654052ce1c60"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172364",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 9.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/3e24414b-6773-4541-b28f-b84da2f16788"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172369",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in impossible.php on line 9.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/7c38cf05-c3b1-449f-a677-92fc47d62c7d"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172370",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in test_credentials.php on line 12.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/a13420ae-9283-4bcb-b1fc-186f92404a6b"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172371",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in impossible.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/e063f0fe-f677-44c0-a9a9-c34de14a3005"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172372",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/13409323-0282-4d74-b19b-8dc773804044"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172373",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/6a3bdb3c-b7a2-49ae-82c0-572e1a335fff"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172374",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in high.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/7bef2533-2973-40fa-a488-d4276a32856e"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172375",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in example.php on line 44.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/7fdb9338-68cc-4a2f-a7f6-b0015ce36888"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172376",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/42184c31-c7f3-4d19-98b8-d30305af25af"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172381",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 9.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/8dae9fc6-7ffe-4883-bcba-8daec99d37f3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172382",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/780d9c2a-ff27-44d2-87cd-7f11df9be16b"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172383",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 16.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/7dc9f748-e4da-4949-8fac-2661aed40421"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172389",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in view_source.php on line 12.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 435.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/f1a14934-f28b-4cc7-9e86-683703341772"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172390",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 5.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/690e76ac-13cf-438e-a717-34053ab20048"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172394",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in example.php on line 42.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in example.php on line 82.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/bcbb5b10-bb4d-482d-a734-fe830bfcc0a9"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172398",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in high.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/c541b90d-8817-4453-ac4a-33384d801a90"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172399",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/962644f3-6602-4b23-a0d5-3cdb1e2668d2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172400",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in low.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/5d30df50-ccdf-4f89-97af-e645af619380"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172404",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at  in medium.php on line 8.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at builtin_echo() in dvwaPage.inc.php on line 345.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following PHP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.\n\n\n&lt;?php\n$eid = $_GET['eid'];\n...\n?&gt;\n...\n&lt;?php\necho \"Employee ID: $eid\";\n?&gt;\n\n\nThe code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes metacharacters or source code, then the code is executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 2: The following PHP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\n\n\n&lt;?php...\n$con = mysql_connect($server,$user,$password);\n...\n$result = mysql_query(\"select * from emp where id=\"+eid);\n$row = mysql_fetch_array($result)\necho 'Employee name: ', mysql_result($row,0,'name');\n...\n?&gt;\n\n\nAs in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/36037eff-8504-48ca-b04a-477ac750bc9c"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172356",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file Factory.php passes an unvalidated filename to a dynamic include statement on line 76. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/646a574e-5c3a-4bb6-b5a0-926ccdfa8aba"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172357",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/2b13ab17-9a75-4059-b020-d173d7160e21"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172358",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/4350ee33-e36b-4746-ae05-498ef1d3cef3"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172368",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file Monitor.php passes an unvalidated filename to a dynamic include statement on line 368. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/3da01a1b-1ad3-489c-91d4-be793f7fea73"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172385",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/7e1284cb-4e2e-4729-973d-54b9f6ce5298"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172408",
          "shortDescription" : {
            "text" : "Dangerous File Inclusion"
          },
          "fullDescription" : {
            "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
          },
          "help" : {
            "text" : "Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.\n\n\nFile inclusion vulnerabilities are one of the most prolific and severe vulnerabilities in PHP applications. Prior to PHP 4.2.0, PHP installations shipped with the register_globals option enabled by default, which permits attackers to easily overwrite internal server variables. Although disabling register_globals can limit a program's exposure to file inclusion vulnerabilities, these problems still occur in modern PHP applications.\n\nExample 1: The following code includes a file under the application defined $server_root in a template.\n\n\n...\n&lt;?php include($server_root . '/myapp_header.php'); ?$gt;\n...\n\n\nIf register_globals is set to on, an attacker may overwrite the $server_root value by supplying $server_root as a request parameter, thereby taking partial-control of the dynamic include statement.\n\nExample 2: The following code takes a user specified template name and includes it in the PHP page to be rendered.\n\n\n...\n&lt;?php include($_GET['headername']); ?$gt;\n...\n\n\nIn Example 2, an attacker may take complete control of the dynamic include statement by supplying a malicious value for headername, which causes the program to include a file from an external site.\n\nIf the attacker specifies a valid file to a dynamic include statement, the contents of that file will be passed to the PHP interpreter. In the case of a plain text file, such as /etc/shadow, the file might be rendered as part of the HTML output. Worse, if the attacker may specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.\n\nDisable the register_globals option by including the following line in php.ini:\n\n\nregister_globals = 'off'\n\n\nDo not allow unvalidated user input to control paths used in dynamic include statements. Instead, use a level of indirection: create a list of legitimate files for inclusion, and only allow users to select from the list. With this approach, the user can not directly specify a file from the file system.\n\nExample 2 could be improved to map user input to a key that selects the desired template, as follows:\n\n\n&lt;?php\n$templates = array('main.php' =&gt; 1, 'blue.php' =&gt; 2, 'red.php' =&gt; 3);\n?$gt;\n...\n&lt;?php include($templates[$_GET['headername']]); ?$gt;\n\n...\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/8487f4a2-b687-4465-b250-d33e8f9ca9f2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172367",
          "shortDescription" : {
            "text" : "Header Manipulation: Cookies"
          },
          "fullDescription" : {
            "text" : "The method  in cookie-input.php includes unvalidated data in an HTTP cookie on line 12. This enables Cookie manipulation attacks and can lead to other HTTP Response header manipulation attacks like: cache-poisoning, cross-site scripting, cross-user defacement, page hijacking or open redirect.Including unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect."
          },
          "help" : {
            "text" : "Cookie Manipulation vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source, most frequently an HTTP request.\n\nIn this case, the data enters at  in cookie-input.php on line 12.\n\n\n2. The data is included in an HTTP cookie sent to a web user without being validated.\n\nIn this case, the data is sent at setcookie() in cookie-input.php on line 12.\n\nAs with many software security vulnerabilities, cookie manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP cookie.\n\nCookie Manipulation: When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.\n\nBeing an HTTP Response header, Cookie manipulation attacks can also lead to other types of attacks like:\n\nHTTP Response Splitting:\nOne of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.\n\nMany of today's modern application servers will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Apache Tomcat will throw an IllegalArgumentException if you attempt to set a header with prohibited characters. If your application server prevents setting headers with new line characters, then your application is not vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.\n\nExample: The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response.\n\n\n&lt;?php\n$author = $_GET['AUTHOR_PARAM'];\n...\nheader(\"author: $author\");\n?&gt;\n\n\nAssuming a string consisting of standard alphanumeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:\n\n\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Jane Smith\n...\n\n\nHowever, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as \"Wiley Hacker\\r\nHTTP/1.1 200 OK\\r\n...\", then the HTTP response would be split into two responses of the following form:\n\n\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Wiley Hacker\n\nHTTP/1.1 200 OK\n...\n\n\nClearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting, and page hijacking.\n\nCross-User Defacement: An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.\n\nCache Poisoning: The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.\n\nCross-Site Scripting: Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\n\nPage Hijacking: In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\n\nOpen Redirect: Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\n\nThe solution to prevent Cookie Manipulation is to ensure that input validation occurs in the required places and checks for the correct properties.\n\nSince Header Manipulation vulnerabilities like cookie manipulation occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating responses dynamically, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for Header Manipulation.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for Header Manipulation is generally relatively easy. Despite its value, input validation for Header Manipulation does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent Header Manipulation vulnerabilities is to validate everything that enters the application or leaves the application destined for the user.\n\nThe most secure approach to validation for Header Manipulation is to create an allow list of safe characters that can appear in HTTP response headers and accept input composed exclusively of characters in the approved set. For example, a valid name might only include alphanumeric characters or an account number might only include digits 0-9.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning in HTTP response headers. Although the CR and LF characters are at the heart of an HTTP response splitting attack, other characters, such as ':' (colon) and '=' (equal), have special meaning in response headers as well.\n\nAfter you identify the correct points in an application to perform validation for Header Manipulation attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. The application should reject any input destined to be included in HTTP response headers that contains special characters, particularly CR and LF, as invalid.\n\nMany application servers attempt to limit an application's exposure to HTTP response splitting vulnerabilities by providing implementations for the functions responsible for setting HTTP headers and cookies that perform validation for the characters essential to an HTTP response splitting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://ams.fortify.com//redirect/Issues/9a03ebae-363b-40c3-b3c9-bde80ccd8457"
          },
          "properties" : {
            "tags" : [ "High" ],
            "precision" : "low"
          }
        }, {
          "id" : "146172323",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in dvwaPhpIds.inc.php on line 63.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/efc6512c-5e38-42d8-879d-dd38f9eec70e"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172324",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in example.php on line 44.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/171d25c8-c8f7-4c5b-b018-f7609e3cacfc"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172330",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in dvwaPhpIds.inc.php on line 65.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/b96a1b59-3ac8-4bfa-b304-8df142534473"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172341",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in example.php on line 43.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/a79e8965-3475-4558-88a3-d125220ab001"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172350",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in dvwaPhpIds.inc.php on line 62.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/838ddb39-a3b2-4718-b9ac-55ff61f5d78f"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172388",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 8 of high.php, the method  writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at file_get_contents() in high.php on line 8.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in high.php on line 8.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/68eca129-444c-499d-b69e-6c3754e809b2"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172397",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in example.php on line 45.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/16312ab0-eb09-4eb4-8685-5763efdfcad7"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        }, {
          "id" : "146172401",
          "shortDescription" : {
            "text" : "JSON Injection"
          },
          "fullDescription" : {
            "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
          },
          "help" : {
            "text" : "JSON injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\nIn this case, the data enters at  in dvwaPhpIds.inc.php on line 64.\n\n\n2. The data is written to a JSON stream.\n\nIn this case, the JSON is written by json_decode() in Monitor.php on line 485.\n\nApplications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.\n\nThe semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as ones that involves JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.\n\nExample 1: The following PHP code serializes user account authentication information for non-privileged users (those with a role of \"default\" as opposed to privileged users with a role of \"admin\") from user-controlled URL parameters username and password to the JSON file located at ~/user_info.json:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_json_string = '{\"role\":\"default\",\"username\":\"' . $username . '\",\"password\":\"' . $password . '\"}';\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nYet, because the JSON serialization is performed using string concatenation, the untrusted data in username and password will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user mallory with password Evil123! were to append %22,%22role%22:%22 to her username and pass this value to the username URL parameter, the resulting JSON saved to ~/user_info.json would be:\n\n\n{\n\"role\":\"default\",\n\"username\":\"mallory\",\n\"role\":\"admin\",\n\"password\":\"Evil123!\"\n}\n\n\nIf this serialized JSON file were then deserialized using PHP's native json_decode() function as so:\n\n\n$user_info_json_string = file_get_contents('user_info.json', 'r');\n$user_info_json_data = json_decode($user_info_json_string);\n\n\nThe resulting values for username, password, and role in $user_info_json_data would be mallory, Evil123!, and admin respectively. Without further verification that the values within deserialized JSON data are valid, the application will incorrectly assign user mallory \"admin\" privileges.\n\nWhen writing user supplied data to JSON, follow these guidelines:\n\n1. Do not create JSON attributes with names that are derived from user input.\n\n2. Ensure that all serialization to JSON is performed using a safe serialization function that delimits untrusted data within single or double quotes and escapes any special characters.\n\nExample 2: The following PHP code implements the same functionality as that in Example 1, but instead uses json_encode() rather than string concatenation to serialize the data, therefore ensuring that any untrusted data is properly delimited and escaped:\n\n\n...\n\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$user_info_array = array('role' =&gt; 'default', 'username' =&gt; $username, 'password' =&gt; $password);\n\n$user_info_json_string = json_encode($user_info_array);\n\n$user_info_json_file = fopen('~/user_info.json', 'w');\nfwrite($user_info_json_file, $user_info_json_string);\nfclose($user_info_json_file);\n\n\nFor more information, see https://ams.fortify.com//redirect/Issues/72b14cc5-d788-4c73-b088-10df7db7172c"
          },
          "properties" : {
            "tags" : [ "Critical" ],
            "precision" : "high"
          }
        } ]
      }
    },
    "results" : [ {
      "ruleId" : "146172319",
      "message" : {
        "text" : "Line 30 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0134698E68A636B4A60DA2421F7B1B6F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/high.php"
          },
          "region" : {
            "startLine" : 30,
            "endLine" : 30,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172320",
      "message" : {
        "text" : "Line 10 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "19C105429F747FA4C50C1D57F308AA65"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/low.php"
          },
          "region" : {
            "startLine" : 10,
            "endLine" : 10,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:10 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172328",
      "message" : {
        "text" : "Line 23 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "30DDCC6D2A92583F7D7F240FCD7B127C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/medium.php"
          },
          "region" : {
            "startLine" : 23,
            "endLine" : 23,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172329",
      "message" : {
        "text" : "Line 26 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "346DB04AC4267C5B5533E332E92F38F4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/impossible.php"
          },
          "region" : {
            "startLine" : 26,
            "endLine" : 26,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172365",
      "message" : {
        "text" : "Line 22 in impossible.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9BA05608F56D1F8EB783DB5A96E6235D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/impossible.php"
          },
          "region" : {
            "startLine" : 22,
            "endLine" : 22,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:22 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172379",
      "message" : {
        "text" : "Line 26 in high.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BCFFF9829E271E2DE851312944CA882D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/high.php"
          },
          "region" : {
            "startLine" : 26,
            "endLine" : 26,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:26 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172387",
      "message" : {
        "text" : "Line 19 in medium.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C0CD46ECE8DAD80BBD5B182CEF2344D2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/medium.php"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172393",
      "message" : {
        "text" : "Line 14 in low.php calls shell_exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DAA05755644C6015A0AEFE1173CADE81"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/exec/source/low.php"
          },
          "region" : {
            "startLine" : 14,
            "endLine" : 14,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172317",
      "message" : {
        "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "11DEFD463DC3E515219521BBFBD9DD6B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/medium.php"
          },
          "region" : {
            "startLine" : 7,
            "endLine" : 7,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172351",
      "message" : {
        "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "78B1FF65E2AB5A5EC0E912C3293652D6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172377",
      "message" : {
        "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "AE5AD817092BDB9F94874585E45ABF8F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/low.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/low.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172391",
      "message" : {
        "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "DE8378141101E5FC99CEE163F203D28A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 153,
            "endLine" : 153,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172403",
      "message" : {
        "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "E34A393410082A50C2C88326DC9A51E1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/weak_id/source/high.php"
          },
          "region" : {
            "startLine" : 11,
            "endLine" : 11,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:11 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/weak_id/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172407",
      "message" : {
        "text" : "The program creates a cookie in  on line  without setting the Secure flag to true.The program creates a cookie without setting the Secure flag to true"
      },
      "level" : "note",
      "partialFingerprints" : {
        "issueInstanceId" : "F1B6264A617D3CA10E3F31E8DF4E0DC2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 154,
            "endLine" : 154,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172359",
      "message" : {
        "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "8B43EFF9DC6F2B4BC374031575D0BA61"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 153,
            "endLine" : 153,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:153 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 153
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172406",
      "message" : {
        "text" : "A cookie with an overly broad path can be accessed through other applications on the same domain."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "EA5C9997E7FC472C9EFF69FD6DF91901"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 154,
            "endLine" : 154,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:154 - setcookie()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 154
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172315",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0186C2C752F91C2A26B61E4A8DFA83D6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:13 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:2 - high.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/high.php"
                },
                "region" : {
                  "startLine" : 2
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172316",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "1377228420F7C55FC1420711846BB5A4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:237 - _iterate(1 : this->report->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:264 - init^(1 : this->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 264
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Event.php:121 - Assignment to $this->value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Event.php"
                },
                "region" : {
                  "startLine" : 121
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:262 - addevent(0 : this->events['?'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 262
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report.php:119 - Assignment to $this->events['?']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Report.php"
                },
                "region" : {
                  "startLine" : 119
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - getreport(this->report : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:670 - Return $this->report"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 670
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172333",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "3E768A1E5391AB41F00609EA37388328"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Read $_GET['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:13 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:72 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:95 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 95
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172334",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "3D90F9CF8FFFCD4A324CA194B72F47ED"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - trim(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:21 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:30 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:34 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172338",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "44E5A2FE685EAAF8FE335351C62AB6F3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:47 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172339",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "537198DA98652DCF4B42BD84465F1CE6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "session-input.php:12 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:12 - Assignment to $_SESSION['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "session-input.php:28 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/session-input.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172340",
      "message" : {
        "text" : "Line 12 of jsonp.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "544E5FD2A483096242AA314F13E8653F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csp/source/jsonp.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "jsonp.php:5 - Read $_GET['callback']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "jsonp.php:5 - Assignment to $callback"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "jsonp.php:12 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/jsonp.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172343",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "5792ABB522BB3890BAFEAD38BFA35D09"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:237 - _iterate(1 : this->report->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:264 - init^(1 : this->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 264
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Event.php:121 - Assignment to $this->value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Event.php"
                },
                "region" : {
                  "startLine" : 121
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:262 - addevent(0 : this->events['?'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 262
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report.php:119 - Assignment to $this->events['?']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Report.php"
                },
                "region" : {
                  "startLine" : 119
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - getreport(this->report : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:670 - Return $this->report"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 670
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172353",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "7C356B7638204790DAB2BE039DC07346"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - explode(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:12 - Assignment to $octet"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:17 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:26 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:30 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172355",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "83FDA19BA05A6C764C63C2CF4F37C9A2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:14 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:27 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172360",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "894E16F090BC6315DEC45E4C88AEE716"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:15 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172361",
      "message" : {
        "text" : "Line 355 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "92EF27D624CB8D818985777A959AAAD7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 355,
            "endLine" : 355,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Read $_COOKIE['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:456 - dvwasecuritylevelget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 456
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:456 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 456
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:458 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 458
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:301 - dvwabuttonhelphtmlget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 301
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:301 - Assignment to $systemInfoHtml"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 301
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:355 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 355
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Read $_COOKIE['security']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:142 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 142
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:463 - dvwasecuritylevelget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 463
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:463 - Assignment to $security"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 463
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:464 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 464
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:298 - dvwabuttonsourcehtmlget(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 298
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:298 - Assignment to $systemInfoHtml"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 298
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:355 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 355
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172363",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "95F5B989B86265FDF8BF8D2DCF60A979"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:11 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:14 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172364",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "97D3BA22BF5E97B309DFFFD0E58C9E63"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172369",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9D445414CA34844F7CB10480C934DC27"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Read $_FILES['uploaded']['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $uploaded_name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - substr(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $uploaded_ext"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:18 - Assignment to $target_file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:42 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/upload/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172370",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9E81BA00D7AAE4C892EB58265636147C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:12 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:13 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:13 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 13
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:14 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:14 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:27 - Assignment to $login_state"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:35 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 35
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "test_credentials.php:52 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/test_credentials.php"
                },
                "region" : {
                  "startLine" : 52
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172371",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "ABCC9A8B94CD3047D11C8D01567C53E4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Read $_POST['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:67 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:68 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:3 - impossible.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/impossible.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - impossible.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172372",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A5DB5EAB6985B89EF05792194976CCE3"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172373",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A19BB03F5203858744E18C178285A429"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_REQUEST['ip']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $target"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - shell_exec(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:14 - Assignment to $cmd"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:18 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172374",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A27F189A801CD9EA774785783596CA08"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - stripslashes(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:9 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:10 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 10
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:29 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172375",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "B5A32B652D0F38273137DEF6BD2A70AD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:237 - _iterate(1 : this->report->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:264 - init^(1 : this->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 264
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Event.php:121 - Assignment to $this->value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Event.php"
                },
                "region" : {
                  "startLine" : 121
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:262 - addevent(0 : this->events['?'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 262
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report.php:119 - Assignment to $this->events['?']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Report.php"
                },
                "region" : {
                  "startLine" : 119
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - getreport(this->report : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:670 - Return $this->report"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 670
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172376",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "ADCABFEA4ACA2DAC519D142100EB094C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:43 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172381",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "B6AFE9B3388300ACBF7D2E34B693F108"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Read $_POST['password_conf']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:9 - Assignment to $pass_conf"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 9
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172382",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C39452248A222F8CBE83563BF94E8232"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - mysqli_real_escape_string(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:6 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 6
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:23 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 23
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:24 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172383",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "BF11E3B3681BD18689DCE5DC975DAD9A"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:39 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 39
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:55 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/index.php"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:16 - Read $_POST['include']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:15 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:19 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csp/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$page}['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172389",
      "message" : {
        "text" : "Line 435 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D169BBDAA12DEAB5183DF3D8E215D862"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 435,
            "endLine" : 435,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Read $_GET['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:12 - Assignment to $id"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:72 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "view_source.php:95 - dvwasourcehtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/view_source.php"
                },
                "region" : {
                  "startLine" : 95
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:435 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 435
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172390",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C850B6F6AF6E1F449D60A3E1031CF35C"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Read $_GET['username']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:5 - Assignment to $user"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 5
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:21 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:22 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 22
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172394",
      "message" : {
        "text" : "Line 82 of example.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E1C10FF646D5E142CB1A105E79C50D34"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/docs/examples/example.php"
          },
          "region" : {
            "startLine" : 82,
            "endLine" : 82,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:42 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request : return->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:237 - _iterate(1 : this->report->events['?']->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:264 - init^(1 : this->value)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 264
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Event.php:121 - Assignment to $this->value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Event.php"
                },
                "region" : {
                  "startLine" : 121
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:262 - addevent(0 : this->events['?'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 262
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report.php:119 - Assignment to $this->events['?']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Report.php"
                },
                "region" : {
                  "startLine" : 119
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - getreport(this->report : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Monitor.php:670 - Return $this->report"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 670
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:241 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 241
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - Assignment to $result"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:82 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 82
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172398",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DD8DD8938BFFFF08501B32054531C9BE"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:3 - high.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/high.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - high.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172399",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "DF770EB84AD078C6FCA4F29C7145E83B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:11 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 11
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172400",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E589ACA40A8E29327313F6B7E0C96E5F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Read $_GET['name']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:8 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:3 - low.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/xss_r/source/low.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - low.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172404",
      "message" : {
        "text" : "Line 345 of dvwaPage.inc.php sends unvalidated data to a web browser, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "EA5E5A7DF307FCDB9FD40444CC9F0CD7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dvwa/includes/dvwaPage.inc.php"
          },
          "region" : {
            "startLine" : 345,
            "endLine" : 345,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:33 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:53 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 53
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:66 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/brute/index.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:96 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/index.php"
                },
                "region" : {
                  "startLine" : 96
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:73 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 73
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:94 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/index.php"
                },
                "region" : {
                  "startLine" : 94
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:51 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 51
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:65 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/exec/index.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Read $_POST['password_new']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $pass_new"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:28 - Assignment to $html"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:3 - medium.php({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/captcha/source/medium.php"
                },
                "region" : {
                  "startLine" : 3
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:34 - medium.php(once)({$html})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 34
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:67 - Assignment to $page['body']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:80 - dvwahtmlecho(0['body'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli/index.php"
                },
                "region" : {
                  "startLine" : 80
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPage.inc.php:345 - builtin_echo(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPage.inc.php"
                },
                "region" : {
                  "startLine" : 345
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172356",
      "message" : {
        "text" : "The file Factory.php passes an unvalidated filename to a dynamic include statement on line 76. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "52DE54E84169B8791741A6836207EC95"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
          },
          "region" : {
            "startLine" : 76,
            "endLine" : 76,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - init^(1->config['Caching']['caching'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:189 - init^(0->config['Caching']['caching'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 189
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Storage.php:106 - factory(0->config['Caching']['caching'])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Filter/Storage.php"
                },
                "region" : {
                  "startLine" : 106
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:69 - ucfirst(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:69 - preg_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:66 - Assignment to $wrapper"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:72 - Assignment to $path"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Factory.php:76 - builtin_includeonce(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Caching/Factory.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172357",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "834B2456912C06091F14089321C4F178"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:7 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 7
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - str_replace(2 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:8 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "medium.php:4 - medium.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/medium.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - medium.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172358",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "2CC9C99CE710F376B97AE6D59D6DE904"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:4 - high.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/high.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - high.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172368",
      "message" : {
        "text" : "The file Monitor.php passes an unvalidated filename to a dynamic include statement on line 368. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "A0D8E705A133B314D700D9C6D4B5E395"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 368,
            "endLine" : 368,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - init^(1->config['General']['HTML_Purifier_Path'] : this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:206 - Assignment to $this->pathToHTMLPurifier"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 206
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:125 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 125
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ids.php:126 - run(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/cakephp/ids.php"
                },
                "region" : {
                  "startLine" : 126
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:308 - _purifyvalues(this->pathToHTMLPurifier)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 308
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:368 - builtin_includeonce(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 368
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172385",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "C2A6C7BACEA1E5899F26850EE8C84BF4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "impossible.php:4 - impossible.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/impossible.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - impossible.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172408",
      "message" : {
        "text" : "The file index.php passes an unvalidated filename to a dynamic include statement on line 36. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution. Allowing unvalidated user input to control files that are included dynamically in PHP can lead to malicious code execution."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "F2DAAE5B3B3E8FF0115D9228AB519AD6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/fi/index.php"
          },
          "region" : {
            "startLine" : 36,
            "endLine" : 36,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "low.php:4 - Read $_GET['page']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:4 - Assignment to $file"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "low.php:4 - low.php({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/source/low.php"
                },
                "region" : {
                  "startLine" : 4
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:32 - low.php(once)({$file})"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 32
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "index.php:36 - builtin_include(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/fi/index.php"
                },
                "region" : {
                  "startLine" : 36
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172367",
      "message" : {
        "text" : "The method  in cookie-input.php includes unvalidated data in an HTTP cookie on line 12. This enables Cookie manipulation attacks and can lead to other HTTP Response header manipulation attacks like: cache-poisoning, cross-site scripting, cross-user defacement, page hijacking or open redirect.Including unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "9954AB0C6ED596105A480B962ECF2824"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
          },
          "region" : {
            "startLine" : 12,
            "endLine" : 12,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - Read $_POST['id']"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "cookie-input.php:12 - setcookie(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/sqli_blind/cookie-input.php"
                },
                "region" : {
                  "startLine" : 12
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172323",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "0A7A09AA0F67B9D6C3D5833FD2C5C7C6"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:63 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 63
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172324",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "119A062DEDA86244385F478DE71FE2F4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:44 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172330",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "38D997552638D2B3011C8133801D672D"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:65 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172341",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "570418F5FA12A2F882569B0D7FFC3EC7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:43 - Read $_GET"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172350",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "6E9F21F73B98B2C07A1F028CD0A67680"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:62 - Read $_REQUEST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172388",
      "message" : {
        "text" : "On line 8 of high.php, the method  writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D3B9D985A4C809839A8E3A346107CC17"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "vulnerabilities/csrf/source/high.php"
          },
          "region" : {
            "startLine" : 8,
            "endLine" : 8,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "high.php:8 - file_get_contents(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "high.php:8 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "vulnerabilities/csrf/source/high.php"
                },
                "region" : {
                  "startLine" : 8
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172397",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "D817056D578964FEA3AD33FB5F603889"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "example.php:45 - Read $_COOKIE"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 45
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:41 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 41
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:68 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 68
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "example.php:69 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/docs/examples/example.php"
                },
                "region" : {
                  "startLine" : 69
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "146172401",
      "message" : {
        "text" : "On line 485 of Monitor.php, the method _jsondecodevalues() writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity."
      },
      "level" : "warning",
      "partialFingerprints" : {
        "issueInstanceId" : "E909440420883E5872BEB2D8138FD058"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
          },
          "region" : {
            "startLine" : 485,
            "endLine" : 485,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:64 - Read $_POST"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 64
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:61 - Assignment to $request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 61
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - init^(0 : this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "&nbsp;&nbsp;&nbsp;Monitor.php:190 - Assignment to $this->request"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 190
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:75 - Assignment to $ids"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 75
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "dvwaPhpIds.inc.php:76 - run(this->request)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "dvwa/includes/dvwaPhpIds.inc.php"
                },
                "region" : {
                  "startLine" : 76
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - each(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:236 - Assignment to $value"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 236
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:237 - _iterate(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 237
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:259 - _detect(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 259
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:313 - _jsondecodevalues(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 313
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Monitor.php:485 - json_decode(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "external/phpids/0.6/lib/IDS/Monitor.php"
                },
                "region" : {
                  "startLine" : 485
                }
              }
            }
          } ]
        } ]
      } ]
    } ]
  } ]
}